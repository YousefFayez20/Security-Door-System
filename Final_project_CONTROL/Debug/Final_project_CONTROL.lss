
Final_project_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003f7a  0000400e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000cc  008000cc  0000407a  2**0
                  ALLOC
  3 .stab         00003ad4  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e4  00000000  00000000  00007b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ceb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 eb       	ldi	r26, 0xB5	; 181
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 eb       	ldi	r24, 0xB5	; 181
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 ActionsDone = 0;
uint8 ActionsBuzzer = 0;
uint8 NoOfSeconds = 0;
uint8 MatchedPass = 0x01;

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	Initializations();
     b4e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Initializations>

	check_newpassword();
     b52:	0e 94 f6 08 	call	0x11ec	; 0x11ec <check_newpassword>
	LCD_clearScreen();
     b56:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>

	while(1){


		status =  UART_recieveByte();
     b5a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
     b5e:	80 93 ce 00 	sts	0x00CE, r24
		if(status == OPEN_DOOR){
     b62:	80 91 ce 00 	lds	r24, 0x00CE
     b66:	82 33       	cpi	r24, 0x32	; 50
     b68:	19 f4       	brne	.+6      	; 0xb70 <main+0x2a>
		check_password();
     b6a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <check_password>
     b6e:	0c c0       	rjmp	.+24     	; 0xb88 <main+0x42>
		}
		else if(status == NEW_PASS){
     b70:	80 91 ce 00 	lds	r24, 0x00CE
     b74:	81 33       	cpi	r24, 0x31	; 49
     b76:	41 f4       	brne	.+16     	; 0xb88 <main+0x42>
			do{
				check_newpassword();
     b78:	0e 94 f6 08 	call	0x11ec	; 0x11ec <check_newpassword>
				 LCD_clearScreen();
     b7c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
				}while((MatchedPass != 0x01));
     b80:	80 91 bd 00 	lds	r24, 0x00BD
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	c1 f7       	brne	.-16     	; 0xb78 <main+0x32>

		}
		status = IDLE;
     b88:	10 92 ce 00 	sts	0x00CE, r1
     b8c:	e6 cf       	rjmp	.-52     	; 0xb5a <main+0x14>

00000b8e <Initializations>:
}




void Initializations(void){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	2c 97       	sbiw	r28, 0x0c	; 12
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
	TWI_init();
     ba2:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <TWI_init>
		UART_ConfigType uart_configurations = {DATA_8_BIT,EVEN_PARITY,ONE_STOP_BIT,9600};
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	99 87       	std	Y+9, r25	; 0x09
     bac:	88 87       	std	Y+8, r24	; 0x08
     bae:	ee eb       	ldi	r30, 0xBE	; 190
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	fb 87       	std	Y+11, r31	; 0x0b
     bb4:	ea 87       	std	Y+10, r30	; 0x0a
     bb6:	f7 e0       	ldi	r31, 0x07	; 7
     bb8:	fc 87       	std	Y+12, r31	; 0x0c
     bba:	ea 85       	ldd	r30, Y+10	; 0x0a
     bbc:	fb 85       	ldd	r31, Y+11	; 0x0b
     bbe:	00 80       	ld	r0, Z
     bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	9b 87       	std	Y+11, r25	; 0x0b
     bc8:	8a 87       	std	Y+10, r24	; 0x0a
     bca:	e8 85       	ldd	r30, Y+8	; 0x08
     bcc:	f9 85       	ldd	r31, Y+9	; 0x09
     bce:	00 82       	st	Z, r0
     bd0:	88 85       	ldd	r24, Y+8	; 0x08
     bd2:	99 85       	ldd	r25, Y+9	; 0x09
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	99 87       	std	Y+9, r25	; 0x09
     bd8:	88 87       	std	Y+8, r24	; 0x08
     bda:	9c 85       	ldd	r25, Y+12	; 0x0c
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ec 85       	ldd	r30, Y+12	; 0x0c
     be2:	ee 23       	and	r30, r30
     be4:	51 f7       	brne	.-44     	; 0xbba <Initializations+0x2c>
		UART_init(&uart_configurations);
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <UART_init>
		LCD_init();
     bee:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_init>
		SREG |= (1<<7);
     bf2:	af e5       	ldi	r26, 0x5F	; 95
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ef e5       	ldi	r30, 0x5F	; 95
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24

		DcMotor_Init();
     c00:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <DcMotor_Init>
		isEmpty = 0x01;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 cc 00 	sts	0x00CC, r24

}
     c0a:	2c 96       	adiw	r28, 0x0c	; 12
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <BuzzerActions>:




void BuzzerActions(void){
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	NoOfSeconds++;
     c24:	80 91 d1 00 	lds	r24, 0x00D1
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 d1 00 	sts	0x00D1, r24
	if(NoOfSeconds < 60){
     c2e:	80 91 d1 00 	lds	r24, 0x00D1
     c32:	8c 33       	cpi	r24, 0x3C	; 60
     c34:	30 f4       	brcc	.+12     	; 0xc42 <BuzzerActions+0x26>
		UART_sendByte(PASS_LIMIT);
     c36:	83 e4       	ldi	r24, 0x43	; 67
     c38:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		Buzzer_on();
     c3c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Buzzer_on>
     c40:	0c c0       	rjmp	.+24     	; 0xc5a <BuzzerActions+0x3e>
			}
	else{
			Buzzer_off();
     c42:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <Buzzer_off>
		Timer1_deInit();
     c46:	0e 94 66 1d 	call	0x3acc	; 0x3acc <Timer1_deInit>
		NoOfSeconds = 0;
     c4a:	10 92 d1 00 	sts	0x00D1, r1
		ActionsBuzzer = 0x01;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 d0 00 	sts	0x00D0, r24
		UART_sendByte(HOLD);
     c54:	82 e4       	ldi	r24, 0x42	; 66
     c56:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		}

	}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <MotorActions>:


void MotorActions(void){
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	NoOfSeconds++;
     c68:	80 91 d1 00 	lds	r24, 0x00D1
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	80 93 d1 00 	sts	0x00D1, r24
	LCD_clearScreen();
     c72:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
	if(NoOfSeconds < 15){
     c76:	80 91 d1 00 	lds	r24, 0x00D1
     c7a:	8f 30       	cpi	r24, 0x0F	; 15
     c7c:	40 f4       	brcc	.+16     	; 0xc8e <MotorActions+0x2e>
		UART_sendByte(UNLOCKING);
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>

	DcMotor_Rotate(CW,FULL_SPEED);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <DcMotor_Rotate>
     c8c:	2e c0       	rjmp	.+92     	; 0xcea <MotorActions+0x8a>
	}
	else if(NoOfSeconds >= 15 && NoOfSeconds < 18 ){
     c8e:	80 91 d1 00 	lds	r24, 0x00D1
     c92:	8f 30       	cpi	r24, 0x0F	; 15
     c94:	60 f0       	brcs	.+24     	; 0xcae <MotorActions+0x4e>
     c96:	80 91 d1 00 	lds	r24, 0x00D1
     c9a:	82 31       	cpi	r24, 0x12	; 18
     c9c:	40 f4       	brcc	.+16     	; 0xcae <MotorActions+0x4e>
		UART_sendByte(HOLD);
     c9e:	82 e4       	ldi	r24, 0x42	; 66
     ca0:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		DcMotor_Rotate(STOP,OFF);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <DcMotor_Rotate>
     cac:	1e c0       	rjmp	.+60     	; 0xcea <MotorActions+0x8a>
	}
	else if(NoOfSeconds >= 18 && NoOfSeconds < 33){
     cae:	80 91 d1 00 	lds	r24, 0x00D1
     cb2:	82 31       	cpi	r24, 0x12	; 18
     cb4:	60 f0       	brcs	.+24     	; 0xcce <MotorActions+0x6e>
     cb6:	80 91 d1 00 	lds	r24, 0x00D1
     cba:	81 32       	cpi	r24, 0x21	; 33
     cbc:	40 f4       	brcc	.+16     	; 0xcce <MotorActions+0x6e>
		UART_sendByte(LOCKING);
     cbe:	81 e4       	ldi	r24, 0x41	; 65
     cc0:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		DcMotor_Rotate(A_CW,FULL_SPEED);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <DcMotor_Rotate>
     ccc:	0e c0       	rjmp	.+28     	; 0xcea <MotorActions+0x8a>
	}
	else{
	ActionsDone = 0x01;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	80 93 cf 00 	sts	0x00CF, r24
	NoOfSeconds = 0;
     cd4:	10 92 d1 00 	sts	0x00D1, r1
	Timer1_deInit();
     cd8:	0e 94 66 1d 	call	0x3acc	; 0x3acc <Timer1_deInit>
	UART_sendByte(HOLD);
     cdc:	82 e4       	ldi	r24, 0x42	; 66
     cde:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
	DcMotor_Rotate(STOP,OFF);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <DcMotor_Rotate>

	}
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <check_password>:



void check_password(void){
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	c1 54       	subi	r28, 0x41	; 65
     cfe:	d0 40       	sbci	r29, 0x00	; 0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
        uint8 key[5];
    	uint8 val[5];
		uint8 i = 0;
     d0a:	1c a6       	std	Y+44, r1	; 0x2c
		uint8 correct = 0x01;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8b a7       	std	Y+43, r24	; 0x2b

	    Timer1_ConfigType TimerConfigurations = {0, 7813, CLK_1024,CTC};
     d10:	ce 01       	movw	r24, r28
     d12:	c7 96       	adiw	r24, 0x37	; 55
     d14:	9e af       	std	Y+62, r25	; 0x3e
     d16:	8d af       	std	Y+61, r24	; 0x3d
     d18:	e5 ec       	ldi	r30, 0xC5	; 197
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	ff af       	std	Y+63, r31	; 0x3f
     d20:	ee af       	std	Y+62, r30	; 0x3e
     d22:	21 97       	sbiw	r28, 0x01	; 1
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	22 96       	adiw	r28, 0x02	; 2
     d28:	ff af       	std	Y+63, r31	; 0x3f
     d2a:	22 97       	sbiw	r28, 0x02	; 2
     d2c:	21 96       	adiw	r28, 0x01	; 1
     d2e:	ee ad       	ldd	r30, Y+62	; 0x3e
     d30:	ff ad       	ldd	r31, Y+63	; 0x3f
     d32:	21 97       	sbiw	r28, 0x01	; 1
     d34:	00 80       	ld	r0, Z
     d36:	21 96       	adiw	r28, 0x01	; 1
     d38:	8e ad       	ldd	r24, Y+62	; 0x3e
     d3a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d3c:	21 97       	sbiw	r28, 0x01	; 1
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	21 96       	adiw	r28, 0x01	; 1
     d42:	9f af       	std	Y+63, r25	; 0x3f
     d44:	8e af       	std	Y+62, r24	; 0x3e
     d46:	21 97       	sbiw	r28, 0x01	; 1
     d48:	ed ad       	ldd	r30, Y+61	; 0x3d
     d4a:	fe ad       	ldd	r31, Y+62	; 0x3e
     d4c:	00 82       	st	Z, r0
     d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     d50:	9e ad       	ldd	r25, Y+62	; 0x3e
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	9e af       	std	Y+62, r25	; 0x3e
     d56:	8d af       	std	Y+61, r24	; 0x3d
     d58:	22 96       	adiw	r28, 0x02	; 2
     d5a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d5c:	22 97       	sbiw	r28, 0x02	; 2
     d5e:	91 50       	subi	r25, 0x01	; 1
     d60:	22 96       	adiw	r28, 0x02	; 2
     d62:	9f af       	std	Y+63, r25	; 0x3f
     d64:	22 97       	sbiw	r28, 0x02	; 2
     d66:	22 96       	adiw	r28, 0x02	; 2
     d68:	ef ad       	ldd	r30, Y+63	; 0x3f
     d6a:	22 97       	sbiw	r28, 0x02	; 2
     d6c:	ee 23       	and	r30, r30
     d6e:	f1 f6       	brne	.-68     	; 0xd2c <check_password+0x3c>
     d70:	2a c2       	rjmp	.+1108   	; 0x11c6 <check_password+0x4d6>

while(FalseTries < 3){
	    correct = 0x01;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_displayString(" password: ");
     d76:	80 e6       	ldi	r24, 0x60	; 96
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
		for(i = 0; i<5; i++){
     d7e:	1c a6       	std	Y+44, r1	; 0x2c
     d80:	1c c0       	rjmp	.+56     	; 0xdba <check_password+0xca>

			key[i] =UART_recieveByte();
     d82:	8c a5       	ldd	r24, Y+44	; 0x2c
     d84:	08 2f       	mov	r16, r24
     d86:	10 e0       	ldi	r17, 0x00	; 0
     d88:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
     d8c:	28 2f       	mov	r18, r24
     d8e:	ce 01       	movw	r24, r28
     d90:	8d 96       	adiw	r24, 0x2d	; 45
     d92:	fc 01       	movw	r30, r24
     d94:	e0 0f       	add	r30, r16
     d96:	f1 1f       	adc	r31, r17
     d98:	20 83       	st	Z, r18

			LCD_intgerToString(key[i]);
     d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	ce 01       	movw	r24, r28
     da2:	8d 96       	adiw	r24, 0x2d	; 45
     da4:	fc 01       	movw	r30, r24
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	80 81       	ld	r24, Z
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_intgerToString>
	    Timer1_ConfigType TimerConfigurations = {0, 7813, CLK_1024,CTC};

while(FalseTries < 3){
	    correct = 0x01;
		LCD_displayString(" password: ");
		for(i = 0; i<5; i++){
     db4:	8c a5       	ldd	r24, Y+44	; 0x2c
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	8c a7       	std	Y+44, r24	; 0x2c
     dba:	8c a5       	ldd	r24, Y+44	; 0x2c
     dbc:	85 30       	cpi	r24, 0x05	; 5
     dbe:	08 f3       	brcs	.-62     	; 0xd82 <check_password+0x92>
			key[i] =UART_recieveByte();

			LCD_intgerToString(key[i]);
		}

		while(UART_recieveByte() != HMI_SENT);
     dc0:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
     dc4:	84 33       	cpi	r24, 0x34	; 52
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <check_password+0xd0>

		 EEPROM_readByte(0x0311, &val[0]);  /* Read 0x0F from the external EEPROM */
     dc8:	9e 01       	movw	r18, r28
     dca:	2e 5c       	subi	r18, 0xCE	; 206
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	81 e1       	ldi	r24, 0x11	; 17
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	b9 01       	movw	r22, r18
     dd4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_readByte>
		 EEPROM_readByte(0x0312, &val[1]);  /* Read 0x0F from the external EEPROM */
     dd8:	ce 01       	movw	r24, r28
     dda:	c2 96       	adiw	r24, 0x32	; 50
     ddc:	9c 01       	movw	r18, r24
     dde:	2f 5f       	subi	r18, 0xFF	; 255
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	82 e1       	ldi	r24, 0x12	; 18
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	b9 01       	movw	r22, r18
     de8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_readByte>
		 EEPROM_readByte(0x0313, &val[2]);  /* Read 0x0F from the external EEPROM */
     dec:	ce 01       	movw	r24, r28
     dee:	c2 96       	adiw	r24, 0x32	; 50
     df0:	9c 01       	movw	r18, r24
     df2:	2e 5f       	subi	r18, 0xFE	; 254
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	83 e1       	ldi	r24, 0x13	; 19
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	b9 01       	movw	r22, r18
     dfc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_readByte>
		 EEPROM_readByte(0x0314, &val[3]);  /* Read 0x0F from the external EEPROM */
     e00:	ce 01       	movw	r24, r28
     e02:	c2 96       	adiw	r24, 0x32	; 50
     e04:	9c 01       	movw	r18, r24
     e06:	2d 5f       	subi	r18, 0xFD	; 253
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	84 e1       	ldi	r24, 0x14	; 20
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_readByte>
		 EEPROM_readByte(0x0315, &val[4]);  /* Read 0x0F from the external EEPROM */
     e14:	ce 01       	movw	r24, r28
     e16:	c2 96       	adiw	r24, 0x32	; 50
     e18:	9c 01       	movw	r18, r24
     e1a:	2c 5f       	subi	r18, 0xFC	; 252
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	85 e1       	ldi	r24, 0x15	; 21
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	b9 01       	movw	r22, r18
     e24:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <EEPROM_readByte>
		 for(i = 0; i<5; i++){
     e28:	1c a6       	std	Y+44, r1	; 0x2c
     e2a:	18 c0       	rjmp	.+48     	; 0xe5c <check_password+0x16c>

		 			if(key[i] == val[i]){
     e2c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	ce 01       	movw	r24, r28
     e34:	8d 96       	adiw	r24, 0x2d	; 45
     e36:	fc 01       	movw	r30, r24
     e38:	e2 0f       	add	r30, r18
     e3a:	f3 1f       	adc	r31, r19
     e3c:	40 81       	ld	r20, Z
     e3e:	8c a5       	ldd	r24, Y+44	; 0x2c
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	ce 01       	movw	r24, r28
     e46:	c2 96       	adiw	r24, 0x32	; 50
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	80 81       	ld	r24, Z
     e50:	48 17       	cp	r20, r24
     e52:	09 f0       	breq	.+2      	; 0xe56 <check_password+0x166>

		 				//continue;
		 			}
		 			else{
		 				correct = 0x00;
     e54:	1b a6       	std	Y+43, r1	; 0x2b
		 EEPROM_readByte(0x0311, &val[0]);  /* Read 0x0F from the external EEPROM */
		 EEPROM_readByte(0x0312, &val[1]);  /* Read 0x0F from the external EEPROM */
		 EEPROM_readByte(0x0313, &val[2]);  /* Read 0x0F from the external EEPROM */
		 EEPROM_readByte(0x0314, &val[3]);  /* Read 0x0F from the external EEPROM */
		 EEPROM_readByte(0x0315, &val[4]);  /* Read 0x0F from the external EEPROM */
		 for(i = 0; i<5; i++){
     e56:	8c a5       	ldd	r24, Y+44	; 0x2c
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	8c a7       	std	Y+44, r24	; 0x2c
     e5c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e5e:	85 30       	cpi	r24, 0x05	; 5
     e60:	28 f3       	brcs	.-54     	; 0xe2c <check_password+0x13c>
		 				correct = 0x00;
		 				//break;
		 			}

		 		}
		 LCD_clearScreen();
     e62:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>

		 if (correct == 0x01){
     e66:	8b a5       	ldd	r24, Y+43	; 0x2b
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <check_password+0x17e>
     e6c:	9c c0       	rjmp	.+312    	; 0xfa6 <check_password+0x2b6>
			 LCD_displayString("Matched");
     e6e:	8c e6       	ldi	r24, 0x6C	; 108
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
			 UART_sendByte(PASS_CORRECT);
     e76:	81 e2       	ldi	r24, 0x21	; 33
     e78:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a8 ec       	ldi	r26, 0xC8	; 200
     e82:	b2 e4       	ldi	r27, 0x42	; 66
     e84:	8f a3       	std	Y+39, r24	; 0x27
     e86:	98 a7       	std	Y+40, r25	; 0x28
     e88:	a9 a7       	std	Y+41, r26	; 0x29
     e8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	6f a1       	ldd	r22, Y+39	; 0x27
     e8e:	78 a5       	ldd	r23, Y+40	; 0x28
     e90:	89 a5       	ldd	r24, Y+41	; 0x29
     e92:	9a a5       	ldd	r25, Y+42	; 0x2a
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a ef       	ldi	r20, 0xFA	; 250
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8b a3       	std	Y+35, r24	; 0x23
     ea6:	9c a3       	std	Y+36, r25	; 0x24
     ea8:	ad a3       	std	Y+37, r26	; 0x25
     eaa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eac:	6b a1       	ldd	r22, Y+35	; 0x23
     eae:	7c a1       	ldd	r23, Y+36	; 0x24
     eb0:	8d a1       	ldd	r24, Y+37	; 0x25
     eb2:	9e a1       	ldd	r25, Y+38	; 0x26
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e8       	ldi	r20, 0x80	; 128
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec0:	88 23       	and	r24, r24
     ec2:	2c f4       	brge	.+10     	; 0xece <check_password+0x1de>
		__ticks = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9a a3       	std	Y+34, r25	; 0x22
     eca:	89 a3       	std	Y+33, r24	; 0x21
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <check_password+0x25c>
	else if (__tmp > 65535)
     ece:	6b a1       	ldd	r22, Y+35	; 0x23
     ed0:	7c a1       	ldd	r23, Y+36	; 0x24
     ed2:	8d a1       	ldd	r24, Y+37	; 0x25
     ed4:	9e a1       	ldd	r25, Y+38	; 0x26
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	4c f5       	brge	.+82     	; 0xf38 <check_password+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee6:	6f a1       	ldd	r22, Y+39	; 0x27
     ee8:	78 a5       	ldd	r23, Y+40	; 0x28
     eea:	89 a5       	ldd	r24, Y+41	; 0x29
     eec:	9a a5       	ldd	r25, Y+42	; 0x2a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9a a3       	std	Y+34, r25	; 0x22
     f0c:	89 a3       	std	Y+33, r24	; 0x21
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <check_password+0x23e>
     f10:	88 ec       	ldi	r24, 0xC8	; 200
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	98 a3       	std	Y+32, r25	; 0x20
     f16:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f18:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f1a:	98 a1       	ldd	r25, Y+32	; 0x20
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <check_password+0x22c>
     f20:	98 a3       	std	Y+32, r25	; 0x20
     f22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	89 a1       	ldd	r24, Y+33	; 0x21
     f26:	9a a1       	ldd	r25, Y+34	; 0x22
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2e:	89 a1       	ldd	r24, Y+33	; 0x21
     f30:	9a a1       	ldd	r25, Y+34	; 0x22
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f7       	brne	.-38     	; 0xf10 <check_password+0x220>
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <check_password+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f38:	6b a1       	ldd	r22, Y+35	; 0x23
     f3a:	7c a1       	ldd	r23, Y+36	; 0x24
     f3c:	8d a1       	ldd	r24, Y+37	; 0x25
     f3e:	9e a1       	ldd	r25, Y+38	; 0x26
     f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9a a3       	std	Y+34, r25	; 0x22
     f4a:	89 a3       	std	Y+33, r24	; 0x21
     f4c:	89 a1       	ldd	r24, Y+33	; 0x21
     f4e:	9a a1       	ldd	r25, Y+34	; 0x22
     f50:	9e 8f       	std	Y+30, r25	; 0x1e
     f52:	8d 8f       	std	Y+29, r24	; 0x1d
     f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <check_password+0x268>
     f5c:	9e 8f       	std	Y+30, r25	; 0x1e
     f5e:	8d 8f       	std	Y+29, r24	; 0x1d
			 _delay_ms(100);
			 LCD_clearScreen();
     f60:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
			 FalseTries = 0;
     f64:	10 92 cd 00 	sts	0x00CD, r1
			 if(UART_recieveByte() == StartMotorActions){
     f68:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
     f6c:	84 34       	cpi	r24, 0x44	; 68
     f6e:	89 f4       	brne	.+34     	; 0xf92 <check_password+0x2a2>
			 Timer1_setCallBack(MotorActions);
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	96 e0       	ldi	r25, 0x06	; 6
     f74:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <Timer1_setCallBack>
			 Timer1_init(&TimerConfigurations);
     f78:	ce 01       	movw	r24, r28
     f7a:	c7 96       	adiw	r24, 0x37	; 55
     f7c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <Timer1_init>
			 while(ActionsDone != 0x01){
     f80:	80 91 cf 00 	lds	r24, 0x00CF
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	e1 f7       	brne	.-8      	; 0xf80 <check_password+0x290>
			 }
			 ActionsDone = 0x00;
     f88:	10 92 cf 00 	sts	0x00CF, r1
			 LCD_clearScreen();
     f8c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
     f90:	1f c1       	rjmp	.+574    	; 0x11d0 <check_password+0x4e0>
			 }
			 else if(UART_recieveByte() == NEW_PASS){
     f92:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
     f96:	81 33       	cpi	r24, 0x31	; 49
     f98:	09 f0       	breq	.+2      	; 0xf9c <check_password+0x2ac>
     f9a:	1a c1       	rjmp	.+564    	; 0x11d0 <check_password+0x4e0>
				 check_newpassword();
     f9c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <check_newpassword>
				 LCD_clearScreen();
     fa0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
     fa4:	15 c1       	rjmp	.+554    	; 0x11d0 <check_password+0x4e0>
			 break;

			 //Correct actions
		 }
		 else{
			 FalseTries++;
     fa6:	80 91 cd 00 	lds	r24, 0x00CD
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 cd 00 	sts	0x00CD, r24
			 LCD_displayString("Not Matched");
     fb0:	84 e7       	ldi	r24, 0x74	; 116
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
			 UART_sendByte(PASS_WRONG);
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		 }

			if(FalseTries == 3){
     fbe:	80 91 cd 00 	lds	r24, 0x00CD
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <check_password+0x2d8>
     fc6:	8b c0       	rjmp	.+278    	; 0x10de <check_password+0x3ee>
				LCD_displayString("Limit Reached");
     fc8:	80 e8       	ldi	r24, 0x80	; 128
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	aa ef       	ldi	r26, 0xFA	; 250
     fd6:	b3 e4       	ldi	r27, 0x43	; 67
     fd8:	89 8f       	std	Y+25, r24	; 0x19
     fda:	9a 8f       	std	Y+26, r25	; 0x1a
     fdc:	ab 8f       	std	Y+27, r26	; 0x1b
     fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	69 8d       	ldd	r22, Y+25	; 0x19
     fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	9e 8b       	std	Y+22, r25	; 0x16
     ffc:	af 8b       	std	Y+23, r26	; 0x17
     ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1000:	6d 89       	ldd	r22, Y+21	; 0x15
    1002:	7e 89       	ldd	r23, Y+22	; 0x16
    1004:	8f 89       	ldd	r24, Y+23	; 0x17
    1006:	98 8d       	ldd	r25, Y+24	; 0x18
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <check_password+0x332>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <check_password+0x3b0>
	else if (__tmp > 65535)
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <check_password+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	69 8d       	ldd	r22, Y+25	; 0x19
    103c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <check_password+0x392>
    1064:	88 ec       	ldi	r24, 0xC8	; 200
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9a 8b       	std	Y+18, r25	; 0x12
    106a:	89 8b       	std	Y+17, r24	; 0x11
    106c:	89 89       	ldd	r24, Y+17	; 0x11
    106e:	9a 89       	ldd	r25, Y+18	; 0x12
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <check_password+0x380>
    1074:	9a 8b       	std	Y+18, r25	; 0x12
    1076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c 8b       	std	Y+20, r25	; 0x14
    1080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <check_password+0x374>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <check_password+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	98 8b       	std	Y+16, r25	; 0x10
    10a6:	8f 87       	std	Y+15, r24	; 0x0f
    10a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10aa:	98 89       	ldd	r25, Y+16	; 0x10
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <check_password+0x3bc>
    10b0:	98 8b       	std	Y+16, r25	; 0x10
    10b2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
    10b4:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>

				Timer1_setCallBack(BuzzerActions);
    10b8:	8e e0       	ldi	r24, 0x0E	; 14
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <Timer1_setCallBack>
				Timer1_init(&TimerConfigurations);
    10c0:	ce 01       	movw	r24, r28
    10c2:	c7 96       	adiw	r24, 0x37	; 55
    10c4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <Timer1_init>
				 while(ActionsBuzzer != 0x01){
    10c8:	80 91 d0 00 	lds	r24, 0x00D0
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <check_password+0x3d8>
				}
				ActionsBuzzer = 0x00;
    10d0:	10 92 d0 00 	sts	0x00D0, r1
				LCD_clearScreen();
    10d4:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
				UART_sendByte(MENU);
    10d8:	83 e3       	ldi	r24, 0x33	; 51
    10da:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	aa ef       	ldi	r26, 0xFA	; 250
    10e4:	b3 e4       	ldi	r27, 0x43	; 67
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	ad 87       	std	Y+13, r26	; 0x0d
    10ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a ef       	ldi	r20, 0xFA	; 250
    10fc:	54 e4       	ldi	r21, 0x44	; 68
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
    110a:	a9 87       	std	Y+9, r26	; 0x09
    110c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <check_password+0x440>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <check_password+0x4be>
	else if (__tmp > 65535)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <check_password+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <check_password+0x4a0>
    1172:	88 ec       	ldi	r24, 0xC8	; 200
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <check_password+0x48e>
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <check_password+0x482>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <check_password+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <check_password+0x4ca>
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
				// System should be locked no inputs from Keypad will be accepted during
				//this time period.
				//Go to Step 2 the main options again
				}
			_delay_ms(500);
			LCD_clearScreen();
    11c2:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
		uint8 i = 0;
		uint8 correct = 0x01;

	    Timer1_ConfigType TimerConfigurations = {0, 7813, CLK_1024,CTC};

while(FalseTries < 3){
    11c6:	80 91 cd 00 	lds	r24, 0x00CD
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <check_password+0x4e0>
    11ce:	d1 cd       	rjmp	.-1118   	; 0xd72 <check_password+0x82>
				//Go to Step 2 the main options again
				}
			_delay_ms(500);
			LCD_clearScreen();
}
FalseTries = 0;
    11d0:	10 92 cd 00 	sts	0x00CD, r1
}
    11d4:	cf 5b       	subi	r28, 0xBF	; 191
    11d6:	df 4f       	sbci	r29, 0xFF	; 255
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <check_newpassword>:

void check_newpassword(void){
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	cd 56       	subi	r28, 0x6D	; 109
    11fa:	d0 40       	sbci	r29, 0x00	; 0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
	        uint8 key[5];
			uint8 key2[5];
			uint8 i = 0;
    1206:	fe 01       	movw	r30, r28
    1208:	ed 59       	subi	r30, 0x9D	; 157
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	10 82       	st	Z, r1
			MatchedPass = 0x00;
    120e:	10 92 bd 00 	sts	0x00BD, r1
    1212:	3b c4       	rjmp	.+2166   	; 0x1a8a <check_newpassword+0x89e>
			while((MatchedPass == 0x00)){
			MatchedPass = 0x01;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 bd 00 	sts	0x00BD, r24
			LCD_displayString(" pass 1: ");
    121a:	8e e8       	ldi	r24, 0x8E	; 142
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
			for(i = 0; i<5; i++){
    1222:	fe 01       	movw	r30, r28
    1224:	ed 59       	subi	r30, 0x9D	; 157
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	10 82       	st	Z, r1
    122a:	2a c0       	rjmp	.+84     	; 0x1280 <check_newpassword+0x94>

				key[i] = UART_recieveByte();
    122c:	fe 01       	movw	r30, r28
    122e:	ed 59       	subi	r30, 0x9D	; 157
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	08 2f       	mov	r16, r24
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    123c:	28 2f       	mov	r18, r24
    123e:	ce 01       	movw	r24, r28
    1240:	8c 59       	subi	r24, 0x9C	; 156
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	e0 0f       	add	r30, r16
    1248:	f1 1f       	adc	r31, r17
    124a:	20 83       	st	Z, r18

				LCD_intgerToString(key[i]);
    124c:	fe 01       	movw	r30, r28
    124e:	ed 59       	subi	r30, 0x9D	; 157
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	ce 01       	movw	r24, r28
    125a:	8c 59       	subi	r24, 0x9C	; 156
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	fc 01       	movw	r30, r24
    1260:	e2 0f       	add	r30, r18
    1262:	f3 1f       	adc	r31, r19
    1264:	80 81       	ld	r24, Z
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_intgerToString>
			uint8 i = 0;
			MatchedPass = 0x00;
			while((MatchedPass == 0x00)){
			MatchedPass = 0x01;
			LCD_displayString(" pass 1: ");
			for(i = 0; i<5; i++){
    126e:	de 01       	movw	r26, r28
    1270:	ad 59       	subi	r26, 0x9D	; 157
    1272:	bf 4f       	sbci	r27, 0xFF	; 255
    1274:	fe 01       	movw	r30, r28
    1276:	ed 59       	subi	r30, 0x9D	; 157
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	8c 93       	st	X, r24
    1280:	fe 01       	movw	r30, r28
    1282:	ed 59       	subi	r30, 0x9D	; 157
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	85 30       	cpi	r24, 0x05	; 5
    128a:	80 f2       	brcs	.-96     	; 0x122c <check_newpassword+0x40>

				key[i] = UART_recieveByte();

				LCD_intgerToString(key[i]);
			}
			while(UART_recieveByte() != HMI_SENT);
    128c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    1290:	84 33       	cpi	r24, 0x34	; 52
    1292:	e1 f7       	brne	.-8      	; 0x128c <check_newpassword+0xa0>
			LCD_moveCursor(1,0);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	0e 94 26 1c 	call	0x384c	; 0x384c <LCD_moveCursor>
			LCD_displayString(" pass 2: ");
    129c:	88 e9       	ldi	r24, 0x98	; 152
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
			for(i = 0; i<5; i++){
    12a4:	fe 01       	movw	r30, r28
    12a6:	ed 59       	subi	r30, 0x9D	; 157
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	10 82       	st	Z, r1
    12ac:	2a c0       	rjmp	.+84     	; 0x1302 <check_newpassword+0x116>


				key2[i] =UART_recieveByte();
    12ae:	fe 01       	movw	r30, r28
    12b0:	ed 59       	subi	r30, 0x9D	; 157
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	08 2f       	mov	r16, r24
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    12be:	28 2f       	mov	r18, r24
    12c0:	ce 01       	movw	r24, r28
    12c2:	87 59       	subi	r24, 0x97	; 151
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	fc 01       	movw	r30, r24
    12c8:	e0 0f       	add	r30, r16
    12ca:	f1 1f       	adc	r31, r17
    12cc:	20 83       	st	Z, r18

				LCD_intgerToString(key2[i]);
    12ce:	fe 01       	movw	r30, r28
    12d0:	ed 59       	subi	r30, 0x9D	; 157
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	ce 01       	movw	r24, r28
    12dc:	87 59       	subi	r24, 0x97	; 151
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_intgerToString>
				LCD_intgerToString(key[i]);
			}
			while(UART_recieveByte() != HMI_SENT);
			LCD_moveCursor(1,0);
			LCD_displayString(" pass 2: ");
			for(i = 0; i<5; i++){
    12f0:	de 01       	movw	r26, r28
    12f2:	ad 59       	subi	r26, 0x9D	; 157
    12f4:	bf 4f       	sbci	r27, 0xFF	; 255
    12f6:	fe 01       	movw	r30, r28
    12f8:	ed 59       	subi	r30, 0x9D	; 157
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	8c 93       	st	X, r24
    1302:	fe 01       	movw	r30, r28
    1304:	ed 59       	subi	r30, 0x9D	; 157
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	85 30       	cpi	r24, 0x05	; 5
    130c:	80 f2       	brcs	.-96     	; 0x12ae <check_newpassword+0xc2>
				key2[i] =UART_recieveByte();

				LCD_intgerToString(key2[i]);
			}

			while(UART_recieveByte() != HMI_SENT){}
    130e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    1312:	84 33       	cpi	r24, 0x34	; 52
    1314:	e1 f7       	brne	.-8      	; 0x130e <check_newpassword+0x122>
			for(i = 0; i<5; i++){
    1316:	fe 01       	movw	r30, r28
    1318:	ed 59       	subi	r30, 0x9D	; 157
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	10 82       	st	Z, r1
    131e:	28 c0       	rjmp	.+80     	; 0x1370 <check_newpassword+0x184>
				if(key[i] == key2[i]){
    1320:	fe 01       	movw	r30, r28
    1322:	ed 59       	subi	r30, 0x9D	; 157
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	ce 01       	movw	r24, r28
    132e:	8c 59       	subi	r24, 0x9C	; 156
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	fc 01       	movw	r30, r24
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	40 81       	ld	r20, Z
    133a:	fe 01       	movw	r30, r28
    133c:	ed 59       	subi	r30, 0x9D	; 157
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	ce 01       	movw	r24, r28
    1348:	87 59       	subi	r24, 0x97	; 151
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	fc 01       	movw	r30, r24
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	80 81       	ld	r24, Z
    1354:	48 17       	cp	r20, r24
    1356:	19 f0       	breq	.+6      	; 0x135e <check_newpassword+0x172>
				}
				else{
					MatchedPass = 0x00;
    1358:	10 92 bd 00 	sts	0x00BD, r1
    135c:	0f c0       	rjmp	.+30     	; 0x137c <check_newpassword+0x190>

				LCD_intgerToString(key2[i]);
			}

			while(UART_recieveByte() != HMI_SENT){}
			for(i = 0; i<5; i++){
    135e:	de 01       	movw	r26, r28
    1360:	ad 59       	subi	r26, 0x9D	; 157
    1362:	bf 4f       	sbci	r27, 0xFF	; 255
    1364:	fe 01       	movw	r30, r28
    1366:	ed 59       	subi	r30, 0x9D	; 157
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	8c 93       	st	X, r24
    1370:	fe 01       	movw	r30, r28
    1372:	ed 59       	subi	r30, 0x9D	; 157
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	85 30       	cpi	r24, 0x05	; 5
    137a:	90 f2       	brcs	.-92     	; 0x1320 <check_newpassword+0x134>
				else{
					MatchedPass = 0x00;
					break;
				}
						}
			LCD_clearScreen();
    137c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
			if(MatchedPass == 0x01){
    1380:	80 91 bd 00 	lds	r24, 0x00BD
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	09 f0       	breq	.+2      	; 0x138a <check_newpassword+0x19e>
    1388:	06 c3       	rjmp	.+1548   	; 0x1996 <check_newpassword+0x7aa>
				LCD_displayString("passwords Matched ");
    138a:	82 ea       	ldi	r24, 0xA2	; 162
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
				//save to eeprom
				EEPROM_writeByte(0x0311, key[0]); /* Write 0x0F in the external EEPROM */
    1392:	fe 01       	movw	r30, r28
    1394:	ec 59       	subi	r30, 0x9C	; 156
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	20 81       	ld	r18, Z
    139a:	81 e1       	ldi	r24, 0x11	; 17
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	62 2f       	mov	r22, r18
    13a0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EEPROM_writeByte>
    13a4:	fe 01       	movw	r30, r28
    13a6:	e1 5a       	subi	r30, 0xA1	; 161
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e2       	ldi	r26, 0x20	; 32
    13b0:	b1 e4       	ldi	r27, 0x41	; 65
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	8e 01       	movw	r16, r28
    13bc:	05 5a       	subi	r16, 0xA5	; 165
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	e1 5a       	subi	r30, 0xA1	; 161
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	80 83       	st	Z, r24
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	a2 83       	std	Z+2, r26	; 0x02
    13e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e8:	fe 01       	movw	r30, r28
    13ea:	e5 5a       	subi	r30, 0xA5	; 165
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	44 f4       	brge	.+16     	; 0x1416 <check_newpassword+0x22a>
		__ticks = 1;
    1406:	fe 01       	movw	r30, r28
    1408:	e7 5a       	subi	r30, 0xA7	; 167
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    1414:	64 c0       	rjmp	.+200    	; 0x14de <check_newpassword+0x2f2>
	else if (__tmp > 65535)
    1416:	fe 01       	movw	r30, r28
    1418:	e5 5a       	subi	r30, 0xA5	; 165
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	4f e7       	ldi	r20, 0x7F	; 127
    142a:	57 e4       	ldi	r21, 0x47	; 71
    142c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1430:	18 16       	cp	r1, r24
    1432:	0c f0       	brlt	.+2      	; 0x1436 <check_newpassword+0x24a>
    1434:	43 c0       	rjmp	.+134    	; 0x14bc <check_newpassword+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	fe 01       	movw	r30, r28
    1438:	e1 5a       	subi	r30, 0xA1	; 161
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8e 01       	movw	r16, r28
    1456:	07 5a       	subi	r16, 0xA7	; 167
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
    146c:	1f c0       	rjmp	.+62     	; 0x14ac <check_newpassword+0x2c0>
    146e:	fe 01       	movw	r30, r28
    1470:	e9 5a       	subi	r30, 0xA9	; 169
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	88 ec       	ldi	r24, 0xC8	; 200
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	fe 01       	movw	r30, r28
    147e:	e9 5a       	subi	r30, 0xA9	; 169
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <check_newpassword+0x29a>
    148a:	fe 01       	movw	r30, r28
    148c:	e9 5a       	subi	r30, 0xA9	; 169
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	de 01       	movw	r26, r28
    1496:	a7 5a       	subi	r26, 0xA7	; 167
    1498:	bf 4f       	sbci	r27, 0xFF	; 255
    149a:	fe 01       	movw	r30, r28
    149c:	e7 5a       	subi	r30, 0xA7	; 167
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	9c 93       	st	X, r25
    14aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5a       	subi	r30, 0xA7	; 167
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	d1 f6       	brne	.-76     	; 0x146e <check_newpassword+0x282>
    14ba:	27 c0       	rjmp	.+78     	; 0x150a <check_newpassword+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	8e 01       	movw	r16, r28
    14be:	07 5a       	subi	r16, 0xA7	; 167
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e5 5a       	subi	r30, 0xA5	; 165
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	de 01       	movw	r26, r28
    14e0:	ab 5a       	subi	r26, 0xAB	; 171
    14e2:	bf 4f       	sbci	r27, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 5a       	subi	r30, 0xA7	; 167
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	8d 93       	st	X+, r24
    14f0:	9c 93       	st	X, r25
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 5a       	subi	r30, 0xAB	; 171
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <check_newpassword+0x310>
    1500:	fe 01       	movw	r30, r28
    1502:	eb 5a       	subi	r30, 0xAB	; 171
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
				_delay_ms(10);
				EEPROM_writeByte(0x0312, key[1]); /* Write 0x0F in the external EEPROM */
    150a:	fe 01       	movw	r30, r28
    150c:	ec 59       	subi	r30, 0x9C	; 156
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	21 81       	ldd	r18, Z+1	; 0x01
    1512:	82 e1       	ldi	r24, 0x12	; 18
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	62 2f       	mov	r22, r18
    1518:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EEPROM_writeByte>
    151c:	fe 01       	movw	r30, r28
    151e:	ef 5a       	subi	r30, 0xAF	; 175
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e2       	ldi	r26, 0x20	; 32
    1528:	b1 e4       	ldi	r27, 0x41	; 65
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	a2 83       	std	Z+2, r26	; 0x02
    1530:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	8e 01       	movw	r16, r28
    1534:	03 5b       	subi	r16, 0xB3	; 179
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	ef 5a       	subi	r30, 0xAF	; 175
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a ef       	ldi	r20, 0xFA	; 250
    154c:	54 e4       	ldi	r21, 0x44	; 68
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1560:	fe 01       	movw	r30, r28
    1562:	e3 5b       	subi	r30, 0xB3	; 179
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	44 f4       	brge	.+16     	; 0x158e <check_newpassword+0x3a2>
		__ticks = 1;
    157e:	fe 01       	movw	r30, r28
    1580:	e5 5b       	subi	r30, 0xB5	; 181
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	64 c0       	rjmp	.+200    	; 0x1656 <check_newpassword+0x46a>
	else if (__tmp > 65535)
    158e:	fe 01       	movw	r30, r28
    1590:	e3 5b       	subi	r30, 0xB3	; 179
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	3f ef       	ldi	r19, 0xFF	; 255
    15a0:	4f e7       	ldi	r20, 0x7F	; 127
    15a2:	57 e4       	ldi	r21, 0x47	; 71
    15a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <check_newpassword+0x3c2>
    15ac:	43 c0       	rjmp	.+134    	; 0x1634 <check_newpassword+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	fe 01       	movw	r30, r28
    15b0:	ef 5a       	subi	r30, 0xAF	; 175
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8e 01       	movw	r16, r28
    15ce:	05 5b       	subi	r16, 0xB5	; 181
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	f8 01       	movw	r30, r16
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <check_newpassword+0x438>
    15e6:	fe 01       	movw	r30, r28
    15e8:	e7 5b       	subi	r30, 0xB7	; 183
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	88 ec       	ldi	r24, 0xC8	; 200
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    15f4:	fe 01       	movw	r30, r28
    15f6:	e7 5b       	subi	r30, 0xB7	; 183
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <check_newpassword+0x412>
    1602:	fe 01       	movw	r30, r28
    1604:	e7 5b       	subi	r30, 0xB7	; 183
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	de 01       	movw	r26, r28
    160e:	a5 5b       	subi	r26, 0xB5	; 181
    1610:	bf 4f       	sbci	r27, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	e5 5b       	subi	r30, 0xB5	; 181
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	9c 93       	st	X, r25
    1622:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	fe 01       	movw	r30, r28
    1626:	e5 5b       	subi	r30, 0xB5	; 181
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	d1 f6       	brne	.-76     	; 0x15e6 <check_newpassword+0x3fa>
    1632:	27 c0       	rjmp	.+78     	; 0x1682 <check_newpassword+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	8e 01       	movw	r16, r28
    1636:	05 5b       	subi	r16, 0xB5	; 181
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	e3 5b       	subi	r30, 0xB3	; 179
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	de 01       	movw	r26, r28
    1658:	a9 5b       	subi	r26, 0xB9	; 185
    165a:	bf 4f       	sbci	r27, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	e5 5b       	subi	r30, 0xB5	; 181
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	8d 93       	st	X+, r24
    1668:	9c 93       	st	X, r25
    166a:	fe 01       	movw	r30, r28
    166c:	e9 5b       	subi	r30, 0xB9	; 185
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <check_newpassword+0x488>
    1678:	fe 01       	movw	r30, r28
    167a:	e9 5b       	subi	r30, 0xB9	; 185
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
				_delay_ms(10);
				EEPROM_writeByte(0x0313, key[2]); /* Write 0x0F in the external EEPROM */
    1682:	fe 01       	movw	r30, r28
    1684:	ec 59       	subi	r30, 0x9C	; 156
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	22 81       	ldd	r18, Z+2	; 0x02
    168a:	83 e1       	ldi	r24, 0x13	; 19
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	62 2f       	mov	r22, r18
    1690:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EEPROM_writeByte>
    1694:	fe 01       	movw	r30, r28
    1696:	ed 5b       	subi	r30, 0xBD	; 189
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e2       	ldi	r26, 0x20	; 32
    16a0:	b1 e4       	ldi	r27, 0x41	; 65
    16a2:	80 83       	st	Z, r24
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	a2 83       	std	Z+2, r26	; 0x02
    16a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	8e 01       	movw	r16, r28
    16ac:	01 5c       	subi	r16, 0xC1	; 193
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	ed 5b       	subi	r30, 0xBD	; 189
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a ef       	ldi	r20, 0xFA	; 250
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 83       	st	Z, r24
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	a2 83       	std	Z+2, r26	; 0x02
    16d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d8:	fe 01       	movw	r30, r28
    16da:	ff 96       	adiw	r30, 0x3f	; 63
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <check_newpassword+0x512>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e af       	std	Y+62, r25	; 0x3e
    16fa:	8d af       	std	Y+61, r24	; 0x3d
    16fc:	46 c0       	rjmp	.+140    	; 0x178a <check_newpassword+0x59e>
	else if (__tmp > 65535)
    16fe:	fe 01       	movw	r30, r28
    1700:	ff 96       	adiw	r30, 0x3f	; 63
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	64 f5       	brge	.+88     	; 0x1772 <check_newpassword+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	fe 01       	movw	r30, r28
    171c:	ed 5b       	subi	r30, 0xBD	; 189
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e af       	std	Y+62, r25	; 0x3e
    1746:	8d af       	std	Y+61, r24	; 0x3d
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <check_newpassword+0x57c>
    174a:	88 ec       	ldi	r24, 0xC8	; 200
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c af       	std	Y+60, r25	; 0x3c
    1750:	8b af       	std	Y+59, r24	; 0x3b
    1752:	8b ad       	ldd	r24, Y+59	; 0x3b
    1754:	9c ad       	ldd	r25, Y+60	; 0x3c
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <check_newpassword+0x56a>
    175a:	9c af       	std	Y+60, r25	; 0x3c
    175c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1760:	9e ad       	ldd	r25, Y+62	; 0x3e
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9e af       	std	Y+62, r25	; 0x3e
    1766:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	8d ad       	ldd	r24, Y+61	; 0x3d
    176a:	9e ad       	ldd	r25, Y+62	; 0x3e
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	69 f7       	brne	.-38     	; 0x174a <check_newpassword+0x55e>
    1770:	16 c0       	rjmp	.+44     	; 0x179e <check_newpassword+0x5b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	fe 01       	movw	r30, r28
    1774:	ff 96       	adiw	r30, 0x3f	; 63
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e af       	std	Y+62, r25	; 0x3e
    1788:	8d af       	std	Y+61, r24	; 0x3d
    178a:	8d ad       	ldd	r24, Y+61	; 0x3d
    178c:	9e ad       	ldd	r25, Y+62	; 0x3e
    178e:	9a af       	std	Y+58, r25	; 0x3a
    1790:	89 af       	std	Y+57, r24	; 0x39
    1792:	89 ad       	ldd	r24, Y+57	; 0x39
    1794:	9a ad       	ldd	r25, Y+58	; 0x3a
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <check_newpassword+0x5aa>
    179a:	9a af       	std	Y+58, r25	; 0x3a
    179c:	89 af       	std	Y+57, r24	; 0x39
			    _delay_ms(10);
				EEPROM_writeByte(0x0314, key[3]); /* Write 0x0F in the external EEPROM */
    179e:	fe 01       	movw	r30, r28
    17a0:	ec 59       	subi	r30, 0x9C	; 156
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	23 81       	ldd	r18, Z+3	; 0x03
    17a6:	84 e1       	ldi	r24, 0x14	; 20
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	62 2f       	mov	r22, r18
    17ac:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EEPROM_writeByte>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e2       	ldi	r26, 0x20	; 32
    17b6:	b1 e4       	ldi	r27, 0x41	; 65
    17b8:	8d ab       	std	Y+53, r24	; 0x35
    17ba:	9e ab       	std	Y+54, r25	; 0x36
    17bc:	af ab       	std	Y+55, r26	; 0x37
    17be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	6d a9       	ldd	r22, Y+53	; 0x35
    17c2:	7e a9       	ldd	r23, Y+54	; 0x36
    17c4:	8f a9       	ldd	r24, Y+55	; 0x37
    17c6:	98 ad       	ldd	r25, Y+56	; 0x38
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a ef       	ldi	r20, 0xFA	; 250
    17ce:	54 e4       	ldi	r21, 0x44	; 68
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	89 ab       	std	Y+49, r24	; 0x31
    17da:	9a ab       	std	Y+50, r25	; 0x32
    17dc:	ab ab       	std	Y+51, r26	; 0x33
    17de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e0:	69 a9       	ldd	r22, Y+49	; 0x31
    17e2:	7a a9       	ldd	r23, Y+50	; 0x32
    17e4:	8b a9       	ldd	r24, Y+51	; 0x33
    17e6:	9c a9       	ldd	r25, Y+52	; 0x34
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <check_newpassword+0x616>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	98 ab       	std	Y+48, r25	; 0x30
    17fe:	8f a7       	std	Y+47, r24	; 0x2f
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <check_newpassword+0x694>
	else if (__tmp > 65535)
    1802:	69 a9       	ldd	r22, Y+49	; 0x31
    1804:	7a a9       	ldd	r23, Y+50	; 0x32
    1806:	8b a9       	ldd	r24, Y+51	; 0x33
    1808:	9c a9       	ldd	r25, Y+52	; 0x34
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <check_newpassword+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	7e a9       	ldd	r23, Y+54	; 0x36
    181e:	8f a9       	ldd	r24, Y+55	; 0x37
    1820:	98 ad       	ldd	r25, Y+56	; 0x38
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <check_newpassword+0x676>
    1844:	88 ec       	ldi	r24, 0xC8	; 200
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9e a7       	std	Y+46, r25	; 0x2e
    184a:	8d a7       	std	Y+45, r24	; 0x2d
    184c:	8d a5       	ldd	r24, Y+45	; 0x2d
    184e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <check_newpassword+0x664>
    1854:	9e a7       	std	Y+46, r25	; 0x2e
    1856:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	98 ab       	std	Y+48, r25	; 0x30
    1860:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8f a5       	ldd	r24, Y+47	; 0x2f
    1864:	98 a9       	ldd	r25, Y+48	; 0x30
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <check_newpassword+0x658>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <check_newpassword+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	69 a9       	ldd	r22, Y+49	; 0x31
    186e:	7a a9       	ldd	r23, Y+50	; 0x32
    1870:	8b a9       	ldd	r24, Y+51	; 0x33
    1872:	9c a9       	ldd	r25, Y+52	; 0x34
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	98 ab       	std	Y+48, r25	; 0x30
    187e:	8f a7       	std	Y+47, r24	; 0x2f
    1880:	8f a5       	ldd	r24, Y+47	; 0x2f
    1882:	98 a9       	ldd	r25, Y+48	; 0x30
    1884:	9c a7       	std	Y+44, r25	; 0x2c
    1886:	8b a7       	std	Y+43, r24	; 0x2b
    1888:	8b a5       	ldd	r24, Y+43	; 0x2b
    188a:	9c a5       	ldd	r25, Y+44	; 0x2c
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <check_newpassword+0x6a0>
    1890:	9c a7       	std	Y+44, r25	; 0x2c
    1892:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);
				EEPROM_writeByte(0x0315, key[4]); /* Write 0x0F in the external EEPROM */
    1894:	fe 01       	movw	r30, r28
    1896:	ec 59       	subi	r30, 0x9C	; 156
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	24 81       	ldd	r18, Z+4	; 0x04
    189c:	85 e1       	ldi	r24, 0x15	; 21
    189e:	93 e0       	ldi	r25, 0x03	; 3
    18a0:	62 2f       	mov	r22, r18
    18a2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <EEPROM_writeByte>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e2       	ldi	r26, 0x20	; 32
    18ac:	b1 e4       	ldi	r27, 0x41	; 65
    18ae:	8f a3       	std	Y+39, r24	; 0x27
    18b0:	98 a7       	std	Y+40, r25	; 0x28
    18b2:	a9 a7       	std	Y+41, r26	; 0x29
    18b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	6f a1       	ldd	r22, Y+39	; 0x27
    18b8:	78 a5       	ldd	r23, Y+40	; 0x28
    18ba:	89 a5       	ldd	r24, Y+41	; 0x29
    18bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a ef       	ldi	r20, 0xFA	; 250
    18c4:	54 e4       	ldi	r21, 0x44	; 68
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8b a3       	std	Y+35, r24	; 0x23
    18d0:	9c a3       	std	Y+36, r25	; 0x24
    18d2:	ad a3       	std	Y+37, r26	; 0x25
    18d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <check_newpassword+0x70c>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <check_newpassword+0x78a>
	else if (__tmp > 65535)
    18f8:	6b a1       	ldd	r22, Y+35	; 0x23
    18fa:	7c a1       	ldd	r23, Y+36	; 0x24
    18fc:	8d a1       	ldd	r24, Y+37	; 0x25
    18fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <check_newpassword+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	6f a1       	ldd	r22, Y+39	; 0x27
    1912:	78 a5       	ldd	r23, Y+40	; 0x28
    1914:	89 a5       	ldd	r24, Y+41	; 0x29
    1916:	9a a5       	ldd	r25, Y+42	; 0x2a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <check_newpassword+0x76c>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	98 a3       	std	Y+32, r25	; 0x20
    1940:	8f 8f       	std	Y+31, r24	; 0x1f
    1942:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1944:	98 a1       	ldd	r25, Y+32	; 0x20
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <check_newpassword+0x75a>
    194a:	98 a3       	std	Y+32, r25	; 0x20
    194c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	89 a1       	ldd	r24, Y+33	; 0x21
    1950:	9a a1       	ldd	r25, Y+34	; 0x22
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <check_newpassword+0x74e>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <check_newpassword+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6b a1       	ldd	r22, Y+35	; 0x23
    1964:	7c a1       	ldd	r23, Y+36	; 0x24
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	9e a1       	ldd	r25, Y+38	; 0x26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	9e 8f       	std	Y+30, r25	; 0x1e
    197c:	8d 8f       	std	Y+29, r24	; 0x1d
    197e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1980:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <check_newpassword+0x796>
    1986:	9e 8f       	std	Y+30, r25	; 0x1e
    1988:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				MatchedPass = 0x01;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 93 bd 00 	sts	0x00BD, r24
				LCD_clearScreen();
    1990:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
    1994:	7a c0       	rjmp	.+244    	; 0x1a8a <check_newpassword+0x89e>
			}
			else{
				LCD_displayString("Not Matched");
    1996:	84 e7       	ldi	r24, 0x74	; 116
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
				MatchedPass = 0x00;
    199e:	10 92 bd 00 	sts	0x00BD, r1
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	aa ef       	ldi	r26, 0xFA	; 250
    19a8:	b3 e4       	ldi	r27, 0x43	; 67
    19aa:	89 8f       	std	Y+25, r24	; 0x19
    19ac:	9a 8f       	std	Y+26, r25	; 0x1a
    19ae:	ab 8f       	std	Y+27, r26	; 0x1b
    19b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	69 8d       	ldd	r22, Y+25	; 0x19
    19b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8d 8b       	std	Y+21, r24	; 0x15
    19cc:	9e 8b       	std	Y+22, r25	; 0x16
    19ce:	af 8b       	std	Y+23, r26	; 0x17
    19d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <check_newpassword+0x808>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <check_newpassword+0x886>
	else if (__tmp > 65535)
    19f4:	6d 89       	ldd	r22, Y+21	; 0x15
    19f6:	7e 89       	ldd	r23, Y+22	; 0x16
    19f8:	8f 89       	ldd	r24, Y+23	; 0x17
    19fa:	98 8d       	ldd	r25, Y+24	; 0x18
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <check_newpassword+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <check_newpassword+0x868>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9a 8b       	std	Y+18, r25	; 0x12
    1a3c:	89 8b       	std	Y+17, r24	; 0x11
    1a3e:	89 89       	ldd	r24, Y+17	; 0x11
    1a40:	9a 89       	ldd	r25, Y+18	; 0x12
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <check_newpassword+0x856>
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <check_newpassword+0x84a>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <check_newpassword+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	98 8b       	std	Y+16, r25	; 0x10
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	98 89       	ldd	r25, Y+16	; 0x10
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <check_newpassword+0x892>
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(500);
				LCD_clearScreen();
    1a86:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_clearScreen>
void check_newpassword(void){
	        uint8 key[5];
			uint8 key2[5];
			uint8 i = 0;
			MatchedPass = 0x00;
			while((MatchedPass == 0x00)){
    1a8a:	80 91 bd 00 	lds	r24, 0x00BD
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <check_newpassword+0x8a8>
    1a92:	c0 cb       	rjmp	.-2176   	; 0x1214 <check_newpassword+0x28>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	aa ef       	ldi	r26, 0xFA	; 250
    1a9a:	b3 e4       	ldi	r27, 0x43	; 67
    1a9c:	8b 87       	std	Y+11, r24	; 0x0b
    1a9e:	9c 87       	std	Y+12, r25	; 0x0c
    1aa0:	ad 87       	std	Y+13, r26	; 0x0d
    1aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8f 83       	std	Y+7, r24	; 0x07
    1abe:	98 87       	std	Y+8, r25	; 0x08
    1ac0:	a9 87       	std	Y+9, r26	; 0x09
    1ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <check_newpassword+0x8fa>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <check_newpassword+0x978>
	else if (__tmp > 65535)
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <check_newpassword+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <check_newpassword+0x95a>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <check_newpassword+0x948>
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <check_newpassword+0x93c>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <check_newpassword+0x98c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <check_newpassword+0x984>
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01

			}
			_delay_ms(500);


		}
    1b78:	c3 59       	subi	r28, 0x93	; 147
    1b7a:	df 4f       	sbci	r29, 0xFF	; 255
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	08 95       	ret

00001b90 <Buzzer_init>:
 *      Author: DELL
 */

#include "buzzer.h"

void Buzzer_init(void){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	67 e0       	ldi	r22, 0x07	; 7
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <Buzzer_on>:


void Buzzer_on(void){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	67 e0       	ldi	r22, 0x07	; 7
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <Buzzer_off>:


void Buzzer_off(void){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	67 e0       	ldi	r22, 0x07	; 7
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DcMotor_Init>:
#include "common_macros.h" /* For GET_BIT Macro */
#include "dcmotor.h"
#include "gpio.h"
#include <avr/io.h>

void DcMotor_Init(void){
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(IN1_PORT,IN1_PIN , PIN_OUTPUT);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT,IN2_PIN , PIN_OUTPUT);
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_writePin( IN1_PORT, IN1_PIN , LOGIC_LOW);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin( IN2_PORT, IN2_PIN , LOGIC_LOW);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	61 e0       	ldi	r22, 0x01	; 1
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>

}
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <DcMotor_Rotate+0x6>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	6a 83       	std	Y+2, r22	; 0x02
	if(state == CW){
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	88 23       	and	r24, r24
    1c2a:	71 f4       	brne	.+28     	; 0x1c48 <DcMotor_Rotate+0x30>
		GPIO_writePin( IN1_PORT, IN1_PIN , LOGIC_HIGH);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		GPIO_writePin( IN2_PORT, PIN2_ID , LOGIC_LOW);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <PWM_Timer0_Start>
    1c46:	21 c0       	rjmp	.+66     	; 0x1c8a <DcMotor_Rotate+0x72>

	}
	else if(state == A_CW){
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	71 f4       	brne	.+28     	; 0x1c6a <DcMotor_Rotate+0x52>
		GPIO_writePin( IN1_PORT, IN2_PORT , LOGIC_LOW);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		GPIO_writePin( IN2_PORT, IN2_PIN , LOGIC_HIGH);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <PWM_Timer0_Start>
    1c68:	10 c0       	rjmp	.+32     	; 0x1c8a <DcMotor_Rotate+0x72>

	}
	else if(state == STOP){
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	82 30       	cpi	r24, 0x02	; 2
    1c6e:	69 f4       	brne	.+26     	; 0x1c8a <DcMotor_Rotate+0x72>
		GPIO_writePin( IN1_PORT, IN1_PIN , LOGIC_LOW);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		GPIO_writePin( IN2_PORT, IN2_PIN , LOGIC_LOW);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
		PWM_Timer0_Start(0);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <PWM_Timer0_Start>

	}



}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <PWM_Timer0_Start>:



void PWM_Timer0_Start(uint8 set_duty_cycle){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    1ca0:	e2 e5       	ldi	r30, 0x52	; 82
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	10 82       	st	Z, r1

		OCR0  = set_duty_cycle*255; // Set Compare Value
    1ca6:	ec e5       	ldi	r30, 0x5C	; 92
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	48 2f       	mov	r20, r24
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	c9 01       	movw	r24, r18
    1cba:	96 95       	lsr	r25
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	88 27       	eor	r24, r24
    1cc0:	97 95       	ror	r25
    1cc2:	87 95       	ror	r24
    1cc4:	82 1b       	sub	r24, r18
    1cc6:	93 0b       	sbc	r25, r19
    1cc8:	84 0f       	add	r24, r20
    1cca:	95 1f       	adc	r25, r21
    1ccc:	80 83       	st	Z, r24

		DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1cce:	a7 e3       	ldi	r26, 0x37	; 55
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e7 e3       	ldi	r30, 0x37	; 55
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 60       	ori	r24, 0x08	; 8
    1cda:	8c 93       	st	X, r24
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1cdc:	e3 e5       	ldi	r30, 0x53	; 83
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	8a e6       	ldi	r24, 0x6A	; 106
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <EEPROM_writeByte+0x6>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <EEPROM_writeByte+0x8>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1cfe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d02:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	11 f0       	breq	.+4      	; 0x1d0e <EEPROM_writeByte+0x22>
        return ERROR;
    1d0a:	1c 82       	std	Y+4, r1	; 0x04
    1d0c:	28 c0       	rjmp	.+80     	; 0x1d5e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	80 70       	andi	r24, 0x00	; 0
    1d14:	97 70       	andi	r25, 0x07	; 7
    1d16:	88 0f       	add	r24, r24
    1d18:	89 2f       	mov	r24, r25
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	99 0b       	sbc	r25, r25
    1d1e:	91 95       	neg	r25
    1d20:	80 6a       	ori	r24, 0xA0	; 160
    1d22:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d26:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1d2a:	88 31       	cpi	r24, 0x18	; 24
    1d2c:	11 f0       	breq	.+4      	; 0x1d32 <EEPROM_writeByte+0x46>
        return ERROR; 
    1d2e:	1c 82       	std	Y+4, r1	; 0x04
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d38:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1d3c:	88 32       	cpi	r24, 0x28	; 40
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <EEPROM_writeByte+0x58>
        return ERROR;
    1d40:	1c 82       	std	Y+4, r1	; 0x04
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d4a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1d4e:	88 32       	cpi	r24, 0x28	; 40
    1d50:	11 f0       	breq	.+4      	; 0x1d56 <EEPROM_writeByte+0x6a>
        return ERROR;
    1d52:	1c 82       	std	Y+4, r1	; 0x04
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1d56:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <TWI_stop>
	
    return SUCCESS;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <EEPROM_readByte+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <EEPROM_readByte+0x8>
    1d76:	0f 92       	push	r0
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	7c 83       	std	Y+4, r23	; 0x04
    1d82:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1d84:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d88:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1d8c:	88 30       	cpi	r24, 0x08	; 8
    1d8e:	11 f0       	breq	.+4      	; 0x1d94 <EEPROM_readByte+0x26>
        return ERROR;
    1d90:	1d 82       	std	Y+5, r1	; 0x05
    1d92:	44 c0       	rjmp	.+136    	; 0x1e1c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	80 70       	andi	r24, 0x00	; 0
    1d9a:	97 70       	andi	r25, 0x07	; 7
    1d9c:	88 0f       	add	r24, r24
    1d9e:	89 2f       	mov	r24, r25
    1da0:	88 1f       	adc	r24, r24
    1da2:	99 0b       	sbc	r25, r25
    1da4:	91 95       	neg	r25
    1da6:	80 6a       	ori	r24, 0xA0	; 160
    1da8:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1dac:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1db0:	88 31       	cpi	r24, 0x18	; 24
    1db2:	11 f0       	breq	.+4      	; 0x1db8 <EEPROM_readByte+0x4a>
        return ERROR;
    1db4:	1d 82       	std	Y+5, r1	; 0x05
    1db6:	32 c0       	rjmp	.+100    	; 0x1e1c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1dbe:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1dc2:	88 32       	cpi	r24, 0x28	; 40
    1dc4:	11 f0       	breq	.+4      	; 0x1dca <EEPROM_readByte+0x5c>
        return ERROR;
    1dc6:	1d 82       	std	Y+5, r1	; 0x05
    1dc8:	29 c0       	rjmp	.+82     	; 0x1e1c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1dca:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1dce:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1dd2:	80 31       	cpi	r24, 0x10	; 16
    1dd4:	11 f0       	breq	.+4      	; 0x1dda <EEPROM_readByte+0x6c>
        return ERROR;
    1dd6:	1d 82       	std	Y+5, r1	; 0x05
    1dd8:	21 c0       	rjmp	.+66     	; 0x1e1c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	80 70       	andi	r24, 0x00	; 0
    1de0:	97 70       	andi	r25, 0x07	; 7
    1de2:	88 0f       	add	r24, r24
    1de4:	89 2f       	mov	r24, r25
    1de6:	88 1f       	adc	r24, r24
    1de8:	99 0b       	sbc	r25, r25
    1dea:	91 95       	neg	r25
    1dec:	81 6a       	ori	r24, 0xA1	; 161
    1dee:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1df2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1df6:	80 34       	cpi	r24, 0x40	; 64
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <EEPROM_readByte+0x90>
        return ERROR;
    1dfa:	1d 82       	std	Y+5, r1	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1dfe:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <TWI_readByteWithNACK>
    1e02:	eb 81       	ldd	r30, Y+3	; 0x03
    1e04:	fc 81       	ldd	r31, Y+4	; 0x04
    1e06:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1e08:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <TWI_getStatus>
    1e0c:	88 35       	cpi	r24, 0x58	; 88
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <EEPROM_readByte+0xa6>
        return ERROR;
    1e10:	1d 82       	std	Y+5, r1	; 0x05
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1e14:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <TWI_stop>

    return SUCCESS;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <GPIO_setupPinDirection+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <GPIO_setupPinDirection+0x8>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
    1e40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	88 30       	cpi	r24, 0x08	; 8
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <GPIO_setupPinDirection+0x1c>
    1e48:	d5 c0       	rjmp	.+426    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <GPIO_setupPinDirection+0x24>
    1e50:	d1 c0       	rjmp	.+418    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3d 83       	std	Y+5, r19	; 0x05
    1e5a:	2c 83       	std	Y+4, r18	; 0x04
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <GPIO_setupPinDirection+0x3a>
    1e66:	43 c0       	rjmp	.+134    	; 0x1eee <GPIO_setupPinDirection+0xc0>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <GPIO_setupPinDirection+0x4e>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	71 f0       	breq	.+28     	; 0x1e96 <GPIO_setupPinDirection+0x68>
    1e7a:	bc c0       	rjmp	.+376    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <GPIO_setupPinDirection+0x5a>
    1e86:	5f c0       	rjmp	.+190    	; 0x1f46 <GPIO_setupPinDirection+0x118>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <GPIO_setupPinDirection+0x66>
    1e92:	85 c0       	rjmp	.+266    	; 0x1f9e <GPIO_setupPinDirection+0x170>
    1e94:	af c0       	rjmp	.+350    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	a1 f4       	brne	.+40     	; 0x1ec4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e9c:	aa e3       	ldi	r26, 0x3A	; 58
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ea e3       	ldi	r30, 0x3A	; 58
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <GPIO_setupPinDirection+0x8c>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <GPIO_setupPinDirection+0x88>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	98 c0       	rjmp	.+304    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ec4:	aa e3       	ldi	r26, 0x3A	; 58
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ea e3       	ldi	r30, 0x3A	; 58
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_setupPinDirection+0xb4>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_setupPinDirection+0xb0>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	83 c0       	rjmp	.+262    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	a1 f4       	brne	.+40     	; 0x1f1c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ef4:	a7 e3       	ldi	r26, 0x37	; 55
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e7 e3       	ldi	r30, 0x37	; 55
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_setupPinDirection+0xe4>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_setupPinDirection+0xe0>
    1f16:	84 2b       	or	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	6c c0       	rjmp	.+216    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f1c:	a7 e3       	ldi	r26, 0x37	; 55
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e7 e3       	ldi	r30, 0x37	; 55
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <GPIO_setupPinDirection+0x10c>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <GPIO_setupPinDirection+0x108>
    1f3e:	80 95       	com	r24
    1f40:	84 23       	and	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	57 c0       	rjmp	.+174    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	a1 f4       	brne	.+40     	; 0x1f74 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f4c:	a4 e3       	ldi	r26, 0x34	; 52
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e4 e3       	ldi	r30, 0x34	; 52
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GPIO_setupPinDirection+0x13c>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <GPIO_setupPinDirection+0x138>
    1f6e:	84 2b       	or	r24, r20
    1f70:	8c 93       	st	X, r24
    1f72:	40 c0       	rjmp	.+128    	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f74:	a4 e3       	ldi	r26, 0x34	; 52
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e4 e3       	ldi	r30, 0x34	; 52
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <GPIO_setupPinDirection+0x164>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <GPIO_setupPinDirection+0x160>
    1f96:	80 95       	com	r24
    1f98:	84 23       	and	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	2b c0       	rjmp	.+86     	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	a1 f4       	brne	.+40     	; 0x1fcc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fa4:	a1 e3       	ldi	r26, 0x31	; 49
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e1 e3       	ldi	r30, 0x31	; 49
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_setupPinDirection+0x194>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_setupPinDirection+0x190>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1fcc:	a1 e3       	ldi	r26, 0x31	; 49
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e1 e3       	ldi	r30, 0x31	; 49
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_setupPinDirection+0x1bc>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_setupPinDirection+0x1b8>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <GPIO_writePin+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <GPIO_writePin+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	6a 83       	std	Y+2, r22	; 0x02
    2016:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	88 30       	cpi	r24, 0x08	; 8
    201c:	08 f0       	brcs	.+2      	; 0x2020 <GPIO_writePin+0x1c>
    201e:	d5 c0       	rjmp	.+426    	; 0x21ca <GPIO_writePin+0x1c6>
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	08 f0       	brcs	.+2      	; 0x2028 <GPIO_writePin+0x24>
    2026:	d1 c0       	rjmp	.+418    	; 0x21ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3d 83       	std	Y+5, r19	; 0x05
    2030:	2c 83       	std	Y+4, r18	; 0x04
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <GPIO_writePin+0x3a>
    203c:	43 c0       	rjmp	.+134    	; 0x20c4 <GPIO_writePin+0xc0>
    203e:	2c 81       	ldd	r18, Y+4	; 0x04
    2040:	3d 81       	ldd	r19, Y+5	; 0x05
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	2c f4       	brge	.+10     	; 0x2052 <GPIO_writePin+0x4e>
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	71 f0       	breq	.+28     	; 0x206c <GPIO_writePin+0x68>
    2050:	bc c0       	rjmp	.+376    	; 0x21ca <GPIO_writePin+0x1c6>
    2052:	2c 81       	ldd	r18, Y+4	; 0x04
    2054:	3d 81       	ldd	r19, Y+5	; 0x05
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <GPIO_writePin+0x5a>
    205c:	5f c0       	rjmp	.+190    	; 0x211c <GPIO_writePin+0x118>
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	9d 81       	ldd	r25, Y+5	; 0x05
    2062:	83 30       	cpi	r24, 0x03	; 3
    2064:	91 05       	cpc	r25, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <GPIO_writePin+0x66>
    2068:	85 c0       	rjmp	.+266    	; 0x2174 <GPIO_writePin+0x170>
    206a:	af c0       	rjmp	.+350    	; 0x21ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	a1 f4       	brne	.+40     	; 0x209a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2072:	ab e3       	ldi	r26, 0x3B	; 59
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <GPIO_writePin+0x8c>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <GPIO_writePin+0x88>
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	98 c0       	rjmp	.+304    	; 0x21ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    209a:	ab e3       	ldi	r26, 0x3B	; 59
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	eb e3       	ldi	r30, 0x3B	; 59
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <GPIO_writePin+0xb4>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <GPIO_writePin+0xb0>
    20bc:	80 95       	com	r24
    20be:	84 23       	and	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	83 c0       	rjmp	.+262    	; 0x21ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	a1 f4       	brne	.+40     	; 0x20f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20ca:	a8 e3       	ldi	r26, 0x38	; 56
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <GPIO_writePin+0xe4>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <GPIO_writePin+0xe0>
    20ec:	84 2b       	or	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	6c c0       	rjmp	.+216    	; 0x21ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20f2:	a8 e3       	ldi	r26, 0x38	; 56
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e8 e3       	ldi	r30, 0x38	; 56
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <GPIO_writePin+0x10c>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <GPIO_writePin+0x108>
    2114:	80 95       	com	r24
    2116:	84 23       	and	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	57 c0       	rjmp	.+174    	; 0x21ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	a1 f4       	brne	.+40     	; 0x214a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2122:	a5 e3       	ldi	r26, 0x35	; 53
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e3       	ldi	r30, 0x35	; 53
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <GPIO_writePin+0x13c>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <GPIO_writePin+0x138>
    2144:	84 2b       	or	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	40 c0       	rjmp	.+128    	; 0x21ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    214a:	a5 e3       	ldi	r26, 0x35	; 53
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e5 e3       	ldi	r30, 0x35	; 53
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <GPIO_writePin+0x164>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <GPIO_writePin+0x160>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	2b c0       	rjmp	.+86     	; 0x21ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	a1 f4       	brne	.+40     	; 0x21a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    217a:	a2 e3       	ldi	r26, 0x32	; 50
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e2 e3       	ldi	r30, 0x32	; 50
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <GPIO_writePin+0x194>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <GPIO_writePin+0x190>
    219c:	84 2b       	or	r24, r20
    219e:	8c 93       	st	X, r24
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21a2:	a2 e3       	ldi	r26, 0x32	; 50
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e2 e3       	ldi	r30, 0x32	; 50
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <GPIO_writePin+0x1bc>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <GPIO_writePin+0x1b8>
    21c4:	80 95       	com	r24
    21c6:	84 23       	and	r24, r20
    21c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <GPIO_readPin+0x6>
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <GPIO_readPin+0x8>
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    21ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	88 30       	cpi	r24, 0x08	; 8
    21f2:	08 f0       	brcs	.+2      	; 0x21f6 <GPIO_readPin+0x1c>
    21f4:	84 c0       	rjmp	.+264    	; 0x22fe <GPIO_readPin+0x124>
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <GPIO_readPin+0x24>
    21fc:	80 c0       	rjmp	.+256    	; 0x22fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	3d 83       	std	Y+5, r19	; 0x05
    2206:	2c 83       	std	Y+4, r18	; 0x04
    2208:	4c 81       	ldd	r20, Y+4	; 0x04
    220a:	5d 81       	ldd	r21, Y+5	; 0x05
    220c:	41 30       	cpi	r20, 0x01	; 1
    220e:	51 05       	cpc	r21, r1
    2210:	79 f1       	breq	.+94     	; 0x2270 <GPIO_readPin+0x96>
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	9d 81       	ldd	r25, Y+5	; 0x05
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	91 05       	cpc	r25, r1
    221a:	34 f4       	brge	.+12     	; 0x2228 <GPIO_readPin+0x4e>
    221c:	2c 81       	ldd	r18, Y+4	; 0x04
    221e:	3d 81       	ldd	r19, Y+5	; 0x05
    2220:	21 15       	cp	r18, r1
    2222:	31 05       	cpc	r19, r1
    2224:	69 f0       	breq	.+26     	; 0x2240 <GPIO_readPin+0x66>
    2226:	6b c0       	rjmp	.+214    	; 0x22fe <GPIO_readPin+0x124>
    2228:	4c 81       	ldd	r20, Y+4	; 0x04
    222a:	5d 81       	ldd	r21, Y+5	; 0x05
    222c:	42 30       	cpi	r20, 0x02	; 2
    222e:	51 05       	cpc	r21, r1
    2230:	b9 f1       	breq	.+110    	; 0x22a0 <GPIO_readPin+0xc6>
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	9d 81       	ldd	r25, Y+5	; 0x05
    2236:	83 30       	cpi	r24, 0x03	; 3
    2238:	91 05       	cpc	r25, r1
    223a:	09 f4       	brne	.+2      	; 0x223e <GPIO_readPin+0x64>
    223c:	49 c0       	rjmp	.+146    	; 0x22d0 <GPIO_readPin+0xf6>
    223e:	5f c0       	rjmp	.+190    	; 0x22fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2240:	e9 e3       	ldi	r30, 0x39	; 57
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a9 01       	movw	r20, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <GPIO_readPin+0x7e>
    2254:	55 95       	asr	r21
    2256:	47 95       	ror	r20
    2258:	8a 95       	dec	r24
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <GPIO_readPin+0x7a>
    225c:	ca 01       	movw	r24, r20
    225e:	81 70       	andi	r24, 0x01	; 1
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	88 23       	and	r24, r24
    2264:	19 f0       	breq	.+6      	; 0x226c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	49 c0       	rjmp	.+146    	; 0x22fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	47 c0       	rjmp	.+142    	; 0x22fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2270:	e6 e3       	ldi	r30, 0x36	; 54
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <GPIO_readPin+0xae>
    2284:	55 95       	asr	r21
    2286:	47 95       	ror	r20
    2288:	8a 95       	dec	r24
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <GPIO_readPin+0xaa>
    228c:	ca 01       	movw	r24, r20
    228e:	81 70       	andi	r24, 0x01	; 1
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	88 23       	and	r24, r24
    2294:	19 f0       	breq	.+6      	; 0x229c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	31 c0       	rjmp	.+98     	; 0x22fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    229c:	19 82       	std	Y+1, r1	; 0x01
    229e:	2f c0       	rjmp	.+94     	; 0x22fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22a0:	e3 e3       	ldi	r30, 0x33	; 51
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a9 01       	movw	r20, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <GPIO_readPin+0xde>
    22b4:	55 95       	asr	r21
    22b6:	47 95       	ror	r20
    22b8:	8a 95       	dec	r24
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <GPIO_readPin+0xda>
    22bc:	ca 01       	movw	r24, r20
    22be:	81 70       	andi	r24, 0x01	; 1
    22c0:	90 70       	andi	r25, 0x00	; 0
    22c2:	88 23       	and	r24, r24
    22c4:	19 f0       	breq	.+6      	; 0x22cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	19 c0       	rjmp	.+50     	; 0x22fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	17 c0       	rjmp	.+46     	; 0x22fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22d0:	e0 e3       	ldi	r30, 0x30	; 48
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <GPIO_readPin+0x10e>
    22e4:	55 95       	asr	r21
    22e6:	47 95       	ror	r20
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <GPIO_readPin+0x10a>
    22ec:	ca 01       	movw	r24, r20
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	88 23       	and	r24, r24
    22f4:	19 f0       	breq	.+6      	; 0x22fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <GPIO_setupPortDirection+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <GPIO_setupPortDirection+0x8>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	90 f5       	brcc	.+100    	; 0x238a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	3c 83       	std	Y+4, r19	; 0x04
    232e:	2b 83       	std	Y+3, r18	; 0x03
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	91 05       	cpc	r25, r1
    2338:	d1 f0       	breq	.+52     	; 0x236e <GPIO_setupPortDirection+0x5e>
    233a:	2b 81       	ldd	r18, Y+3	; 0x03
    233c:	3c 81       	ldd	r19, Y+4	; 0x04
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	31 05       	cpc	r19, r1
    2342:	2c f4       	brge	.+10     	; 0x234e <GPIO_setupPortDirection+0x3e>
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	61 f0       	breq	.+24     	; 0x2364 <GPIO_setupPortDirection+0x54>
    234c:	1e c0       	rjmp	.+60     	; 0x238a <GPIO_setupPortDirection+0x7a>
    234e:	2b 81       	ldd	r18, Y+3	; 0x03
    2350:	3c 81       	ldd	r19, Y+4	; 0x04
    2352:	22 30       	cpi	r18, 0x02	; 2
    2354:	31 05       	cpc	r19, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <GPIO_setupPortDirection+0x68>
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	83 30       	cpi	r24, 0x03	; 3
    235e:	91 05       	cpc	r25, r1
    2360:	81 f0       	breq	.+32     	; 0x2382 <GPIO_setupPortDirection+0x72>
    2362:	13 c0       	rjmp	.+38     	; 0x238a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2364:	ea e3       	ldi	r30, 0x3A	; 58
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	80 83       	st	Z, r24
    236c:	0e c0       	rjmp	.+28     	; 0x238a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    236e:	e7 e3       	ldi	r30, 0x37	; 55
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 83       	st	Z, r24
    2376:	09 c0       	rjmp	.+18     	; 0x238a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2378:	e4 e3       	ldi	r30, 0x34	; 52
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 83       	st	Z, r24
    2380:	04 c0       	rjmp	.+8      	; 0x238a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2382:	e1 e3       	ldi	r30, 0x31	; 49
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 83       	st	Z, r24
			break;
		}
	}
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <GPIO_writePort+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <GPIO_writePort+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	90 f5       	brcc	.+100    	; 0x2412 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	3c 83       	std	Y+4, r19	; 0x04
    23b6:	2b 83       	std	Y+3, r18	; 0x03
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	91 05       	cpc	r25, r1
    23c0:	d1 f0       	breq	.+52     	; 0x23f6 <GPIO_writePort+0x5e>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <GPIO_writePort+0x3e>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	61 f0       	breq	.+24     	; 0x23ec <GPIO_writePort+0x54>
    23d4:	1e c0       	rjmp	.+60     	; 0x2412 <GPIO_writePort+0x7a>
    23d6:	2b 81       	ldd	r18, Y+3	; 0x03
    23d8:	3c 81       	ldd	r19, Y+4	; 0x04
    23da:	22 30       	cpi	r18, 0x02	; 2
    23dc:	31 05       	cpc	r19, r1
    23de:	81 f0       	breq	.+32     	; 0x2400 <GPIO_writePort+0x68>
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	83 30       	cpi	r24, 0x03	; 3
    23e6:	91 05       	cpc	r25, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <GPIO_writePort+0x72>
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23ec:	eb e3       	ldi	r30, 0x3B	; 59
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	80 83       	st	Z, r24
    23f4:	0e c0       	rjmp	.+28     	; 0x2412 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    23f6:	e8 e3       	ldi	r30, 0x38	; 56
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	80 83       	st	Z, r24
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2400:	e5 e3       	ldi	r30, 0x35	; 53
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 83       	st	Z, r24
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    240a:	e2 e3       	ldi	r30, 0x32	; 50
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	80 83       	st	Z, r24
			break;
		}
	}
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	00 d0       	rcall	.+0      	; 0x2426 <GPIO_readPort+0x6>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <GPIO_readPort+0x8>
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    242e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	90 f5       	brcc	.+100    	; 0x249a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3c 83       	std	Y+4, r19	; 0x04
    243e:	2b 83       	std	Y+3, r18	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	91 05       	cpc	r25, r1
    2448:	d1 f0       	breq	.+52     	; 0x247e <GPIO_readPort+0x5e>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	2c f4       	brge	.+10     	; 0x245e <GPIO_readPort+0x3e>
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	61 f0       	breq	.+24     	; 0x2474 <GPIO_readPort+0x54>
    245c:	1e c0       	rjmp	.+60     	; 0x249a <GPIO_readPort+0x7a>
    245e:	2b 81       	ldd	r18, Y+3	; 0x03
    2460:	3c 81       	ldd	r19, Y+4	; 0x04
    2462:	22 30       	cpi	r18, 0x02	; 2
    2464:	31 05       	cpc	r19, r1
    2466:	81 f0       	breq	.+32     	; 0x2488 <GPIO_readPort+0x68>
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	83 30       	cpi	r24, 0x03	; 3
    246e:	91 05       	cpc	r25, r1
    2470:	81 f0       	breq	.+32     	; 0x2492 <GPIO_readPort+0x72>
    2472:	13 c0       	rjmp	.+38     	; 0x249a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2474:	e9 e3       	ldi	r30, 0x39	; 57
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	0e c0       	rjmp	.+28     	; 0x249a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    247e:	e6 e3       	ldi	r30, 0x36	; 54
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	09 c0       	rjmp	.+18     	; 0x249a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2488:	e3 e3       	ldi	r30, 0x33	; 51
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	04 c0       	rjmp	.+8      	; 0x249a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2492:	e0 e3       	ldi	r30, 0x30	; 48
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	2e 97       	sbiw	r28, 0x0e	; 14
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	62 e0       	ldi	r22, 0x02	; 2
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a0 ea       	ldi	r26, 0xA0	; 160
    24d8:	b1 e4       	ldi	r27, 0x41	; 65
    24da:	8b 87       	std	Y+11, r24	; 0x0b
    24dc:	9c 87       	std	Y+12, r25	; 0x0c
    24de:	ad 87       	std	Y+13, r26	; 0x0d
    24e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a ef       	ldi	r20, 0xFA	; 250
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	8f 83       	std	Y+7, r24	; 0x07
    24fc:	98 87       	std	Y+8, r25	; 0x08
    24fe:	a9 87       	std	Y+9, r26	; 0x09
    2500:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2516:	88 23       	and	r24, r24
    2518:	2c f4       	brge	.+10     	; 0x2524 <LCD_init+0x7a>
		__ticks = 1;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	3f c0       	rjmp	.+126    	; 0x25a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2538:	18 16       	cp	r1, r24
    253a:	4c f5       	brge	.+82     	; 0x258e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253c:	6b 85       	ldd	r22, Y+11	; 0x0b
    253e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e2       	ldi	r20, 0x20	; 32
    254a:	51 e4       	ldi	r21, 0x41	; 65
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <LCD_init+0xda>
    2566:	88 ec       	ldi	r24, 0xC8	; 200
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_init+0xc8>
    2576:	9c 83       	std	Y+4, r25	; 0x04
    2578:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	9e 81       	ldd	r25, Y+6	; 0x06
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	69 f7       	brne	.-38     	; 0x2566 <LCD_init+0xbc>
    258c:	14 c0       	rjmp	.+40     	; 0x25b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <LCD_init+0x104>
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	63 e0       	ldi	r22, 0x03	; 3
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	64 e0       	ldi	r22, 0x04	; 4
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	65 e0       	ldi	r22, 0x05	; 5
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	66 e0       	ldi	r22, 0x06	; 6
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    25de:	83 e3       	ldi	r24, 0x33	; 51
    25e0:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    25e4:	82 e3       	ldi	r24, 0x32	; 50
    25e6:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    25ea:	88 e2       	ldi	r24, 0x28	; 40
    25ec:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    25f0:	8c e0       	ldi	r24, 0x0C	; 12
    25f2:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
}
    25fc:	2e 96       	adiw	r28, 0x0e	; 14
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	c3 56       	subi	r28, 0x63	; 99
    261c:	d0 40       	sbci	r29, 0x00	; 0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	fe 01       	movw	r30, r28
    262a:	ed 59       	subi	r30, 0x9D	; 157
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    263a:	fe 01       	movw	r30, r28
    263c:	e1 5a       	subi	r30, 0xA1	; 161
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e8       	ldi	r26, 0x80	; 128
    2646:	bf e3       	ldi	r27, 0x3F	; 63
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	8e 01       	movw	r16, r28
    2652:	05 5a       	subi	r16, 0xA5	; 165
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	e1 5a       	subi	r30, 0xA1	; 161
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a ef       	ldi	r20, 0xFA	; 250
    266a:	54 e4       	ldi	r21, 0x44	; 68
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	f8 01       	movw	r30, r16
    2676:	80 83       	st	Z, r24
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	a2 83       	std	Z+2, r26	; 0x02
    267c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267e:	fe 01       	movw	r30, r28
    2680:	e5 5a       	subi	r30, 0xA5	; 165
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	44 f4       	brge	.+16     	; 0x26ac <LCD_sendCommand+0x9e>
		__ticks = 1;
    269c:	fe 01       	movw	r30, r28
    269e:	e7 5a       	subi	r30, 0xA7	; 167
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	64 c0       	rjmp	.+200    	; 0x2774 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5a       	subi	r30, 0xA5	; 165
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <LCD_sendCommand+0xbe>
    26ca:	43 c0       	rjmp	.+134    	; 0x2752 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	fe 01       	movw	r30, r28
    26ce:	e1 5a       	subi	r30, 0xA1	; 161
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8e 01       	movw	r16, r28
    26ec:	07 5a       	subi	r16, 0xA7	; 167
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	1f c0       	rjmp	.+62     	; 0x2742 <LCD_sendCommand+0x134>
    2704:	fe 01       	movw	r30, r28
    2706:	e9 5a       	subi	r30, 0xA9	; 169
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	88 ec       	ldi	r24, 0xC8	; 200
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	fe 01       	movw	r30, r28
    2714:	e9 5a       	subi	r30, 0xA9	; 169
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_sendCommand+0x10e>
    2720:	fe 01       	movw	r30, r28
    2722:	e9 5a       	subi	r30, 0xA9	; 169
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	de 01       	movw	r26, r28
    272c:	a7 5a       	subi	r26, 0xA7	; 167
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	e7 5a       	subi	r30, 0xA7	; 167
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	9c 93       	st	X, r25
    2740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	fe 01       	movw	r30, r28
    2744:	e7 5a       	subi	r30, 0xA7	; 167
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	d1 f6       	brne	.-76     	; 0x2704 <LCD_sendCommand+0xf6>
    2750:	27 c0       	rjmp	.+78     	; 0x27a0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	8e 01       	movw	r16, r28
    2754:	07 5a       	subi	r16, 0xA7	; 167
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e5 5a       	subi	r30, 0xA5	; 165
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	f8 01       	movw	r30, r16
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	de 01       	movw	r26, r28
    2776:	ab 5a       	subi	r26, 0xAB	; 171
    2778:	bf 4f       	sbci	r27, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	e7 5a       	subi	r30, 0xA7	; 167
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	8d 93       	st	X+, r24
    2786:	9c 93       	st	X, r25
    2788:	fe 01       	movw	r30, r28
    278a:	eb 5a       	subi	r30, 0xAB	; 171
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_sendCommand+0x184>
    2796:	fe 01       	movw	r30, r28
    2798:	eb 5a       	subi	r30, 0xAB	; 171
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    27aa:	fe 01       	movw	r30, r28
    27ac:	ef 5a       	subi	r30, 0xAF	; 175
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e8       	ldi	r26, 0x80	; 128
    27b6:	bf e3       	ldi	r27, 0x3F	; 63
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	8e 01       	movw	r16, r28
    27c2:	03 5b       	subi	r16, 0xB3	; 179
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	ef 5a       	subi	r30, 0xAF	; 175
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	f8 01       	movw	r30, r16
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e3 5b       	subi	r30, 0xB3	; 179
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	44 f4       	brge	.+16     	; 0x281c <LCD_sendCommand+0x20e>
		__ticks = 1;
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	64 c0       	rjmp	.+200    	; 0x28e4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    281c:	fe 01       	movw	r30, r28
    281e:	e3 5b       	subi	r30, 0xB3	; 179
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	3f ef       	ldi	r19, 0xFF	; 255
    282e:	4f e7       	ldi	r20, 0x7F	; 127
    2830:	57 e4       	ldi	r21, 0x47	; 71
    2832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2836:	18 16       	cp	r1, r24
    2838:	0c f0       	brlt	.+2      	; 0x283c <LCD_sendCommand+0x22e>
    283a:	43 c0       	rjmp	.+134    	; 0x28c2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	fe 01       	movw	r30, r28
    283e:	ef 5a       	subi	r30, 0xAF	; 175
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8e 01       	movw	r16, r28
    285c:	05 5b       	subi	r16, 0xB5	; 181
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    2872:	1f c0       	rjmp	.+62     	; 0x28b2 <LCD_sendCommand+0x2a4>
    2874:	fe 01       	movw	r30, r28
    2876:	e7 5b       	subi	r30, 0xB7	; 183
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	fe 01       	movw	r30, r28
    2884:	e7 5b       	subi	r30, 0xB7	; 183
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_sendCommand+0x27e>
    2890:	fe 01       	movw	r30, r28
    2892:	e7 5b       	subi	r30, 0xB7	; 183
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	de 01       	movw	r26, r28
    289c:	a5 5b       	subi	r26, 0xB5	; 181
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	e5 5b       	subi	r30, 0xB5	; 181
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	9c 93       	st	X, r25
    28b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e5 5b       	subi	r30, 0xB5	; 181
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	d1 f6       	brne	.-76     	; 0x2874 <LCD_sendCommand+0x266>
    28c0:	27 c0       	rjmp	.+78     	; 0x2910 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	8e 01       	movw	r16, r28
    28c4:	05 5b       	subi	r16, 0xB5	; 181
    28c6:	1f 4f       	sbci	r17, 0xFF	; 255
    28c8:	fe 01       	movw	r30, r28
    28ca:	e3 5b       	subi	r30, 0xB3	; 179
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	f8 01       	movw	r30, r16
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	de 01       	movw	r26, r28
    28e6:	a9 5b       	subi	r26, 0xB9	; 185
    28e8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	e5 5b       	subi	r30, 0xB5	; 181
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	8d 93       	st	X+, r24
    28f6:	9c 93       	st	X, r25
    28f8:	fe 01       	movw	r30, r28
    28fa:	e9 5b       	subi	r30, 0xB9	; 185
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	91 81       	ldd	r25, Z+1	; 0x01
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <LCD_sendCommand+0x2f4>
    2906:	fe 01       	movw	r30, r28
    2908:	e9 5b       	subi	r30, 0xB9	; 185
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2910:	fe 01       	movw	r30, r28
    2912:	ed 59       	subi	r30, 0x9D	; 157
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	88 2f       	mov	r24, r24
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	80 71       	andi	r24, 0x10	; 16
    291e:	90 70       	andi	r25, 0x00	; 0
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	95 95       	asr	r25
    2926:	87 95       	ror	r24
    2928:	95 95       	asr	r25
    292a:	87 95       	ror	r24
    292c:	95 95       	asr	r25
    292e:	87 95       	ror	r24
    2930:	98 2f       	mov	r25, r24
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	63 e0       	ldi	r22, 0x03	; 3
    2936:	49 2f       	mov	r20, r25
    2938:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    293c:	fe 01       	movw	r30, r28
    293e:	ed 59       	subi	r30, 0x9D	; 157
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	80 72       	andi	r24, 0x20	; 32
    294a:	90 70       	andi	r25, 0x00	; 0
    294c:	95 95       	asr	r25
    294e:	87 95       	ror	r24
    2950:	95 95       	asr	r25
    2952:	87 95       	ror	r24
    2954:	95 95       	asr	r25
    2956:	87 95       	ror	r24
    2958:	95 95       	asr	r25
    295a:	87 95       	ror	r24
    295c:	95 95       	asr	r25
    295e:	87 95       	ror	r24
    2960:	98 2f       	mov	r25, r24
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	64 e0       	ldi	r22, 0x04	; 4
    2966:	49 2f       	mov	r20, r25
    2968:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    296c:	fe 01       	movw	r30, r28
    296e:	ed 59       	subi	r30, 0x9D	; 157
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	80 74       	andi	r24, 0x40	; 64
    297a:	90 70       	andi	r25, 0x00	; 0
    297c:	08 2e       	mov	r0, r24
    297e:	89 2f       	mov	r24, r25
    2980:	00 0c       	add	r0, r0
    2982:	88 1f       	adc	r24, r24
    2984:	99 0b       	sbc	r25, r25
    2986:	00 0c       	add	r0, r0
    2988:	88 1f       	adc	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	98 2f       	mov	r25, r24
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	65 e0       	ldi	r22, 0x05	; 5
    2992:	49 2f       	mov	r20, r25
    2994:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2998:	fe 01       	movw	r30, r28
    299a:	ed 59       	subi	r30, 0x9D	; 157
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	98 2f       	mov	r25, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	99 27       	eor	r25, r25
    29a6:	99 1f       	adc	r25, r25
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	66 e0       	ldi	r22, 0x06	; 6
    29ac:	49 2f       	mov	r20, r25
    29ae:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 5b       	subi	r30, 0xBD	; 189
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e8       	ldi	r26, 0x80	; 128
    29be:	bf e3       	ldi	r27, 0x3F	; 63
    29c0:	80 83       	st	Z, r24
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	a2 83       	std	Z+2, r26	; 0x02
    29c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	8e 01       	movw	r16, r28
    29ca:	01 5c       	subi	r16, 0xC1	; 193
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	ed 5b       	subi	r30, 0xBD	; 189
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f6:	fe 01       	movw	r30, r28
    29f8:	ff 96       	adiw	r30, 0x3f	; 63
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <LCD_sendCommand+0x40e>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9e af       	std	Y+62, r25	; 0x3e
    2a18:	8d af       	std	Y+61, r24	; 0x3d
    2a1a:	46 c0       	rjmp	.+140    	; 0x2aa8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ff 96       	adiw	r30, 0x3f	; 63
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	82 81       	ldd	r24, Z+2	; 0x02
    2a26:	93 81       	ldd	r25, Z+3	; 0x03
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	64 f5       	brge	.+88     	; 0x2a90 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ed 5b       	subi	r30, 0xBD	; 189
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e2       	ldi	r20, 0x20	; 32
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9e af       	std	Y+62, r25	; 0x3e
    2a64:	8d af       	std	Y+61, r24	; 0x3d
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <LCD_sendCommand+0x478>
    2a68:	88 ec       	ldi	r24, 0xC8	; 200
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9c af       	std	Y+60, r25	; 0x3c
    2a6e:	8b af       	std	Y+59, r24	; 0x3b
    2a70:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a72:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_sendCommand+0x466>
    2a78:	9c af       	std	Y+60, r25	; 0x3c
    2a7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	9e af       	std	Y+62, r25	; 0x3e
    2a84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a86:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a88:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	69 f7       	brne	.-38     	; 0x2a68 <LCD_sendCommand+0x45a>
    2a8e:	16 c0       	rjmp	.+44     	; 0x2abc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a90:	fe 01       	movw	r30, r28
    2a92:	ff 96       	adiw	r30, 0x3f	; 63
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e af       	std	Y+62, r25	; 0x3e
    2aa6:	8d af       	std	Y+61, r24	; 0x3d
    2aa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aaa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aac:	9a af       	std	Y+58, r25	; 0x3a
    2aae:	89 af       	std	Y+57, r24	; 0x39
    2ab0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_sendCommand+0x4a6>
    2ab8:	9a af       	std	Y+58, r25	; 0x3a
    2aba:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e8       	ldi	r26, 0x80	; 128
    2acc:	bf e3       	ldi	r27, 0x3F	; 63
    2ace:	8d ab       	std	Y+53, r24	; 0x35
    2ad0:	9e ab       	std	Y+54, r25	; 0x36
    2ad2:	af ab       	std	Y+55, r26	; 0x37
    2ad4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad8:	7e a9       	ldd	r23, Y+54	; 0x36
    2ada:	8f a9       	ldd	r24, Y+55	; 0x37
    2adc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	89 ab       	std	Y+49, r24	; 0x31
    2af0:	9a ab       	std	Y+50, r25	; 0x32
    2af2:	ab ab       	std	Y+51, r26	; 0x33
    2af4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af6:	69 a9       	ldd	r22, Y+49	; 0x31
    2af8:	7a a9       	ldd	r23, Y+50	; 0x32
    2afa:	8b a9       	ldd	r24, Y+51	; 0x33
    2afc:	9c a9       	ldd	r25, Y+52	; 0x34
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 ab       	std	Y+48, r25	; 0x30
    2b14:	8f a7       	std	Y+47, r24	; 0x2f
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2b18:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	6d a9       	ldd	r22, Y+53	; 0x35
    2b32:	7e a9       	ldd	r23, Y+54	; 0x36
    2b34:	8f a9       	ldd	r24, Y+55	; 0x37
    2b36:	98 ad       	ldd	r25, Y+56	; 0x38
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <LCD_sendCommand+0x56a>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9e a7       	std	Y+46, r25	; 0x2e
    2b60:	8d a7       	std	Y+45, r24	; 0x2d
    2b62:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b64:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_sendCommand+0x558>
    2b6a:	9e a7       	std	Y+46, r25	; 0x2e
    2b6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b70:	98 a9       	ldd	r25, Y+48	; 0x30
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	98 ab       	std	Y+48, r25	; 0x30
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <LCD_sendCommand+0x54c>
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	98 ab       	std	Y+48, r25	; 0x30
    2b94:	8f a7       	std	Y+47, r24	; 0x2f
    2b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b98:	98 a9       	ldd	r25, Y+48	; 0x30
    2b9a:	9c a7       	std	Y+44, r25	; 0x2c
    2b9c:	8b a7       	std	Y+43, r24	; 0x2b
    2b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_sendCommand+0x594>
    2ba6:	9c a7       	std	Y+44, r25	; 0x2c
    2ba8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	62 e0       	ldi	r22, 0x02	; 2
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e8       	ldi	r26, 0x80	; 128
    2bba:	bf e3       	ldi	r27, 0x3F	; 63
    2bbc:	8f a3       	std	Y+39, r24	; 0x27
    2bbe:	98 a7       	std	Y+40, r25	; 0x28
    2bc0:	a9 a7       	std	Y+41, r26	; 0x29
    2bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a ef       	ldi	r20, 0xFA	; 250
    2bd2:	54 e4       	ldi	r21, 0x44	; 68
    2bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8b a3       	std	Y+35, r24	; 0x23
    2bde:	9c a3       	std	Y+36, r25	; 0x24
    2be0:	ad a3       	std	Y+37, r26	; 0x25
    2be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be4:	6b a1       	ldd	r22, Y+35	; 0x23
    2be6:	7c a1       	ldd	r23, Y+36	; 0x24
    2be8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bea:	9e a1       	ldd	r25, Y+38	; 0x26
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e8       	ldi	r20, 0x80	; 128
    2bf2:	5f e3       	ldi	r21, 0x3F	; 63
    2bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	2c f4       	brge	.+10     	; 0x2c06 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
    2c04:	3f c0       	rjmp	.+126    	; 0x2c84 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2c06:	6b a1       	ldd	r22, Y+35	; 0x23
    2c08:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	3f ef       	ldi	r19, 0xFF	; 255
    2c12:	4f e7       	ldi	r20, 0x7F	; 127
    2c14:	57 e4       	ldi	r21, 0x47	; 71
    2c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	4c f5       	brge	.+82     	; 0x2c70 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c20:	78 a5       	ldd	r23, Y+40	; 0x28
    2c22:	89 a5       	ldd	r24, Y+41	; 0x29
    2c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e2       	ldi	r20, 0x20	; 32
    2c2c:	51 e4       	ldi	r21, 0x41	; 65
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <LCD_sendCommand+0x658>
    2c48:	88 ec       	ldi	r24, 0xC8	; 200
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	98 a3       	std	Y+32, r25	; 0x20
    2c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c52:	98 a1       	ldd	r25, Y+32	; 0x20
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_sendCommand+0x646>
    2c58:	98 a3       	std	Y+32, r25	; 0x20
    2c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	9a a3       	std	Y+34, r25	; 0x22
    2c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c66:	89 a1       	ldd	r24, Y+33	; 0x21
    2c68:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	69 f7       	brne	.-38     	; 0x2c48 <LCD_sendCommand+0x63a>
    2c6e:	14 c0       	rjmp	.+40     	; 0x2c98 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c70:	6b a1       	ldd	r22, Y+35	; 0x23
    2c72:	7c a1       	ldd	r23, Y+36	; 0x24
    2c74:	8d a1       	ldd	r24, Y+37	; 0x25
    2c76:	9e a1       	ldd	r25, Y+38	; 0x26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9a a3       	std	Y+34, r25	; 0x22
    2c82:	89 a3       	std	Y+33, r24	; 0x21
    2c84:	89 a1       	ldd	r24, Y+33	; 0x21
    2c86:	9a a1       	ldd	r25, Y+34	; 0x22
    2c88:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_sendCommand+0x682>
    2c94:	9e 8f       	std	Y+30, r25	; 0x1e
    2c96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ed 59       	subi	r30, 0x9D	; 157
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	91 70       	andi	r25, 0x01	; 1
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	63 e0       	ldi	r22, 0x03	; 3
    2ca8:	49 2f       	mov	r20, r25
    2caa:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ed 59       	subi	r30, 0x9D	; 157
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	88 2f       	mov	r24, r24
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	82 70       	andi	r24, 0x02	; 2
    2cbc:	90 70       	andi	r25, 0x00	; 0
    2cbe:	95 95       	asr	r25
    2cc0:	87 95       	ror	r24
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	64 e0       	ldi	r22, 0x04	; 4
    2cc8:	49 2f       	mov	r20, r25
    2cca:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 59       	subi	r30, 0x9D	; 157
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	84 70       	andi	r24, 0x04	; 4
    2cdc:	90 70       	andi	r25, 0x00	; 0
    2cde:	95 95       	asr	r25
    2ce0:	87 95       	ror	r24
    2ce2:	95 95       	asr	r25
    2ce4:	87 95       	ror	r24
    2ce6:	98 2f       	mov	r25, r24
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	65 e0       	ldi	r22, 0x05	; 5
    2cec:	49 2f       	mov	r20, r25
    2cee:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 59       	subi	r30, 0x9D	; 157
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	88 70       	andi	r24, 0x08	; 8
    2d00:	90 70       	andi	r25, 0x00	; 0
    2d02:	95 95       	asr	r25
    2d04:	87 95       	ror	r24
    2d06:	95 95       	asr	r25
    2d08:	87 95       	ror	r24
    2d0a:	95 95       	asr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	98 2f       	mov	r25, r24
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	66 e0       	ldi	r22, 0x06	; 6
    2d14:	49 2f       	mov	r20, r25
    2d16:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e8       	ldi	r26, 0x80	; 128
    2d20:	bf e3       	ldi	r27, 0x3F	; 63
    2d22:	89 8f       	std	Y+25, r24	; 0x19
    2d24:	9a 8f       	std	Y+26, r25	; 0x1a
    2d26:	ab 8f       	std	Y+27, r26	; 0x1b
    2d28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	4a ef       	ldi	r20, 0xFA	; 250
    2d38:	54 e4       	ldi	r21, 0x44	; 68
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	8d 8b       	std	Y+21, r24	; 0x15
    2d44:	9e 8b       	std	Y+22, r25	; 0x16
    2d46:	af 8b       	std	Y+23, r26	; 0x17
    2d48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d50:	98 8d       	ldd	r25, Y+24	; 0x18
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <LCD_sendCommand+0x75e>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9c 8b       	std	Y+20, r25	; 0x14
    2d68:	8b 8b       	std	Y+19, r24	; 0x13
    2d6a:	3f c0       	rjmp	.+126    	; 0x2dea <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d70:	8f 89       	ldd	r24, Y+23	; 0x17
    2d72:	98 8d       	ldd	r25, Y+24	; 0x18
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	4f e7       	ldi	r20, 0x7F	; 127
    2d7a:	57 e4       	ldi	r21, 0x47	; 71
    2d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d80:	18 16       	cp	r1, r24
    2d82:	4c f5       	brge	.+82     	; 0x2dd6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d84:	69 8d       	ldd	r22, Y+25	; 0x19
    2d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e2       	ldi	r20, 0x20	; 32
    2d92:	51 e4       	ldi	r21, 0x41	; 65
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9c 8b       	std	Y+20, r25	; 0x14
    2daa:	8b 8b       	std	Y+19, r24	; 0x13
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <LCD_sendCommand+0x7be>
    2dae:	88 ec       	ldi	r24, 0xC8	; 200
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9a 8b       	std	Y+18, r25	; 0x12
    2db4:	89 8b       	std	Y+17, r24	; 0x11
    2db6:	89 89       	ldd	r24, Y+17	; 0x11
    2db8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <LCD_sendCommand+0x7ac>
    2dbe:	9a 8b       	std	Y+18, r25	; 0x12
    2dc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	9c 8b       	std	Y+20, r25	; 0x14
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <LCD_sendCommand+0x7a0>
    2dd4:	14 c0       	rjmp	.+40     	; 0x2dfe <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dda:	8f 89       	ldd	r24, Y+23	; 0x17
    2ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9c 8b       	std	Y+20, r25	; 0x14
    2de8:	8b 8b       	std	Y+19, r24	; 0x13
    2dea:	8b 89       	ldd	r24, Y+19	; 0x13
    2dec:	9c 89       	ldd	r25, Y+20	; 0x14
    2dee:	98 8b       	std	Y+16, r25	; 0x10
    2df0:	8f 87       	std	Y+15, r24	; 0x0f
    2df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df4:	98 89       	ldd	r25, Y+16	; 0x10
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <LCD_sendCommand+0x7e8>
    2dfa:	98 8b       	std	Y+16, r25	; 0x10
    2dfc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	62 e0       	ldi	r22, 0x02	; 2
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	a0 e8       	ldi	r26, 0x80	; 128
    2e0e:	bf e3       	ldi	r27, 0x3F	; 63
    2e10:	8b 87       	std	Y+11, r24	; 0x0b
    2e12:	9c 87       	std	Y+12, r25	; 0x0c
    2e14:	ad 87       	std	Y+13, r26	; 0x0d
    2e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a ef       	ldi	r20, 0xFA	; 250
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8f 83       	std	Y+7, r24	; 0x07
    2e32:	98 87       	std	Y+8, r25	; 0x08
    2e34:	a9 87       	std	Y+9, r26	; 0x09
    2e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e38:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3a:	78 85       	ldd	r23, Y+8	; 0x08
    2e3c:	89 85       	ldd	r24, Y+9	; 0x09
    2e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <LCD_sendCommand+0x84c>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	8d 83       	std	Y+5, r24	; 0x05
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <LCD_sendCommand+0x8ac>
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c 83       	std	Y+4, r25	; 0x04
    2ea2:	8b 83       	std	Y+3, r24	; 0x03
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_sendCommand+0x89a>
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <LCD_sendCommand+0x88e>
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec6:	78 85       	ldd	r23, Y+8	; 0x08
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	9a 83       	std	Y+2, r25	; 0x02
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <LCD_sendCommand+0x8d6>
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2eec:	cd 59       	subi	r28, 0x9D	; 157
    2eee:	df 4f       	sbci	r29, 0xFF	; 255
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	08 95       	ret

00002f04 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	c3 56       	subi	r28, 0x63	; 99
    2f12:	d0 40       	sbci	r29, 0x00	; 0
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 59       	subi	r30, 0x9D	; 157
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	61 e0       	ldi	r22, 0x01	; 1
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    2f30:	fe 01       	movw	r30, r28
    2f32:	e1 5a       	subi	r30, 0xA1	; 161
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e8       	ldi	r26, 0x80	; 128
    2f3c:	bf e3       	ldi	r27, 0x3F	; 63
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f46:	8e 01       	movw	r16, r28
    2f48:	05 5a       	subi	r16, 0xA5	; 165
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e1 5a       	subi	r30, 0xA1	; 161
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e5 5a       	subi	r30, 0xA5	; 165
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	44 f4       	brge	.+16     	; 0x2fa2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2f92:	fe 01       	movw	r30, r28
    2f94:	e7 5a       	subi	r30, 0xA7	; 167
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    2fa0:	64 c0       	rjmp	.+200    	; 0x306a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 5a       	subi	r30, 0xA5	; 165
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	0c f0       	brlt	.+2      	; 0x2fc2 <LCD_displayCharacter+0xbe>
    2fc0:	43 c0       	rjmp	.+134    	; 0x3048 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e1 5a       	subi	r30, 0xA1	; 161
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	07 5a       	subi	r16, 0xA7	; 167
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <LCD_displayCharacter+0x134>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e9 5a       	subi	r30, 0xA9	; 169
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	88 ec       	ldi	r24, 0xC8	; 200
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    3008:	fe 01       	movw	r30, r28
    300a:	e9 5a       	subi	r30, 0xA9	; 169
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCD_displayCharacter+0x10e>
    3016:	fe 01       	movw	r30, r28
    3018:	e9 5a       	subi	r30, 0xA9	; 169
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	de 01       	movw	r26, r28
    3022:	a7 5a       	subi	r26, 0xA7	; 167
    3024:	bf 4f       	sbci	r27, 0xFF	; 255
    3026:	fe 01       	movw	r30, r28
    3028:	e7 5a       	subi	r30, 0xA7	; 167
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	11 96       	adiw	r26, 0x01	; 1
    3034:	9c 93       	st	X, r25
    3036:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3038:	fe 01       	movw	r30, r28
    303a:	e7 5a       	subi	r30, 0xA7	; 167
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	d1 f6       	brne	.-76     	; 0x2ffa <LCD_displayCharacter+0xf6>
    3046:	27 c0       	rjmp	.+78     	; 0x3096 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3048:	8e 01       	movw	r16, r28
    304a:	07 5a       	subi	r16, 0xA7	; 167
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	fe 01       	movw	r30, r28
    3050:	e5 5a       	subi	r30, 0xA5	; 165
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	de 01       	movw	r26, r28
    306c:	ab 5a       	subi	r26, 0xAB	; 171
    306e:	bf 4f       	sbci	r27, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e7 5a       	subi	r30, 0xA7	; 167
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	8d 93       	st	X+, r24
    307c:	9c 93       	st	X, r25
    307e:	fe 01       	movw	r30, r28
    3080:	eb 5a       	subi	r30, 0xAB	; 171
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_displayCharacter+0x184>
    308c:	fe 01       	movw	r30, r28
    308e:	eb 5a       	subi	r30, 0xAB	; 171
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	62 e0       	ldi	r22, 0x02	; 2
    309a:	41 e0       	ldi	r20, 0x01	; 1
    309c:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    30a0:	fe 01       	movw	r30, r28
    30a2:	ef 5a       	subi	r30, 0xAF	; 175
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	a0 e8       	ldi	r26, 0x80	; 128
    30ac:	bf e3       	ldi	r27, 0x3F	; 63
    30ae:	80 83       	st	Z, r24
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	a2 83       	std	Z+2, r26	; 0x02
    30b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b6:	8e 01       	movw	r16, r28
    30b8:	03 5b       	subi	r16, 0xB3	; 179
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	fe 01       	movw	r30, r28
    30be:	ef 5a       	subi	r30, 0xAF	; 175
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	4a ef       	ldi	r20, 0xFA	; 250
    30d0:	54 e4       	ldi	r21, 0x44	; 68
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	f8 01       	movw	r30, r16
    30dc:	80 83       	st	Z, r24
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	a2 83       	std	Z+2, r26	; 0x02
    30e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30e4:	fe 01       	movw	r30, r28
    30e6:	e3 5b       	subi	r30, 0xB3	; 179
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e8       	ldi	r20, 0x80	; 128
    30f8:	5f e3       	ldi	r21, 0x3F	; 63
    30fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fe:	88 23       	and	r24, r24
    3100:	44 f4       	brge	.+16     	; 0x3112 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3102:	fe 01       	movw	r30, r28
    3104:	e5 5b       	subi	r30, 0xB5	; 181
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
    3110:	64 c0       	rjmp	.+200    	; 0x31da <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3112:	fe 01       	movw	r30, r28
    3114:	e3 5b       	subi	r30, 0xB3	; 179
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	60 81       	ld	r22, Z
    311a:	71 81       	ldd	r23, Z+1	; 0x01
    311c:	82 81       	ldd	r24, Z+2	; 0x02
    311e:	93 81       	ldd	r25, Z+3	; 0x03
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	0c f0       	brlt	.+2      	; 0x3132 <LCD_displayCharacter+0x22e>
    3130:	43 c0       	rjmp	.+134    	; 0x31b8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3132:	fe 01       	movw	r30, r28
    3134:	ef 5a       	subi	r30, 0xAF	; 175
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e2       	ldi	r20, 0x20	; 32
    3146:	51 e4       	ldi	r21, 0x41	; 65
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	8e 01       	movw	r16, r28
    3152:	05 5b       	subi	r16, 0xB5	; 181
    3154:	1f 4f       	sbci	r17, 0xFF	; 255
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	f8 01       	movw	r30, r16
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
    3168:	1f c0       	rjmp	.+62     	; 0x31a8 <LCD_displayCharacter+0x2a4>
    316a:	fe 01       	movw	r30, r28
    316c:	e7 5b       	subi	r30, 0xB7	; 183
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	88 ec       	ldi	r24, 0xC8	; 200
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24
    3178:	fe 01       	movw	r30, r28
    317a:	e7 5b       	subi	r30, 0xB7	; 183
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <LCD_displayCharacter+0x27e>
    3186:	fe 01       	movw	r30, r28
    3188:	e7 5b       	subi	r30, 0xB7	; 183
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	de 01       	movw	r26, r28
    3192:	a5 5b       	subi	r26, 0xB5	; 181
    3194:	bf 4f       	sbci	r27, 0xFF	; 255
    3196:	fe 01       	movw	r30, r28
    3198:	e5 5b       	subi	r30, 0xB5	; 181
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	9c 93       	st	X, r25
    31a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a8:	fe 01       	movw	r30, r28
    31aa:	e5 5b       	subi	r30, 0xB5	; 181
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 81       	ld	r24, Z
    31b0:	91 81       	ldd	r25, Z+1	; 0x01
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	d1 f6       	brne	.-76     	; 0x316a <LCD_displayCharacter+0x266>
    31b6:	27 c0       	rjmp	.+78     	; 0x3206 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	8e 01       	movw	r16, r28
    31ba:	05 5b       	subi	r16, 0xB5	; 181
    31bc:	1f 4f       	sbci	r17, 0xFF	; 255
    31be:	fe 01       	movw	r30, r28
    31c0:	e3 5b       	subi	r30, 0xB3	; 179
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	60 81       	ld	r22, Z
    31c6:	71 81       	ldd	r23, Z+1	; 0x01
    31c8:	82 81       	ldd	r24, Z+2	; 0x02
    31ca:	93 81       	ldd	r25, Z+3	; 0x03
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	f8 01       	movw	r30, r16
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	de 01       	movw	r26, r28
    31dc:	a9 5b       	subi	r26, 0xB9	; 185
    31de:	bf 4f       	sbci	r27, 0xFF	; 255
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 5b       	subi	r30, 0xB5	; 181
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	91 81       	ldd	r25, Z+1	; 0x01
    31ea:	8d 93       	st	X+, r24
    31ec:	9c 93       	st	X, r25
    31ee:	fe 01       	movw	r30, r28
    31f0:	e9 5b       	subi	r30, 0xB9	; 185
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_displayCharacter+0x2f4>
    31fc:	fe 01       	movw	r30, r28
    31fe:	e9 5b       	subi	r30, 0xB9	; 185
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3206:	fe 01       	movw	r30, r28
    3208:	ed 59       	subi	r30, 0x9D	; 157
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 81       	ld	r24, Z
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	80 71       	andi	r24, 0x10	; 16
    3214:	90 70       	andi	r25, 0x00	; 0
    3216:	95 95       	asr	r25
    3218:	87 95       	ror	r24
    321a:	95 95       	asr	r25
    321c:	87 95       	ror	r24
    321e:	95 95       	asr	r25
    3220:	87 95       	ror	r24
    3222:	95 95       	asr	r25
    3224:	87 95       	ror	r24
    3226:	98 2f       	mov	r25, r24
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	63 e0       	ldi	r22, 0x03	; 3
    322c:	49 2f       	mov	r20, r25
    322e:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3232:	fe 01       	movw	r30, r28
    3234:	ed 59       	subi	r30, 0x9D	; 157
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	88 2f       	mov	r24, r24
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	80 72       	andi	r24, 0x20	; 32
    3240:	90 70       	andi	r25, 0x00	; 0
    3242:	95 95       	asr	r25
    3244:	87 95       	ror	r24
    3246:	95 95       	asr	r25
    3248:	87 95       	ror	r24
    324a:	95 95       	asr	r25
    324c:	87 95       	ror	r24
    324e:	95 95       	asr	r25
    3250:	87 95       	ror	r24
    3252:	95 95       	asr	r25
    3254:	87 95       	ror	r24
    3256:	98 2f       	mov	r25, r24
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	64 e0       	ldi	r22, 0x04	; 4
    325c:	49 2f       	mov	r20, r25
    325e:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3262:	fe 01       	movw	r30, r28
    3264:	ed 59       	subi	r30, 0x9D	; 157
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 81       	ld	r24, Z
    326a:	88 2f       	mov	r24, r24
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	80 74       	andi	r24, 0x40	; 64
    3270:	90 70       	andi	r25, 0x00	; 0
    3272:	08 2e       	mov	r0, r24
    3274:	89 2f       	mov	r24, r25
    3276:	00 0c       	add	r0, r0
    3278:	88 1f       	adc	r24, r24
    327a:	99 0b       	sbc	r25, r25
    327c:	00 0c       	add	r0, r0
    327e:	88 1f       	adc	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	98 2f       	mov	r25, r24
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	65 e0       	ldi	r22, 0x05	; 5
    3288:	49 2f       	mov	r20, r25
    328a:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    328e:	fe 01       	movw	r30, r28
    3290:	ed 59       	subi	r30, 0x9D	; 157
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	98 2f       	mov	r25, r24
    3298:	99 1f       	adc	r25, r25
    329a:	99 27       	eor	r25, r25
    329c:	99 1f       	adc	r25, r25
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	66 e0       	ldi	r22, 0x06	; 6
    32a2:	49 2f       	mov	r20, r25
    32a4:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    32a8:	fe 01       	movw	r30, r28
    32aa:	ed 5b       	subi	r30, 0xBD	; 189
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a0 e8       	ldi	r26, 0x80	; 128
    32b4:	bf e3       	ldi	r27, 0x3F	; 63
    32b6:	80 83       	st	Z, r24
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	a2 83       	std	Z+2, r26	; 0x02
    32bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32be:	8e 01       	movw	r16, r28
    32c0:	01 5c       	subi	r16, 0xC1	; 193
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	fe 01       	movw	r30, r28
    32c6:	ed 5b       	subi	r30, 0xBD	; 189
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	4a ef       	ldi	r20, 0xFA	; 250
    32d8:	54 e4       	ldi	r21, 0x44	; 68
    32da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	f8 01       	movw	r30, r16
    32e4:	80 83       	st	Z, r24
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	a2 83       	std	Z+2, r26	; 0x02
    32ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ec:	fe 01       	movw	r30, r28
    32ee:	ff 96       	adiw	r30, 0x3f	; 63
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	2c f4       	brge	.+10     	; 0x3312 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9e af       	std	Y+62, r25	; 0x3e
    330e:	8d af       	std	Y+61, r24	; 0x3d
    3310:	46 c0       	rjmp	.+140    	; 0x339e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3312:	fe 01       	movw	r30, r28
    3314:	ff 96       	adiw	r30, 0x3f	; 63
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	3f ef       	ldi	r19, 0xFF	; 255
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	57 e4       	ldi	r21, 0x47	; 71
    3326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	64 f5       	brge	.+88     	; 0x3386 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332e:	fe 01       	movw	r30, r28
    3330:	ed 5b       	subi	r30, 0xBD	; 189
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e2       	ldi	r20, 0x20	; 32
    3342:	51 e4       	ldi	r21, 0x41	; 65
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	bc 01       	movw	r22, r24
    334e:	cd 01       	movw	r24, r26
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9e af       	std	Y+62, r25	; 0x3e
    335a:	8d af       	std	Y+61, r24	; 0x3d
    335c:	0f c0       	rjmp	.+30     	; 0x337c <LCD_displayCharacter+0x478>
    335e:	88 ec       	ldi	r24, 0xC8	; 200
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9c af       	std	Y+60, r25	; 0x3c
    3364:	8b af       	std	Y+59, r24	; 0x3b
    3366:	8b ad       	ldd	r24, Y+59	; 0x3b
    3368:	9c ad       	ldd	r25, Y+60	; 0x3c
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <LCD_displayCharacter+0x466>
    336e:	9c af       	std	Y+60, r25	; 0x3c
    3370:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3372:	8d ad       	ldd	r24, Y+61	; 0x3d
    3374:	9e ad       	ldd	r25, Y+62	; 0x3e
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	9e af       	std	Y+62, r25	; 0x3e
    337a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337c:	8d ad       	ldd	r24, Y+61	; 0x3d
    337e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	69 f7       	brne	.-38     	; 0x335e <LCD_displayCharacter+0x45a>
    3384:	16 c0       	rjmp	.+44     	; 0x33b2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3386:	fe 01       	movw	r30, r28
    3388:	ff 96       	adiw	r30, 0x3f	; 63
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9e af       	std	Y+62, r25	; 0x3e
    339c:	8d af       	std	Y+61, r24	; 0x3d
    339e:	8d ad       	ldd	r24, Y+61	; 0x3d
    33a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    33a2:	9a af       	std	Y+58, r25	; 0x3a
    33a4:	89 af       	std	Y+57, r24	; 0x39
    33a6:	89 ad       	ldd	r24, Y+57	; 0x39
    33a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <LCD_displayCharacter+0x4a6>
    33ae:	9a af       	std	Y+58, r25	; 0x3a
    33b0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	62 e0       	ldi	r22, 0x02	; 2
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a0 e8       	ldi	r26, 0x80	; 128
    33c2:	bf e3       	ldi	r27, 0x3F	; 63
    33c4:	8d ab       	std	Y+53, r24	; 0x35
    33c6:	9e ab       	std	Y+54, r25	; 0x36
    33c8:	af ab       	std	Y+55, r26	; 0x37
    33ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	6d a9       	ldd	r22, Y+53	; 0x35
    33ce:	7e a9       	ldd	r23, Y+54	; 0x36
    33d0:	8f a9       	ldd	r24, Y+55	; 0x37
    33d2:	98 ad       	ldd	r25, Y+56	; 0x38
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	4a ef       	ldi	r20, 0xFA	; 250
    33da:	54 e4       	ldi	r21, 0x44	; 68
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	89 ab       	std	Y+49, r24	; 0x31
    33e6:	9a ab       	std	Y+50, r25	; 0x32
    33e8:	ab ab       	std	Y+51, r26	; 0x33
    33ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33ec:	69 a9       	ldd	r22, Y+49	; 0x31
    33ee:	7a a9       	ldd	r23, Y+50	; 0x32
    33f0:	8b a9       	ldd	r24, Y+51	; 0x33
    33f2:	9c a9       	ldd	r25, Y+52	; 0x34
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	2c f4       	brge	.+10     	; 0x340e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	98 ab       	std	Y+48, r25	; 0x30
    340a:	8f a7       	std	Y+47, r24	; 0x2f
    340c:	3f c0       	rjmp	.+126    	; 0x348c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    340e:	69 a9       	ldd	r22, Y+49	; 0x31
    3410:	7a a9       	ldd	r23, Y+50	; 0x32
    3412:	8b a9       	ldd	r24, Y+51	; 0x33
    3414:	9c a9       	ldd	r25, Y+52	; 0x34
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	4c f5       	brge	.+82     	; 0x3478 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	6d a9       	ldd	r22, Y+53	; 0x35
    3428:	7e a9       	ldd	r23, Y+54	; 0x36
    342a:	8f a9       	ldd	r24, Y+55	; 0x37
    342c:	98 ad       	ldd	r25, Y+56	; 0x38
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	98 ab       	std	Y+48, r25	; 0x30
    344c:	8f a7       	std	Y+47, r24	; 0x2f
    344e:	0f c0       	rjmp	.+30     	; 0x346e <LCD_displayCharacter+0x56a>
    3450:	88 ec       	ldi	r24, 0xC8	; 200
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9e a7       	std	Y+46, r25	; 0x2e
    3456:	8d a7       	std	Y+45, r24	; 0x2d
    3458:	8d a5       	ldd	r24, Y+45	; 0x2d
    345a:	9e a5       	ldd	r25, Y+46	; 0x2e
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <LCD_displayCharacter+0x558>
    3460:	9e a7       	std	Y+46, r25	; 0x2e
    3462:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	8f a5       	ldd	r24, Y+47	; 0x2f
    3466:	98 a9       	ldd	r25, Y+48	; 0x30
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	98 ab       	std	Y+48, r25	; 0x30
    346c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3470:	98 a9       	ldd	r25, Y+48	; 0x30
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	69 f7       	brne	.-38     	; 0x3450 <LCD_displayCharacter+0x54c>
    3476:	14 c0       	rjmp	.+40     	; 0x34a0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	69 a9       	ldd	r22, Y+49	; 0x31
    347a:	7a a9       	ldd	r23, Y+50	; 0x32
    347c:	8b a9       	ldd	r24, Y+51	; 0x33
    347e:	9c a9       	ldd	r25, Y+52	; 0x34
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	98 ab       	std	Y+48, r25	; 0x30
    348a:	8f a7       	std	Y+47, r24	; 0x2f
    348c:	8f a5       	ldd	r24, Y+47	; 0x2f
    348e:	98 a9       	ldd	r25, Y+48	; 0x30
    3490:	9c a7       	std	Y+44, r25	; 0x2c
    3492:	8b a7       	std	Y+43, r24	; 0x2b
    3494:	8b a5       	ldd	r24, Y+43	; 0x2b
    3496:	9c a5       	ldd	r25, Y+44	; 0x2c
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCD_displayCharacter+0x594>
    349c:	9c a7       	std	Y+44, r25	; 0x2c
    349e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	62 e0       	ldi	r22, 0x02	; 2
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a0 e8       	ldi	r26, 0x80	; 128
    34b0:	bf e3       	ldi	r27, 0x3F	; 63
    34b2:	8f a3       	std	Y+39, r24	; 0x27
    34b4:	98 a7       	std	Y+40, r25	; 0x28
    34b6:	a9 a7       	std	Y+41, r26	; 0x29
    34b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	6f a1       	ldd	r22, Y+39	; 0x27
    34bc:	78 a5       	ldd	r23, Y+40	; 0x28
    34be:	89 a5       	ldd	r24, Y+41	; 0x29
    34c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8b a3       	std	Y+35, r24	; 0x23
    34d4:	9c a3       	std	Y+36, r25	; 0x24
    34d6:	ad a3       	std	Y+37, r26	; 0x25
    34d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34da:	6b a1       	ldd	r22, Y+35	; 0x23
    34dc:	7c a1       	ldd	r23, Y+36	; 0x24
    34de:	8d a1       	ldd	r24, Y+37	; 0x25
    34e0:	9e a1       	ldd	r25, Y+38	; 0x26
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9a a3       	std	Y+34, r25	; 0x22
    34f8:	89 a3       	std	Y+33, r24	; 0x21
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    34fc:	6b a1       	ldd	r22, Y+35	; 0x23
    34fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	9e a1       	ldd	r25, Y+38	; 0x26
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	6f a1       	ldd	r22, Y+39	; 0x27
    3516:	78 a5       	ldd	r23, Y+40	; 0x28
    3518:	89 a5       	ldd	r24, Y+41	; 0x29
    351a:	9a a5       	ldd	r25, Y+42	; 0x2a
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
    353c:	0f c0       	rjmp	.+30     	; 0x355c <LCD_displayCharacter+0x658>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	98 a3       	std	Y+32, r25	; 0x20
    3544:	8f 8f       	std	Y+31, r24	; 0x1f
    3546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3548:	98 a1       	ldd	r25, Y+32	; 0x20
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_displayCharacter+0x646>
    354e:	98 a3       	std	Y+32, r25	; 0x20
    3550:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	89 a1       	ldd	r24, Y+33	; 0x21
    3554:	9a a1       	ldd	r25, Y+34	; 0x22
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9a a3       	std	Y+34, r25	; 0x22
    355a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	89 a1       	ldd	r24, Y+33	; 0x21
    355e:	9a a1       	ldd	r25, Y+34	; 0x22
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <LCD_displayCharacter+0x63a>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6b a1       	ldd	r22, Y+35	; 0x23
    3568:	7c a1       	ldd	r23, Y+36	; 0x24
    356a:	8d a1       	ldd	r24, Y+37	; 0x25
    356c:	9e a1       	ldd	r25, Y+38	; 0x26
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9a a3       	std	Y+34, r25	; 0x22
    3578:	89 a3       	std	Y+33, r24	; 0x21
    357a:	89 a1       	ldd	r24, Y+33	; 0x21
    357c:	9a a1       	ldd	r25, Y+34	; 0x22
    357e:	9e 8f       	std	Y+30, r25	; 0x1e
    3580:	8d 8f       	std	Y+29, r24	; 0x1d
    3582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <LCD_displayCharacter+0x682>
    358a:	9e 8f       	std	Y+30, r25	; 0x1e
    358c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    358e:	fe 01       	movw	r30, r28
    3590:	ed 59       	subi	r30, 0x9D	; 157
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	98 2f       	mov	r25, r24
    3598:	91 70       	andi	r25, 0x01	; 1
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	63 e0       	ldi	r22, 0x03	; 3
    359e:	49 2f       	mov	r20, r25
    35a0:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    35a4:	fe 01       	movw	r30, r28
    35a6:	ed 59       	subi	r30, 0x9D	; 157
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	80 81       	ld	r24, Z
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	82 70       	andi	r24, 0x02	; 2
    35b2:	90 70       	andi	r25, 0x00	; 0
    35b4:	95 95       	asr	r25
    35b6:	87 95       	ror	r24
    35b8:	98 2f       	mov	r25, r24
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	64 e0       	ldi	r22, 0x04	; 4
    35be:	49 2f       	mov	r20, r25
    35c0:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    35c4:	fe 01       	movw	r30, r28
    35c6:	ed 59       	subi	r30, 0x9D	; 157
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	84 70       	andi	r24, 0x04	; 4
    35d2:	90 70       	andi	r25, 0x00	; 0
    35d4:	95 95       	asr	r25
    35d6:	87 95       	ror	r24
    35d8:	95 95       	asr	r25
    35da:	87 95       	ror	r24
    35dc:	98 2f       	mov	r25, r24
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	65 e0       	ldi	r22, 0x05	; 5
    35e2:	49 2f       	mov	r20, r25
    35e4:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    35e8:	fe 01       	movw	r30, r28
    35ea:	ed 59       	subi	r30, 0x9D	; 157
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	88 2f       	mov	r24, r24
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	88 70       	andi	r24, 0x08	; 8
    35f6:	90 70       	andi	r25, 0x00	; 0
    35f8:	95 95       	asr	r25
    35fa:	87 95       	ror	r24
    35fc:	95 95       	asr	r25
    35fe:	87 95       	ror	r24
    3600:	95 95       	asr	r25
    3602:	87 95       	ror	r24
    3604:	98 2f       	mov	r25, r24
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	66 e0       	ldi	r22, 0x06	; 6
    360a:	49 2f       	mov	r20, r25
    360c:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a0 e8       	ldi	r26, 0x80	; 128
    3616:	bf e3       	ldi	r27, 0x3F	; 63
    3618:	89 8f       	std	Y+25, r24	; 0x19
    361a:	9a 8f       	std	Y+26, r25	; 0x1a
    361c:	ab 8f       	std	Y+27, r26	; 0x1b
    361e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3620:	69 8d       	ldd	r22, Y+25	; 0x19
    3622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4a ef       	ldi	r20, 0xFA	; 250
    362e:	54 e4       	ldi	r21, 0x44	; 68
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	8d 8b       	std	Y+21, r24	; 0x15
    363a:	9e 8b       	std	Y+22, r25	; 0x16
    363c:	af 8b       	std	Y+23, r26	; 0x17
    363e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e8       	ldi	r20, 0x80	; 128
    364e:	5f e3       	ldi	r21, 0x3F	; 63
    3650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3654:	88 23       	and	r24, r24
    3656:	2c f4       	brge	.+10     	; 0x3662 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9c 8b       	std	Y+20, r25	; 0x14
    365e:	8b 8b       	std	Y+19, r24	; 0x13
    3660:	3f c0       	rjmp	.+126    	; 0x36e0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3662:	6d 89       	ldd	r22, Y+21	; 0x15
    3664:	7e 89       	ldd	r23, Y+22	; 0x16
    3666:	8f 89       	ldd	r24, Y+23	; 0x17
    3668:	98 8d       	ldd	r25, Y+24	; 0x18
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	3f ef       	ldi	r19, 0xFF	; 255
    366e:	4f e7       	ldi	r20, 0x7F	; 127
    3670:	57 e4       	ldi	r21, 0x47	; 71
    3672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3676:	18 16       	cp	r1, r24
    3678:	4c f5       	brge	.+82     	; 0x36cc <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367a:	69 8d       	ldd	r22, Y+25	; 0x19
    367c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    367e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	51 e4       	ldi	r21, 0x41	; 65
    368a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9c 8b       	std	Y+20, r25	; 0x14
    36a0:	8b 8b       	std	Y+19, r24	; 0x13
    36a2:	0f c0       	rjmp	.+30     	; 0x36c2 <LCD_displayCharacter+0x7be>
    36a4:	88 ec       	ldi	r24, 0xC8	; 200
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9a 8b       	std	Y+18, r25	; 0x12
    36aa:	89 8b       	std	Y+17, r24	; 0x11
    36ac:	89 89       	ldd	r24, Y+17	; 0x11
    36ae:	9a 89       	ldd	r25, Y+18	; 0x12
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_displayCharacter+0x7ac>
    36b4:	9a 8b       	std	Y+18, r25	; 0x12
    36b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ba:	9c 89       	ldd	r25, Y+20	; 0x14
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	9c 8b       	std	Y+20, r25	; 0x14
    36c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c2:	8b 89       	ldd	r24, Y+19	; 0x13
    36c4:	9c 89       	ldd	r25, Y+20	; 0x14
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	69 f7       	brne	.-38     	; 0x36a4 <LCD_displayCharacter+0x7a0>
    36ca:	14 c0       	rjmp	.+40     	; 0x36f4 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36cc:	6d 89       	ldd	r22, Y+21	; 0x15
    36ce:	7e 89       	ldd	r23, Y+22	; 0x16
    36d0:	8f 89       	ldd	r24, Y+23	; 0x17
    36d2:	98 8d       	ldd	r25, Y+24	; 0x18
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9c 8b       	std	Y+20, r25	; 0x14
    36de:	8b 8b       	std	Y+19, r24	; 0x13
    36e0:	8b 89       	ldd	r24, Y+19	; 0x13
    36e2:	9c 89       	ldd	r25, Y+20	; 0x14
    36e4:	98 8b       	std	Y+16, r25	; 0x10
    36e6:	8f 87       	std	Y+15, r24	; 0x0f
    36e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ea:	98 89       	ldd	r25, Y+16	; 0x10
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <LCD_displayCharacter+0x7e8>
    36f0:	98 8b       	std	Y+16, r25	; 0x10
    36f2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	62 e0       	ldi	r22, 0x02	; 2
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 02 10 	call	0x2004	; 0x2004 <GPIO_writePin>
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	a0 e8       	ldi	r26, 0x80	; 128
    3704:	bf e3       	ldi	r27, 0x3F	; 63
    3706:	8b 87       	std	Y+11, r24	; 0x0b
    3708:	9c 87       	std	Y+12, r25	; 0x0c
    370a:	ad 87       	std	Y+13, r26	; 0x0d
    370c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3710:	7c 85       	ldd	r23, Y+12	; 0x0c
    3712:	8d 85       	ldd	r24, Y+13	; 0x0d
    3714:	9e 85       	ldd	r25, Y+14	; 0x0e
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	4a ef       	ldi	r20, 0xFA	; 250
    371c:	54 e4       	ldi	r21, 0x44	; 68
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	8f 83       	std	Y+7, r24	; 0x07
    3728:	98 87       	std	Y+8, r25	; 0x08
    372a:	a9 87       	std	Y+9, r26	; 0x09
    372c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    372e:	6f 81       	ldd	r22, Y+7	; 0x07
    3730:	78 85       	ldd	r23, Y+8	; 0x08
    3732:	89 85       	ldd	r24, Y+9	; 0x09
    3734:	9a 85       	ldd	r25, Y+10	; 0x0a
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e8       	ldi	r20, 0x80	; 128
    373c:	5f e3       	ldi	r21, 0x3F	; 63
    373e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3742:	88 23       	and	r24, r24
    3744:	2c f4       	brge	.+10     	; 0x3750 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	9e 83       	std	Y+6, r25	; 0x06
    374c:	8d 83       	std	Y+5, r24	; 0x05
    374e:	3f c0       	rjmp	.+126    	; 0x37ce <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3750:	6f 81       	ldd	r22, Y+7	; 0x07
    3752:	78 85       	ldd	r23, Y+8	; 0x08
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	3f ef       	ldi	r19, 0xFF	; 255
    375c:	4f e7       	ldi	r20, 0x7F	; 127
    375e:	57 e4       	ldi	r21, 0x47	; 71
    3760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3764:	18 16       	cp	r1, r24
    3766:	4c f5       	brge	.+82     	; 0x37ba <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3768:	6b 85       	ldd	r22, Y+11	; 0x0b
    376a:	7c 85       	ldd	r23, Y+12	; 0x0c
    376c:	8d 85       	ldd	r24, Y+13	; 0x0d
    376e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 e2       	ldi	r20, 0x20	; 32
    3776:	51 e4       	ldi	r21, 0x41	; 65
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9e 83       	std	Y+6, r25	; 0x06
    378e:	8d 83       	std	Y+5, r24	; 0x05
    3790:	0f c0       	rjmp	.+30     	; 0x37b0 <LCD_displayCharacter+0x8ac>
    3792:	88 ec       	ldi	r24, 0xC8	; 200
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9c 83       	std	Y+4, r25	; 0x04
    3798:	8b 83       	std	Y+3, r24	; 0x03
    379a:	8b 81       	ldd	r24, Y+3	; 0x03
    379c:	9c 81       	ldd	r25, Y+4	; 0x04
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <LCD_displayCharacter+0x89a>
    37a2:	9c 83       	std	Y+4, r25	; 0x04
    37a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a6:	8d 81       	ldd	r24, Y+5	; 0x05
    37a8:	9e 81       	ldd	r25, Y+6	; 0x06
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	69 f7       	brne	.-38     	; 0x3792 <LCD_displayCharacter+0x88e>
    37b8:	14 c0       	rjmp	.+40     	; 0x37e2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ba:	6f 81       	ldd	r22, Y+7	; 0x07
    37bc:	78 85       	ldd	r23, Y+8	; 0x08
    37be:	89 85       	ldd	r24, Y+9	; 0x09
    37c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	9a 83       	std	Y+2, r25	; 0x02
    37d4:	89 83       	std	Y+1, r24	; 0x01
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	9a 81       	ldd	r25, Y+2	; 0x02
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	f1 f7       	brne	.-4      	; 0x37da <LCD_displayCharacter+0x8d6>
    37de:	9a 83       	std	Y+2, r25	; 0x02
    37e0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    37e2:	cd 59       	subi	r28, 0x9D	; 157
    37e4:	df 4f       	sbci	r29, 0xFF	; 255
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	08 95       	ret

000037fa <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <LCD_displayString+0x6>
    3800:	0f 92       	push	r0
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	9b 83       	std	Y+3, r25	; 0x03
    3808:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    380a:	19 82       	std	Y+1, r1	; 0x01
    380c:	0e c0       	rjmp	.+28     	; 0x382a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	fc 01       	movw	r30, r24
    381a:	e2 0f       	add	r30, r18
    381c:	f3 1f       	adc	r31, r19
    381e:	80 81       	ld	r24, Z
    3820:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_displayCharacter>
		i++;
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	8f 5f       	subi	r24, 0xFF	; 255
    3828:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	fc 01       	movw	r30, r24
    3836:	e2 0f       	add	r30, r18
    3838:	f3 1f       	adc	r31, r19
    383a:	80 81       	ld	r24, Z
    383c:	88 23       	and	r24, r24
    383e:	39 f7       	brne	.-50     	; 0x380e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	00 d0       	rcall	.+0      	; 0x3852 <LCD_moveCursor+0x6>
    3852:	00 d0       	rcall	.+0      	; 0x3854 <LCD_moveCursor+0x8>
    3854:	0f 92       	push	r0
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	8a 83       	std	Y+2, r24	; 0x02
    385c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	3d 83       	std	Y+5, r19	; 0x05
    3866:	2c 83       	std	Y+4, r18	; 0x04
    3868:	8c 81       	ldd	r24, Y+4	; 0x04
    386a:	9d 81       	ldd	r25, Y+5	; 0x05
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	91 05       	cpc	r25, r1
    3870:	c1 f0       	breq	.+48     	; 0x38a2 <LCD_moveCursor+0x56>
    3872:	2c 81       	ldd	r18, Y+4	; 0x04
    3874:	3d 81       	ldd	r19, Y+5	; 0x05
    3876:	22 30       	cpi	r18, 0x02	; 2
    3878:	31 05       	cpc	r19, r1
    387a:	2c f4       	brge	.+10     	; 0x3886 <LCD_moveCursor+0x3a>
    387c:	8c 81       	ldd	r24, Y+4	; 0x04
    387e:	9d 81       	ldd	r25, Y+5	; 0x05
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	61 f0       	breq	.+24     	; 0x389c <LCD_moveCursor+0x50>
    3884:	19 c0       	rjmp	.+50     	; 0x38b8 <LCD_moveCursor+0x6c>
    3886:	2c 81       	ldd	r18, Y+4	; 0x04
    3888:	3d 81       	ldd	r19, Y+5	; 0x05
    388a:	22 30       	cpi	r18, 0x02	; 2
    388c:	31 05       	cpc	r19, r1
    388e:	69 f0       	breq	.+26     	; 0x38aa <LCD_moveCursor+0x5e>
    3890:	8c 81       	ldd	r24, Y+4	; 0x04
    3892:	9d 81       	ldd	r25, Y+5	; 0x05
    3894:	83 30       	cpi	r24, 0x03	; 3
    3896:	91 05       	cpc	r25, r1
    3898:	61 f0       	breq	.+24     	; 0x38b2 <LCD_moveCursor+0x66>
    389a:	0e c0       	rjmp	.+28     	; 0x38b8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	0b c0       	rjmp	.+22     	; 0x38b8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    38a2:	8b 81       	ldd	r24, Y+3	; 0x03
    38a4:	80 5c       	subi	r24, 0xC0	; 192
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	07 c0       	rjmp	.+14     	; 0x38b8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	80 5f       	subi	r24, 0xF0	; 240
    38ae:	89 83       	std	Y+1, r24	; 0x01
    38b0:	03 c0       	rjmp	.+6      	; 0x38b8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	80 5b       	subi	r24, 0xB0	; 176
    38b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	80 68       	ori	r24, 0x80	; 128
    38bc:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
}
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <LCD_displayStringRowColumn+0x6>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <LCD_displayStringRowColumn+0x8>
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	6a 83       	std	Y+2, r22	; 0x02
    38e0:	5c 83       	std	Y+4, r21	; 0x04
    38e2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	6a 81       	ldd	r22, Y+2	; 0x02
    38e8:	0e 94 26 1c 	call	0x384c	; 0x384c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
}
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	62 97       	sbiw	r28, 0x12	; 18
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	9a 8b       	std	Y+18, r25	; 0x12
    3918:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    391a:	89 89       	ldd	r24, Y+17	; 0x11
    391c:	9a 89       	ldd	r25, Y+18	; 0x12
    391e:	9e 01       	movw	r18, r28
    3920:	2f 5f       	subi	r18, 0xFF	; 255
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	b9 01       	movw	r22, r18
    3926:	4a e0       	ldi	r20, 0x0A	; 10
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	0e 94 76 1f 	call	0x3eec	; 0x3eec <itoa>
   LCD_displayString(buff); /* Display the string */
    392e:	ce 01       	movw	r24, r28
    3930:	01 96       	adiw	r24, 0x01	; 1
    3932:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <LCD_displayString>
}
    3936:	62 96       	adiw	r28, 0x12	; 18
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_sendCommand>
}
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <__vector_9>:
#include <avr/io.h>
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_OVF_vect)
{
    395c:	1f 92       	push	r1
    395e:	0f 92       	push	r0
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	0f 92       	push	r0
    3964:	11 24       	eor	r1, r1
    3966:	2f 93       	push	r18
    3968:	3f 93       	push	r19
    396a:	4f 93       	push	r20
    396c:	5f 93       	push	r21
    396e:	6f 93       	push	r22
    3970:	7f 93       	push	r23
    3972:	8f 93       	push	r24
    3974:	9f 93       	push	r25
    3976:	af 93       	push	r26
    3978:	bf 93       	push	r27
    397a:	ef 93       	push	r30
    397c:	ff 93       	push	r31
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3986:	80 91 d2 00 	lds	r24, 0x00D2
    398a:	90 91 d3 00 	lds	r25, 0x00D3
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	29 f0       	breq	.+10     	; 0x399c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3992:	e0 91 d2 00 	lds	r30, 0x00D2
    3996:	f0 91 d3 00 	lds	r31, 0x00D3
    399a:	09 95       	icall
	}
}
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	ff 91       	pop	r31
    39a2:	ef 91       	pop	r30
    39a4:	bf 91       	pop	r27
    39a6:	af 91       	pop	r26
    39a8:	9f 91       	pop	r25
    39aa:	8f 91       	pop	r24
    39ac:	7f 91       	pop	r23
    39ae:	6f 91       	pop	r22
    39b0:	5f 91       	pop	r21
    39b2:	4f 91       	pop	r20
    39b4:	3f 91       	pop	r19
    39b6:	2f 91       	pop	r18
    39b8:	0f 90       	pop	r0
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	0f 90       	pop	r0
    39be:	1f 90       	pop	r1
    39c0:	18 95       	reti

000039c2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    39c2:	1f 92       	push	r1
    39c4:	0f 92       	push	r0
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	0f 92       	push	r0
    39ca:	11 24       	eor	r1, r1
    39cc:	2f 93       	push	r18
    39ce:	3f 93       	push	r19
    39d0:	4f 93       	push	r20
    39d2:	5f 93       	push	r21
    39d4:	6f 93       	push	r22
    39d6:	7f 93       	push	r23
    39d8:	8f 93       	push	r24
    39da:	9f 93       	push	r25
    39dc:	af 93       	push	r26
    39de:	bf 93       	push	r27
    39e0:	ef 93       	push	r30
    39e2:	ff 93       	push	r31
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    39ec:	80 91 d2 00 	lds	r24, 0x00D2
    39f0:	90 91 d3 00 	lds	r25, 0x00D3
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	29 f0       	breq	.+10     	; 0x3a02 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    39f8:	e0 91 d2 00 	lds	r30, 0x00D2
    39fc:	f0 91 d3 00 	lds	r31, 0x00D3
    3a00:	09 95       	icall
	}
}
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	ff 91       	pop	r31
    3a08:	ef 91       	pop	r30
    3a0a:	bf 91       	pop	r27
    3a0c:	af 91       	pop	r26
    3a0e:	9f 91       	pop	r25
    3a10:	8f 91       	pop	r24
    3a12:	7f 91       	pop	r23
    3a14:	6f 91       	pop	r22
    3a16:	5f 91       	pop	r21
    3a18:	4f 91       	pop	r20
    3a1a:	3f 91       	pop	r19
    3a1c:	2f 91       	pop	r18
    3a1e:	0f 90       	pop	r0
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	0f 90       	pop	r0
    3a24:	1f 90       	pop	r1
    3a26:	18 95       	reti

00003a28 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <Timer1_init+0x6>
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	9a 83       	std	Y+2, r25	; 0x02
    3a34:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    3a36:	ac e4       	ldi	r26, 0x4C	; 76
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	11 96       	adiw	r26, 0x01	; 1
    3a44:	9c 93       	st	X, r25
    3a46:	8e 93       	st	-X, r24
	if(Config_Ptr ->mode == CTC){
    3a48:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4c:	85 81       	ldd	r24, Z+5	; 0x05
    3a4e:	81 30       	cpi	r24, 0x01	; 1
    3a50:	29 f5       	brne	.+74     	; 0x3a9c <Timer1_init+0x74>
		TCCR1B |= (1<<WGM01);
    3a52:	ae e4       	ldi	r26, 0x4E	; 78
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	ee e4       	ldi	r30, 0x4E	; 78
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	88 60       	ori	r24, 0x08	; 8
    3a5e:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    3a60:	aa e4       	ldi	r26, 0x4A	; 74
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	e9 81       	ldd	r30, Y+1	; 0x01
    3a66:	fa 81       	ldd	r31, Y+2	; 0x02
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	11 96       	adiw	r26, 0x01	; 1
    3a6e:	9c 93       	st	X, r25
    3a70:	8e 93       	st	-X, r24
		TIMSK  |= (1<<OCIE1A);
    3a72:	a9 e5       	ldi	r26, 0x59	; 89
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e9 e5       	ldi	r30, 0x59	; 89
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	80 61       	ori	r24, 0x10	; 16
    3a7e:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    3a80:	ef e4       	ldi	r30, 0x4F	; 79
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	88 e0       	ldi	r24, 0x08	; 8
    3a86:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    3a88:	ae e4       	ldi	r26, 0x4E	; 78
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	ee e4       	ldi	r30, 0x4E	; 78
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	90 81       	ld	r25, Z
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	84 81       	ldd	r24, Z+4	; 0x04
    3a98:	89 2b       	or	r24, r25
    3a9a:	8c 93       	st	X, r24

	}
	if ((Config_Ptr -> mode) == NORMAL)
    3a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa0:	85 81       	ldd	r24, Z+5	; 0x05
    3aa2:	88 23       	and	r24, r24
    3aa4:	71 f4       	brne	.+28     	; 0x3ac2 <Timer1_init+0x9a>
		{
			// Set prescaler
			TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    3aa6:	ae e4       	ldi	r26, 0x4E	; 78
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	ee e4       	ldi	r30, 0x4E	; 78
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	90 81       	ld	r25, Z
    3ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab4:	84 81       	ldd	r24, Z+4	; 0x04
    3ab6:	89 2b       	or	r24, r25
    3ab8:	8c 93       	st	X, r24
			// Enable overflow interrupt
			TIMSK = (1<<TOIE1);
    3aba:	e9 e5       	ldi	r30, 0x59	; 89
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	84 e0       	ldi	r24, 0x04	; 4
    3ac0:	80 83       	st	Z, r24

		}
}
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	cf 91       	pop	r28
    3ac8:	df 91       	pop	r29
    3aca:	08 95       	ret

00003acc <Timer1_deInit>:
	void Timer1_deInit(void)
	{
    3acc:	df 93       	push	r29
    3ace:	cf 93       	push	r28
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
		TCCR1A =0 ;
    3ad4:	ef e4       	ldi	r30, 0x4F	; 79
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	10 82       	st	Z, r1
		TCCR1B =0 ;
    3ada:	ee e4       	ldi	r30, 0x4E	; 78
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    3ae0:	ec e4       	ldi	r30, 0x4C	; 76
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	11 82       	std	Z+1, r1	; 0x01
    3ae6:	10 82       	st	Z, r1
		OCR1A = 0 ;
    3ae8:	ea e4       	ldi	r30, 0x4A	; 74
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	11 82       	std	Z+1, r1	; 0x01
    3aee:	10 82       	st	Z, r1
		TIMSK = 0 ;
    3af0:	e9 e5       	ldi	r30, 0x59	; 89
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	10 82       	st	Z, r1
		//g_callBackPtr = NULL_PTR ;
	}
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <Timer1_setCallBack>:
	void Timer1_setCallBack(void(*a_ptr)(void))
	{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <Timer1_setCallBack+0x6>
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    3b0a:	89 81       	ldd	r24, Y+1	; 0x01
    3b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0e:	90 93 d3 00 	sts	0x00D3, r25
    3b12:	80 93 d2 00 	sts	0x00D2, r24


	}
    3b16:	0f 90       	pop	r0
    3b18:	0f 90       	pop	r0
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    3b28:	e0 e2       	ldi	r30, 0x20	; 32
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	80 83       	st	Z, r24
	TWSR = 0x00;
    3b30:	e1 e2       	ldi	r30, 0x21	; 33
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    3b36:	e2 e2       	ldi	r30, 0x22	; 34
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	82 e0       	ldi	r24, 0x02	; 2
    3b3c:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3b3e:	e6 e5       	ldi	r30, 0x56	; 86
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	80 83       	st	Z, r24
}
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	08 95       	ret

00003b4c <TWI_start>:

void TWI_start(void)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3b54:	e6 e5       	ldi	r30, 0x56	; 86
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	84 ea       	ldi	r24, 0xA4	; 164
    3b5a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3b5c:	e6 e5       	ldi	r30, 0x56	; 86
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	88 23       	and	r24, r24
    3b64:	dc f7       	brge	.-10     	; 0x3b5c <TWI_start+0x10>
}
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <TWI_stop>:

void TWI_stop(void)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3b74:	e6 e5       	ldi	r30, 0x56	; 86
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	84 e9       	ldi	r24, 0x94	; 148
    3b7a:	80 83       	st	Z, r24
}
    3b7c:	cf 91       	pop	r28
    3b7e:	df 91       	pop	r29
    3b80:	08 95       	ret

00003b82 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	0f 92       	push	r0
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3b8e:	e3 e2       	ldi	r30, 0x23	; 35
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3b96:	e6 e5       	ldi	r30, 0x56	; 86
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	84 e8       	ldi	r24, 0x84	; 132
    3b9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3b9e:	e6 e5       	ldi	r30, 0x56	; 86
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 23       	and	r24, r24
    3ba6:	dc f7       	brge	.-10     	; 0x3b9e <TWI_writeByte+0x1c>
}
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3bb8:	e6 e5       	ldi	r30, 0x56	; 86
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	84 ec       	ldi	r24, 0xC4	; 196
    3bbe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3bc0:	e6 e5       	ldi	r30, 0x56	; 86
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	88 23       	and	r24, r24
    3bc8:	dc f7       	brge	.-10     	; 0x3bc0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3bca:	e3 e2       	ldi	r30, 0x23	; 35
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	80 81       	ld	r24, Z
}
    3bd0:	cf 91       	pop	r28
    3bd2:	df 91       	pop	r29
    3bd4:	08 95       	ret

00003bd6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3bde:	e6 e5       	ldi	r30, 0x56	; 86
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	84 e8       	ldi	r24, 0x84	; 132
    3be4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3be6:	e6 e5       	ldi	r30, 0x56	; 86
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	88 23       	and	r24, r24
    3bee:	dc f7       	brge	.-10     	; 0x3be6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3bf0:	e3 e2       	ldi	r30, 0x23	; 35
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
}
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	08 95       	ret

00003bfc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	0f 92       	push	r0
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3c06:	e1 e2       	ldi	r30, 0x21	; 33
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	88 7f       	andi	r24, 0xF8	; 248
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c12:	0f 90       	pop	r0
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <UART_init+0x6>
    3c20:	00 d0       	rcall	.+0      	; 0x3c22 <UART_init+0x8>
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3c2a:	1a 82       	std	Y+2, r1	; 0x02
    3c2c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3c2e:	eb e2       	ldi	r30, 0x2B	; 43
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	82 e0       	ldi	r24, 0x02	; 2
    3c34:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3c36:	ea e2       	ldi	r30, 0x2A	; 42
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	88 e1       	ldi	r24, 0x18	; 24
    3c3c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRB = UCSRB | ((Config_Ptr -> bit_data) & (0x04));
    3c3e:	aa e2       	ldi	r26, 0x2A	; 42
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	ea e2       	ldi	r30, 0x2A	; 42
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	98 2f       	mov	r25, r24
    3c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c4e:	80 81       	ld	r24, Z
    3c50:	84 70       	andi	r24, 0x04	; 4
    3c52:	89 2b       	or	r24, r25
    3c54:	8c 93       	st	X, r24
		 * Bit 5:4 – UPM1:0 --> (parity) configured
		 * Bit 3 – USBS --> (stop bit select) configured
		 * Bit 2:1 – UCSZ1:0 --> configured
		 * Bit 0 – UCPOL = 0 Used with the Synchronous operation only
		 */
		UCSRC =  ((Config_Ptr -> parity)<<4) | (1<<URSEL) | ((Config_Ptr -> stop_bit)<<3) ;
    3c56:	a0 e4       	ldi	r26, 0x40	; 64
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c5e:	81 81       	ldd	r24, Z+1	; 0x01
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	82 95       	swap	r24
    3c66:	92 95       	swap	r25
    3c68:	90 7f       	andi	r25, 0xF0	; 240
    3c6a:	98 27       	eor	r25, r24
    3c6c:	80 7f       	andi	r24, 0xF0	; 240
    3c6e:	98 27       	eor	r25, r24
    3c70:	28 2f       	mov	r18, r24
    3c72:	20 68       	ori	r18, 0x80	; 128
    3c74:	eb 81       	ldd	r30, Y+3	; 0x03
    3c76:	fc 81       	ldd	r31, Y+4	; 0x04
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	88 0f       	add	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	82 2b       	or	r24, r18
    3c8c:	8c 93       	st	X, r24
		UCSRC =  UCSRC | ( (((Config_Ptr -> bit_data) & 0x03) <<1) );
    3c8e:	a0 e4       	ldi	r26, 0x40	; 64
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e0 e4       	ldi	r30, 0x40	; 64
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	28 2f       	mov	r18, r24
    3c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c9e:	80 81       	ld	r24, Z
    3ca0:	88 2f       	mov	r24, r24
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	83 70       	andi	r24, 0x03	; 3
    3ca6:	90 70       	andi	r25, 0x00	; 0
    3ca8:	88 0f       	add	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	82 2b       	or	r24, r18
    3cae:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
		ubrr_value =(uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    3cb0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb4:	83 81       	ldd	r24, Z+3	; 0x03
    3cb6:	94 81       	ldd	r25, Z+4	; 0x04
    3cb8:	a5 81       	ldd	r26, Z+5	; 0x05
    3cba:	b6 81       	ldd	r27, Z+6	; 0x06
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	aa 1f       	adc	r26, r26
    3cc2:	bb 1f       	adc	r27, r27
    3cc4:	88 0f       	add	r24, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	aa 1f       	adc	r26, r26
    3cca:	bb 1f       	adc	r27, r27
    3ccc:	88 0f       	add	r24, r24
    3cce:	99 1f       	adc	r25, r25
    3cd0:	aa 1f       	adc	r26, r26
    3cd2:	bb 1f       	adc	r27, r27
    3cd4:	9c 01       	movw	r18, r24
    3cd6:	ad 01       	movw	r20, r26
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	92 e1       	ldi	r25, 0x12	; 18
    3cdc:	aa e7       	ldi	r26, 0x7A	; 122
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <__udivmodsi4>
    3ce8:	da 01       	movw	r26, r20
    3cea:	c9 01       	movw	r24, r18
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	9a 83       	std	Y+2, r25	; 0x02
    3cf0:	89 83       	std	Y+1, r24	; 0x01

			/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
			UBRRH = ubrr_value>>8;
    3cf2:	e0 e4       	ldi	r30, 0x40	; 64
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfa:	89 2f       	mov	r24, r25
    3cfc:	99 27       	eor	r25, r25
    3cfe:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    3d00:	e9 e2       	ldi	r30, 0x29	; 41
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	80 83       	st	Z, r24
}
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	0f 92       	push	r0
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d22:	eb e2       	ldi	r30, 0x2B	; 43
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	88 2f       	mov	r24, r24
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	80 72       	andi	r24, 0x20	; 32
    3d2e:	90 70       	andi	r25, 0x00	; 0
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	b9 f3       	breq	.-18     	; 0x3d22 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3d34:	ec e2       	ldi	r30, 0x2C	; 44
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3d3c:	0f 90       	pop	r0
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3d4c:	eb e2       	ldi	r30, 0x2B	; 43
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	88 23       	and	r24, r24
    3d54:	dc f7       	brge	.-10     	; 0x3d4c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3d56:	ec e2       	ldi	r30, 0x2C	; 44
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	80 81       	ld	r24, Z
}
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <UART_sendString+0x6>
    3d68:	0f 92       	push	r0
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	9b 83       	std	Y+3, r25	; 0x03
    3d70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d72:	19 82       	std	Y+1, r1	; 0x01
    3d74:	0e c0       	rjmp	.+28     	; 0x3d92 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	28 2f       	mov	r18, r24
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d80:	fc 01       	movw	r30, r24
    3d82:	e2 0f       	add	r30, r18
    3d84:	f3 1f       	adc	r31, r19
    3d86:	80 81       	ld	r24, Z
    3d88:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <UART_sendByte>
		i++;
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	8f 5f       	subi	r24, 0xFF	; 255
    3d90:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	28 2f       	mov	r18, r24
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	e2 0f       	add	r30, r18
    3da0:	f3 1f       	adc	r31, r19
    3da2:	80 81       	ld	r24, Z
    3da4:	88 23       	and	r24, r24
    3da6:	39 f7       	brne	.-50     	; 0x3d76 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	08 95       	ret

00003db4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3db4:	0f 93       	push	r16
    3db6:	1f 93       	push	r17
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <UART_receiveString+0xa>
    3dbe:	0f 92       	push	r0
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	9b 83       	std	Y+3, r25	; 0x03
    3dc6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3dc8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	28 2f       	mov	r18, r24
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd4:	8c 01       	movw	r16, r24
    3dd6:	02 0f       	add	r16, r18
    3dd8:	13 1f       	adc	r17, r19
    3dda:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    3dde:	f8 01       	movw	r30, r16
    3de0:	80 83       	st	Z, r24
    3de2:	0f c0       	rjmp	.+30     	; 0x3e02 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	8f 5f       	subi	r24, 0xFF	; 255
    3de8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	9b 81       	ldd	r25, Y+3	; 0x03
    3df4:	8c 01       	movw	r16, r24
    3df6:	02 0f       	add	r16, r18
    3df8:	13 1f       	adc	r17, r19
    3dfa:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <UART_recieveByte>
    3dfe:	f8 01       	movw	r30, r16
    3e00:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	e2 0f       	add	r30, r18
    3e10:	f3 1f       	adc	r31, r19
    3e12:	80 81       	ld	r24, Z
    3e14:	83 32       	cpi	r24, 0x23	; 35
    3e16:	31 f7       	brne	.-52     	; 0x3de4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	28 2f       	mov	r18, r24
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	9b 81       	ldd	r25, Y+3	; 0x03
    3e22:	fc 01       	movw	r30, r24
    3e24:	e2 0f       	add	r30, r18
    3e26:	f3 1f       	adc	r31, r19
    3e28:	10 82       	st	Z, r1
}
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	08 95       	ret

00003e3a <__udivmodsi4>:
    3e3a:	a1 e2       	ldi	r26, 0x21	; 33
    3e3c:	1a 2e       	mov	r1, r26
    3e3e:	aa 1b       	sub	r26, r26
    3e40:	bb 1b       	sub	r27, r27
    3e42:	fd 01       	movw	r30, r26
    3e44:	0d c0       	rjmp	.+26     	; 0x3e60 <__udivmodsi4_ep>

00003e46 <__udivmodsi4_loop>:
    3e46:	aa 1f       	adc	r26, r26
    3e48:	bb 1f       	adc	r27, r27
    3e4a:	ee 1f       	adc	r30, r30
    3e4c:	ff 1f       	adc	r31, r31
    3e4e:	a2 17       	cp	r26, r18
    3e50:	b3 07       	cpc	r27, r19
    3e52:	e4 07       	cpc	r30, r20
    3e54:	f5 07       	cpc	r31, r21
    3e56:	20 f0       	brcs	.+8      	; 0x3e60 <__udivmodsi4_ep>
    3e58:	a2 1b       	sub	r26, r18
    3e5a:	b3 0b       	sbc	r27, r19
    3e5c:	e4 0b       	sbc	r30, r20
    3e5e:	f5 0b       	sbc	r31, r21

00003e60 <__udivmodsi4_ep>:
    3e60:	66 1f       	adc	r22, r22
    3e62:	77 1f       	adc	r23, r23
    3e64:	88 1f       	adc	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	1a 94       	dec	r1
    3e6a:	69 f7       	brne	.-38     	; 0x3e46 <__udivmodsi4_loop>
    3e6c:	60 95       	com	r22
    3e6e:	70 95       	com	r23
    3e70:	80 95       	com	r24
    3e72:	90 95       	com	r25
    3e74:	9b 01       	movw	r18, r22
    3e76:	ac 01       	movw	r20, r24
    3e78:	bd 01       	movw	r22, r26
    3e7a:	cf 01       	movw	r24, r30
    3e7c:	08 95       	ret

00003e7e <__prologue_saves__>:
    3e7e:	2f 92       	push	r2
    3e80:	3f 92       	push	r3
    3e82:	4f 92       	push	r4
    3e84:	5f 92       	push	r5
    3e86:	6f 92       	push	r6
    3e88:	7f 92       	push	r7
    3e8a:	8f 92       	push	r8
    3e8c:	9f 92       	push	r9
    3e8e:	af 92       	push	r10
    3e90:	bf 92       	push	r11
    3e92:	cf 92       	push	r12
    3e94:	df 92       	push	r13
    3e96:	ef 92       	push	r14
    3e98:	ff 92       	push	r15
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	ca 1b       	sub	r28, r26
    3ea8:	db 0b       	sbc	r29, r27
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	09 94       	ijmp

00003eb6 <__epilogue_restores__>:
    3eb6:	2a 88       	ldd	r2, Y+18	; 0x12
    3eb8:	39 88       	ldd	r3, Y+17	; 0x11
    3eba:	48 88       	ldd	r4, Y+16	; 0x10
    3ebc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ebe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ec0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ec4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ec6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ec8:	b9 84       	ldd	r11, Y+9	; 0x09
    3eca:	c8 84       	ldd	r12, Y+8	; 0x08
    3ecc:	df 80       	ldd	r13, Y+7	; 0x07
    3ece:	ee 80       	ldd	r14, Y+6	; 0x06
    3ed0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ed4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ed6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ed8:	b9 81       	ldd	r27, Y+1	; 0x01
    3eda:	ce 0f       	add	r28, r30
    3edc:	d1 1d       	adc	r29, r1
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	ed 01       	movw	r28, r26
    3eea:	08 95       	ret

00003eec <itoa>:
    3eec:	fb 01       	movw	r30, r22
    3eee:	9f 01       	movw	r18, r30
    3ef0:	e8 94       	clt
    3ef2:	42 30       	cpi	r20, 0x02	; 2
    3ef4:	c4 f0       	brlt	.+48     	; 0x3f26 <itoa+0x3a>
    3ef6:	45 32       	cpi	r20, 0x25	; 37
    3ef8:	b4 f4       	brge	.+44     	; 0x3f26 <itoa+0x3a>
    3efa:	4a 30       	cpi	r20, 0x0A	; 10
    3efc:	29 f4       	brne	.+10     	; 0x3f08 <itoa+0x1c>
    3efe:	97 fb       	bst	r25, 7
    3f00:	1e f4       	brtc	.+6      	; 0x3f08 <itoa+0x1c>
    3f02:	90 95       	com	r25
    3f04:	81 95       	neg	r24
    3f06:	9f 4f       	sbci	r25, 0xFF	; 255
    3f08:	64 2f       	mov	r22, r20
    3f0a:	77 27       	eor	r23, r23
    3f0c:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__udivmodhi4>
    3f10:	80 5d       	subi	r24, 0xD0	; 208
    3f12:	8a 33       	cpi	r24, 0x3A	; 58
    3f14:	0c f0       	brlt	.+2      	; 0x3f18 <itoa+0x2c>
    3f16:	89 5d       	subi	r24, 0xD9	; 217
    3f18:	81 93       	st	Z+, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	a1 f7       	brne	.-24     	; 0x3f08 <itoa+0x1c>
    3f20:	16 f4       	brtc	.+4      	; 0x3f26 <itoa+0x3a>
    3f22:	5d e2       	ldi	r21, 0x2D	; 45
    3f24:	51 93       	st	Z+, r21
    3f26:	10 82       	st	Z, r1
    3f28:	c9 01       	movw	r24, r18
    3f2a:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <strrev>

00003f2e <strrev>:
    3f2e:	dc 01       	movw	r26, r24
    3f30:	fc 01       	movw	r30, r24
    3f32:	67 2f       	mov	r22, r23
    3f34:	71 91       	ld	r23, Z+
    3f36:	77 23       	and	r23, r23
    3f38:	e1 f7       	brne	.-8      	; 0x3f32 <strrev+0x4>
    3f3a:	32 97       	sbiw	r30, 0x02	; 2
    3f3c:	04 c0       	rjmp	.+8      	; 0x3f46 <strrev+0x18>
    3f3e:	7c 91       	ld	r23, X
    3f40:	6d 93       	st	X+, r22
    3f42:	70 83       	st	Z, r23
    3f44:	62 91       	ld	r22, -Z
    3f46:	ae 17       	cp	r26, r30
    3f48:	bf 07       	cpc	r27, r31
    3f4a:	c8 f3       	brcs	.-14     	; 0x3f3e <strrev+0x10>
    3f4c:	08 95       	ret

00003f4e <__udivmodhi4>:
    3f4e:	aa 1b       	sub	r26, r26
    3f50:	bb 1b       	sub	r27, r27
    3f52:	51 e1       	ldi	r21, 0x11	; 17
    3f54:	07 c0       	rjmp	.+14     	; 0x3f64 <__udivmodhi4_ep>

00003f56 <__udivmodhi4_loop>:
    3f56:	aa 1f       	adc	r26, r26
    3f58:	bb 1f       	adc	r27, r27
    3f5a:	a6 17       	cp	r26, r22
    3f5c:	b7 07       	cpc	r27, r23
    3f5e:	10 f0       	brcs	.+4      	; 0x3f64 <__udivmodhi4_ep>
    3f60:	a6 1b       	sub	r26, r22
    3f62:	b7 0b       	sbc	r27, r23

00003f64 <__udivmodhi4_ep>:
    3f64:	88 1f       	adc	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	5a 95       	dec	r21
    3f6a:	a9 f7       	brne	.-22     	; 0x3f56 <__udivmodhi4_loop>
    3f6c:	80 95       	com	r24
    3f6e:	90 95       	com	r25
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	08 95       	ret

00003f76 <_exit>:
    3f76:	f8 94       	cli

00003f78 <__stop_program>:
    3f78:	ff cf       	rjmp	.-2      	; 0x3f78 <__stop_program>
