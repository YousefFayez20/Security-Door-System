
Final_project_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000407a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  0000407a  0000410e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800132  00800132  000041e0  2**0
                  ALLOC
  3 .stab         0000381c  00000000  00000000  000041e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001270  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ab65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 3b 20 	jmp	0x4076	; 0x4076 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 MatchedPass = 0x01;
uint8 Pass1[5];
uint8 Pass2[5];


int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	Intializations();
     b5a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Intializations>
	sendPassword();
     b5e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendPassword>


	while(1){

		LCD_clearScreen();
     b62:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
		LCD_displayString("+ : Open Door ");
     b66:	80 e6       	ldi	r24, 0x60	; 96
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
		LCD_moveCursor(1,0);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <LCD_moveCursor>
		LCD_displayString("- : change Pass ");
     b76:	8f e6       	ldi	r24, 0x6F	; 111
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
		key = KEYPAD_getPressedKey();
     b7e:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
     b82:	80 93 33 01 	sts	0x0133, r24

		if(key == '+')
     b86:	80 91 33 01 	lds	r24, 0x0133
     b8a:	8b 32       	cpi	r24, 0x2B	; 43
     b8c:	19 f4       	brne	.+6      	; 0xb94 <main+0x4e>
		{
			OpenDoor();
     b8e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <OpenDoor>
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <main+0x5e>
		}

		else if(key == '-')
     b94:	80 91 33 01 	lds	r24, 0x0133
     b98:	8d 32       	cpi	r24, 0x2D	; 45
     b9a:	21 f4       	brne	.+8      	; 0xba4 <main+0x5e>
		{
			LCD_clearScreen();
     b9c:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
			SetNewPassword();
     ba0:	0e 94 a3 06 	call	0xd46	; 0xd46 <SetNewPassword>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	aa ef       	ldi	r26, 0xFA	; 250
     baa:	b3 e4       	ldi	r27, 0x43	; 67
     bac:	8b 87       	std	Y+11, r24	; 0x0b
     bae:	9c 87       	std	Y+12, r25	; 0x0c
     bb0:	ad 87       	std	Y+13, r26	; 0x0d
     bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bba:	9e 85       	ldd	r25, Y+14	; 0x0e
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4a ef       	ldi	r20, 0xFA	; 250
     bc2:	54 e4       	ldi	r21, 0x44	; 68
     bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	98 87       	std	Y+8, r25	; 0x08
     bd0:	a9 87       	std	Y+9, r26	; 0x09
     bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e8       	ldi	r20, 0x80	; 128
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be8:	88 23       	and	r24, r24
     bea:	2c f4       	brge	.+10     	; 0xbf6 <main+0xb0>
		__ticks = 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9e 83       	std	Y+6, r25	; 0x06
     bf2:	8d 83       	std	Y+5, r24	; 0x05
     bf4:	3f c0       	rjmp	.+126    	; 0xc74 <main+0x12e>
	else if (__tmp > 65535)
     bf6:	6f 81       	ldd	r22, Y+7	; 0x07
     bf8:	78 85       	ldd	r23, Y+8	; 0x08
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	57 e4       	ldi	r21, 0x47	; 71
     c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0a:	18 16       	cp	r1, r24
     c0c:	4c f5       	brge	.+82     	; 0xc60 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <main+0x110>
     c38:	88 ec       	ldi	r24, 0xC8	; 200
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <main+0xfe>
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	69 f7       	brne	.-38     	; 0xc38 <main+0xf2>
     c5e:	81 cf       	rjmp	.-254    	; 0xb62 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c60:	6f 81       	ldd	r22, Y+7	; 0x07
     c62:	78 85       	ldd	r23, Y+8	; 0x08
     c64:	89 85       	ldd	r24, Y+9	; 0x09
     c66:	9a 85       	ldd	r25, Y+10	; 0x0a
     c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	9e 83       	std	Y+6, r25	; 0x06
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x13a>
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	6c cf       	rjmp	.-296    	; 0xb62 <main+0x1c>

00000c8a <Intializations>:
		_delay_ms(500);

}
}

void Intializations(void){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	2c 97       	sbiw	r28, 0x0c	; 12
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     c9e:	af e5       	ldi	r26, 0x5F	; 95
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ef e5       	ldi	r30, 0x5F	; 95
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	8c 93       	st	X, r24
	Timer1_setCallBack(HoldKeypadLCD);
     cac:	8c e8       	ldi	r24, 0x8C	; 140
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Timer1_setCallBack>
	UART_ConfigType uart_configurations = {DATA_8_BIT,EVEN_PARITY,ONE_STOP_BIT,9600};
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	99 87       	std	Y+9, r25	; 0x09
     cba:	88 87       	std	Y+8, r24	; 0x08
     cbc:	e5 e2       	ldi	r30, 0x25	; 37
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	fb 87       	std	Y+11, r31	; 0x0b
     cc2:	ea 87       	std	Y+10, r30	; 0x0a
     cc4:	f7 e0       	ldi	r31, 0x07	; 7
     cc6:	fc 87       	std	Y+12, r31	; 0x0c
     cc8:	ea 85       	ldd	r30, Y+10	; 0x0a
     cca:	fb 85       	ldd	r31, Y+11	; 0x0b
     ccc:	00 80       	ld	r0, Z
     cce:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	9b 87       	std	Y+11, r25	; 0x0b
     cd6:	8a 87       	std	Y+10, r24	; 0x0a
     cd8:	e8 85       	ldd	r30, Y+8	; 0x08
     cda:	f9 85       	ldd	r31, Y+9	; 0x09
     cdc:	00 82       	st	Z, r0
     cde:	88 85       	ldd	r24, Y+8	; 0x08
     ce0:	99 85       	ldd	r25, Y+9	; 0x09
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	99 87       	std	Y+9, r25	; 0x09
     ce6:	88 87       	std	Y+8, r24	; 0x08
     ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	9c 87       	std	Y+12, r25	; 0x0c
     cee:	ec 85       	ldd	r30, Y+12	; 0x0c
     cf0:	ee 23       	and	r30, r30
     cf2:	51 f7       	brne	.-44     	; 0xcc8 <Intializations+0x3e>
	UART_init(&uart_configurations);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <UART_init>
	LCD_init();
     cfc:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_init>
	empty = 0x01;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 32 01 	sts	0x0132, r24
}
     d06:	2c 96       	adiw	r28, 0x0c	; 12
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <HoldKeypadLCD>:





void HoldKeypadLCD(void){
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62

	NoOfSeconds++;
     d20:	80 91 37 01 	lds	r24, 0x0137
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	80 93 37 01 	sts	0x0137, r24

	if(NoOfSeconds == 60){
     d2a:	80 91 37 01 	lds	r24, 0x0137
     d2e:	8c 33       	cpi	r24, 0x3C	; 60
     d30:	39 f4       	brne	.+14     	; 0xd40 <HoldKeypadLCD+0x28>
	HoldTime = 0x01;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 36 01 	sts	0x0136, r24
	Timer1_deInit();
     d38:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <Timer1_deInit>
	NoOfSeconds = 0;
     d3c:	10 92 37 01 	sts	0x0137, r1
	}

}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SetNewPassword>:


void SetNewPassword(void){
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	2e 97       	sbiw	r28, 0x0e	; 14
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
	ChangePass = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 39 01 	sts	0x0139, r24
	OpenDoor();
     d60:	0e 94 3d 07 	call	0xe7a	; 0xe7a <OpenDoor>
	ChangePass = 0;
     d64:	10 92 39 01 	sts	0x0139, r1
	if(PassStatus == PASS_CORRECT){
     d68:	80 91 34 01 	lds	r24, 0x0134
     d6c:	81 32       	cpi	r24, 0x21	; 33
     d6e:	31 f4       	brne	.+12     	; 0xd7c <SetNewPassword+0x36>
		UART_sendByte(NEW_PASS);
     d70:	81 e3       	ldi	r24, 0x31	; 49
     d72:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
		sendPassword();
     d76:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendPassword>
     d7a:	76 c0       	rjmp	.+236    	; 0xe68 <SetNewPassword+0x122>
	}else{
		LCD_displayString("wrong password");
     d7c:	80 e8       	ldi	r24, 0x80	; 128
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	aa ef       	ldi	r26, 0xFA	; 250
     d8a:	b3 e4       	ldi	r27, 0x43	; 67
     d8c:	8b 87       	std	Y+11, r24	; 0x0b
     d8e:	9c 87       	std	Y+12, r25	; 0x0c
     d90:	ad 87       	std	Y+13, r26	; 0x0d
     d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d94:	6b 85       	ldd	r22, Y+11	; 0x0b
     d96:	7c 85       	ldd	r23, Y+12	; 0x0c
     d98:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	4a ef       	ldi	r20, 0xFA	; 250
     da2:	54 e4       	ldi	r21, 0x44	; 68
     da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	8f 83       	std	Y+7, r24	; 0x07
     dae:	98 87       	std	Y+8, r25	; 0x08
     db0:	a9 87       	std	Y+9, r26	; 0x09
     db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e8       	ldi	r20, 0x80	; 128
     dc2:	5f e3       	ldi	r21, 0x3F	; 63
     dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc8:	88 23       	and	r24, r24
     dca:	2c f4       	brge	.+10     	; 0xdd6 <SetNewPassword+0x90>
		__ticks = 1;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9e 83       	std	Y+6, r25	; 0x06
     dd2:	8d 83       	std	Y+5, r24	; 0x05
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <SetNewPassword+0x10e>
	else if (__tmp > 65535)
     dd6:	6f 81       	ldd	r22, Y+7	; 0x07
     dd8:	78 85       	ldd	r23, Y+8	; 0x08
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	4f e7       	ldi	r20, 0x7F	; 127
     de4:	57 e4       	ldi	r21, 0x47	; 71
     de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dea:	18 16       	cp	r1, r24
     dec:	4c f5       	brge	.+82     	; 0xe40 <SetNewPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dee:	6b 85       	ldd	r22, Y+11	; 0x0b
     df0:	7c 85       	ldd	r23, Y+12	; 0x0c
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	9e 85       	ldd	r25, Y+14	; 0x0e
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e2       	ldi	r20, 0x20	; 32
     dfc:	51 e4       	ldi	r21, 0x41	; 65
     dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	0f c0       	rjmp	.+30     	; 0xe36 <SetNewPassword+0xf0>
     e18:	88 ec       	ldi	r24, 0xC8	; 200
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <SetNewPassword+0xde>
     e28:	9c 83       	std	Y+4, r25	; 0x04
     e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	9e 83       	std	Y+6, r25	; 0x06
     e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	69 f7       	brne	.-38     	; 0xe18 <SetNewPassword+0xd2>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <SetNewPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <SetNewPassword+0x11a>
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}


}
     e68:	2e 96       	adiw	r28, 0x0e	; 14
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <OpenDoor>:



void OpenDoor(void){
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	a7 97       	sbiw	r28, 0x27	; 39
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(OPEN_DOOR);
     e8e:	82 e3       	ldi	r24, 0x32	; 50
     e90:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
	Timer1_ConfigType TimerConfigurations = {0, 7813, CLK_1024,CTC};
     e94:	ce 01       	movw	r24, r28
     e96:	4d 96       	adiw	r24, 0x1d	; 29
     e98:	9c a3       	std	Y+36, r25	; 0x24
     e9a:	8b a3       	std	Y+35, r24	; 0x23
     e9c:	ec e2       	ldi	r30, 0x2C	; 44
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	fe a3       	std	Y+38, r31	; 0x26
     ea2:	ed a3       	std	Y+37, r30	; 0x25
     ea4:	f6 e0       	ldi	r31, 0x06	; 6
     ea6:	ff a3       	std	Y+39, r31	; 0x27
     ea8:	ed a1       	ldd	r30, Y+37	; 0x25
     eaa:	fe a1       	ldd	r31, Y+38	; 0x26
     eac:	00 80       	ld	r0, Z
     eae:	8d a1       	ldd	r24, Y+37	; 0x25
     eb0:	9e a1       	ldd	r25, Y+38	; 0x26
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	9e a3       	std	Y+38, r25	; 0x26
     eb6:	8d a3       	std	Y+37, r24	; 0x25
     eb8:	eb a1       	ldd	r30, Y+35	; 0x23
     eba:	fc a1       	ldd	r31, Y+36	; 0x24
     ebc:	00 82       	st	Z, r0
     ebe:	8b a1       	ldd	r24, Y+35	; 0x23
     ec0:	9c a1       	ldd	r25, Y+36	; 0x24
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9c a3       	std	Y+36, r25	; 0x24
     ec6:	8b a3       	std	Y+35, r24	; 0x23
     ec8:	9f a1       	ldd	r25, Y+39	; 0x27
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	9f a3       	std	Y+39, r25	; 0x27
     ece:	ef a1       	ldd	r30, Y+39	; 0x27
     ed0:	ee 23       	and	r30, r30
     ed2:	51 f7       	brne	.-44     	; 0xea8 <OpenDoor+0x2e>
	FalseTries = 0;
     ed4:	10 92 35 01 	sts	0x0135, r1
	LCD_clearScreen();
     ed8:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
	enterpassword();
     edc:	0e 94 16 0a 	call	0x142c	; 0x142c <enterpassword>
	PassStatus = UART_recieveByte();
     ee0:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
     ee4:	80 93 34 01 	sts	0x0134, r24
     ee8:	7b c1       	rjmp	.+758    	; 0x11e0 <OpenDoor+0x366>
	while(FalseTries < 2 ){

				if(PassStatus == PASS_WRONG){
     eea:	80 91 34 01 	lds	r24, 0x0134
     eee:	80 32       	cpi	r24, 0x20	; 32
     ef0:	09 f0       	breq	.+2      	; 0xef4 <OpenDoor+0x7a>
     ef2:	87 c0       	rjmp	.+270    	; 0x1002 <OpenDoor+0x188>
					LCD_clearScreen();
     ef4:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					FalseTries++;
     ef8:	80 91 35 01 	lds	r24, 0x0135
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	80 93 35 01 	sts	0x0135, r24
					LCD_clearScreen();
     f02:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					LCD_displayString("pass wrong ");
     f06:	8f e8       	ldi	r24, 0x8F	; 143
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	aa ef       	ldi	r26, 0xFA	; 250
     f14:	b3 e4       	ldi	r27, 0x43	; 67
     f16:	89 8f       	std	Y+25, r24	; 0x19
     f18:	9a 8f       	std	Y+26, r25	; 0x1a
     f1a:	ab 8f       	std	Y+27, r26	; 0x1b
     f1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1e:	69 8d       	ldd	r22, Y+25	; 0x19
     f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4a ef       	ldi	r20, 0xFA	; 250
     f2c:	54 e4       	ldi	r21, 0x44	; 68
     f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	8d 8b       	std	Y+21, r24	; 0x15
     f38:	9e 8b       	std	Y+22, r25	; 0x16
     f3a:	af 8b       	std	Y+23, r26	; 0x17
     f3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5f e3       	ldi	r21, 0x3F	; 63
     f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f52:	88 23       	and	r24, r24
     f54:	2c f4       	brge	.+10     	; 0xf60 <OpenDoor+0xe6>
		__ticks = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 8b       	std	Y+20, r25	; 0x14
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <OpenDoor+0x164>
	else if (__tmp > 65535)
     f60:	6d 89       	ldd	r22, Y+21	; 0x15
     f62:	7e 89       	ldd	r23, Y+22	; 0x16
     f64:	8f 89       	ldd	r24, Y+23	; 0x17
     f66:	98 8d       	ldd	r25, Y+24	; 0x18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f e7       	ldi	r20, 0x7F	; 127
     f6e:	57 e4       	ldi	r21, 0x47	; 71
     f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f74:	18 16       	cp	r1, r24
     f76:	4c f5       	brge	.+82     	; 0xfca <OpenDoor+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f78:	69 8d       	ldd	r22, Y+25	; 0x19
     f7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9c 8b       	std	Y+20, r25	; 0x14
     f9e:	8b 8b       	std	Y+19, r24	; 0x13
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <OpenDoor+0x146>
     fa2:	88 ec       	ldi	r24, 0xC8	; 200
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9a 8b       	std	Y+18, r25	; 0x12
     fa8:	89 8b       	std	Y+17, r24	; 0x11
     faa:	89 89       	ldd	r24, Y+17	; 0x11
     fac:	9a 89       	ldd	r25, Y+18	; 0x12
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <OpenDoor+0x134>
     fb2:	9a 8b       	std	Y+18, r25	; 0x12
     fb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	8b 89       	ldd	r24, Y+19	; 0x13
     fb8:	9c 89       	ldd	r25, Y+20	; 0x14
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	9c 8b       	std	Y+20, r25	; 0x14
     fbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	8b 89       	ldd	r24, Y+19	; 0x13
     fc2:	9c 89       	ldd	r25, Y+20	; 0x14
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	69 f7       	brne	.-38     	; 0xfa2 <OpenDoor+0x128>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <OpenDoor+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fca:	6d 89       	ldd	r22, Y+21	; 0x15
     fcc:	7e 89       	ldd	r23, Y+22	; 0x16
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
     fde:	8b 89       	ldd	r24, Y+19	; 0x13
     fe0:	9c 89       	ldd	r25, Y+20	; 0x14
     fe2:	98 8b       	std	Y+16, r25	; 0x10
     fe4:	8f 87       	std	Y+15, r24	; 0x0f
     fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe8:	98 89       	ldd	r25, Y+16	; 0x10
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <OpenDoor+0x170>
     fee:	98 8b       	std	Y+16, r25	; 0x10
     ff0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_clearScreen();
     ff2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					enterpassword();
     ff6:	0e 94 16 0a 	call	0x142c	; 0x142c <enterpassword>
					PassStatus = UART_recieveByte();
     ffa:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
     ffe:	80 93 34 01 	sts	0x0134, r24
									}



				if(PassStatus == PASS_CORRECT){
    1002:	80 91 34 01 	lds	r24, 0x0134
    1006:	81 32       	cpi	r24, 0x21	; 33
    1008:	09 f0       	breq	.+2      	; 0x100c <OpenDoor+0x192>
    100a:	bd c0       	rjmp	.+378    	; 0x1186 <OpenDoor+0x30c>
					LCD_clearScreen();
    100c:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					LCD_displayString("pass correct ");
    1010:	8b e9       	ldi	r24, 0x9B	; 155
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	aa ef       	ldi	r26, 0xFA	; 250
    101e:	b3 e4       	ldi	r27, 0x43	; 67
    1020:	8b 87       	std	Y+11, r24	; 0x0b
    1022:	9c 87       	std	Y+12, r25	; 0x0c
    1024:	ad 87       	std	Y+13, r26	; 0x0d
    1026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1028:	6b 85       	ldd	r22, Y+11	; 0x0b
    102a:	7c 85       	ldd	r23, Y+12	; 0x0c
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	4a ef       	ldi	r20, 0xFA	; 250
    1036:	54 e4       	ldi	r21, 0x44	; 68
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	8f 83       	std	Y+7, r24	; 0x07
    1042:	98 87       	std	Y+8, r25	; 0x08
    1044:	a9 87       	std	Y+9, r26	; 0x09
    1046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105c:	88 23       	and	r24, r24
    105e:	2c f4       	brge	.+10     	; 0x106a <OpenDoor+0x1f0>
		__ticks = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <OpenDoor+0x26e>
	else if (__tmp > 65535)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	3f ef       	ldi	r19, 0xFF	; 255
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	57 e4       	ldi	r21, 0x47	; 71
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107e:	18 16       	cp	r1, r24
    1080:	4c f5       	brge	.+82     	; 0x10d4 <OpenDoor+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1082:	6b 85       	ldd	r22, Y+11	; 0x0b
    1084:	7c 85       	ldd	r23, Y+12	; 0x0c
    1086:	8d 85       	ldd	r24, Y+13	; 0x0d
    1088:	9e 85       	ldd	r25, Y+14	; 0x0e
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <OpenDoor+0x250>
    10ac:	88 ec       	ldi	r24, 0xC8	; 200
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <OpenDoor+0x23e>
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	69 f7       	brne	.-38     	; 0x10ac <OpenDoor+0x232>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <OpenDoor+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d4:	6f 81       	ldd	r22, Y+7	; 0x07
    10d6:	78 85       	ldd	r23, Y+8	; 0x08
    10d8:	89 85       	ldd	r24, Y+9	; 0x09
    10da:	9a 85       	ldd	r25, Y+10	; 0x0a
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <OpenDoor+0x27a>
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					LCD_clearScreen();
    10fc:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					if(ChangePass == 0){
    1100:	80 91 39 01 	lds	r24, 0x0139
    1104:	88 23       	and	r24, r24
    1106:	99 f5       	brne	.+102    	; 0x116e <OpenDoor+0x2f4>
						UART_sendByte(StartMotorActions);
    1108:	84 e4       	ldi	r24, 0x44	; 68
    110a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
					DoorStatus = UART_recieveByte();
    110e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    1112:	80 93 38 01 	sts	0x0138, r24
					if(DoorStatus == UNLOCKING){
    1116:	80 91 38 01 	lds	r24, 0x0138
    111a:	80 34       	cpi	r24, 0x40	; 64
    111c:	21 f4       	brne	.+8      	; 0x1126 <OpenDoor+0x2ac>
					LCD_displayString("Door is Unlocking");}
    111e:	89 ea       	ldi	r24, 0xA9	; 169
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
					while(UART_recieveByte() == UNLOCKING){
    1126:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    112a:	80 34       	cpi	r24, 0x40	; 64
    112c:	e1 f3       	breq	.-8      	; 0x1126 <OpenDoor+0x2ac>

					}
					DoorStatus = UART_recieveByte();
    112e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    1132:	80 93 38 01 	sts	0x0138, r24
					if(DoorStatus == HOLD){
    1136:	80 91 38 01 	lds	r24, 0x0138
    113a:	82 34       	cpi	r24, 0x42	; 66
    113c:	11 f4       	brne	.+4      	; 0x1142 <OpenDoor+0x2c8>
					LCD_clearScreen();
    113e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					}
			while(UART_recieveByte() == HOLD){}
    1142:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    1146:	82 34       	cpi	r24, 0x42	; 66
    1148:	e1 f3       	breq	.-8      	; 0x1142 <OpenDoor+0x2c8>
					DoorStatus = UART_recieveByte();
    114a:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    114e:	80 93 38 01 	sts	0x0138, r24
						if(DoorStatus == LOCKING){
    1152:	80 91 38 01 	lds	r24, 0x0138
    1156:	81 34       	cpi	r24, 0x41	; 65
    1158:	31 f4       	brne	.+12     	; 0x1166 <OpenDoor+0x2ec>
							LCD_clearScreen();
    115a:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
						LCD_displayString("Door is Locking");}
    115e:	8b eb       	ldi	r24, 0xBB	; 187
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
						while(UART_recieveByte() == LOCKING){
    1166:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    116a:	81 34       	cpi	r24, 0x41	; 65
    116c:	e1 f3       	breq	.-8      	; 0x1166 <OpenDoor+0x2ec>

											}
					}
					if(ChangePass == 1){
    116e:	80 91 39 01 	lds	r24, 0x0139
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	19 f4       	brne	.+6      	; 0x117c <OpenDoor+0x302>
						UART_sendByte(NEW_PASS2);
    1176:	85 e4       	ldi	r24, 0x45	; 69
    1178:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
					}


							LCD_clearScreen();
    117c:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					FalseTries = 0;
    1180:	10 92 35 01 	sts	0x0135, r1
    1184:	32 c0       	rjmp	.+100    	; 0x11ea <OpenDoor+0x370>
					break;
				}
				if(FalseTries == 2){
    1186:	80 91 35 01 	lds	r24, 0x0135
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	49 f5       	brne	.+82     	; 0x11e0 <OpenDoor+0x366>
					PassStatus = UART_recieveByte();
    118e:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    1192:	80 93 34 01 	sts	0x0134, r24
					Timer1_init(&TimerConfigurations);
    1196:	ce 01       	movw	r24, r28
    1198:	4d 96       	adiw	r24, 0x1d	; 29
    119a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <Timer1_init>
					LCD_displayString("Hold for a min ");
    119e:	8b ec       	ldi	r24, 0xCB	; 203
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
					while(HoldTime != 0x01){
    11a6:	80 91 36 01 	lds	r24, 0x0136
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <OpenDoor+0x32c>
					}
					HoldTime = 0x00;
    11ae:	10 92 36 01 	sts	0x0136, r1
					DoorStatus = UART_recieveByte();
    11b2:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    11b6:	80 93 38 01 	sts	0x0138, r24
										if(DoorStatus == HOLD){
    11ba:	80 91 38 01 	lds	r24, 0x0138
    11be:	82 34       	cpi	r24, 0x42	; 66
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <OpenDoor+0x34c>
										LCD_clearScreen();
    11c2:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
										}
					while(UART_recieveByte() == HOLD){}
    11c6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	e1 f3       	breq	.-8      	; 0x11c6 <OpenDoor+0x34c>
					if(UART_recieveByte() == MENU){
    11ce:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    11d2:	83 33       	cpi	r24, 0x33	; 51
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <OpenDoor+0x366>
							LCD_clearScreen();
    11d6:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
							FalseTries = 0;
    11da:	10 92 35 01 	sts	0x0135, r1
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <OpenDoor+0x370>
	Timer1_ConfigType TimerConfigurations = {0, 7813, CLK_1024,CTC};
	FalseTries = 0;
	LCD_clearScreen();
	enterpassword();
	PassStatus = UART_recieveByte();
	while(FalseTries < 2 ){
    11e0:	80 91 35 01 	lds	r24, 0x0135
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <OpenDoor+0x370>
    11e8:	80 ce       	rjmp	.-768    	; 0xeea <OpenDoor+0x70>


}


}
    11ea:	a7 96       	adiw	r28, 0x27	; 39
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <sendPassword>:


void sendPassword(void){
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
	do{
	setPassword();
    1204:	0e 94 0e 09 	call	0x121c	; 0x121c <setPassword>
	}while(MatchedPass == 0x00);
    1208:	80 91 24 01 	lds	r24, 0x0124
    120c:	88 23       	and	r24, r24
    120e:	d1 f3       	breq	.-12     	; 0x1204 <sendPassword+0x8>
	MatchedPass = 0x01;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 24 01 	sts	0x0124, r24

}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <setPassword>:


void setPassword(void){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	6c 97       	sbiw	r28, 0x1c	; 28
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
	       enterpassword();
    1230:	0e 94 16 0a 	call	0x142c	; 0x142c <enterpassword>
		   re_enterpassword();
    1234:	0e 94 34 0c 	call	0x1868	; 0x1868 <re_enterpassword>
			if(key == '=')
    1238:	80 91 33 01 	lds	r24, 0x0133
    123c:	8d 33       	cpi	r24, 0x3D	; 61
    123e:	09 f0       	breq	.+2      	; 0x1242 <setPassword+0x26>
    1240:	ec c0       	rjmp	.+472    	; 0x141a <setPassword+0x1fe>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	aa ef       	ldi	r26, 0xFA	; 250
    1248:	b3 e4       	ldi	r27, 0x43	; 67
    124a:	89 8f       	std	Y+25, r24	; 0x19
    124c:	9a 8f       	std	Y+26, r25	; 0x1a
    124e:	ab 8f       	std	Y+27, r26	; 0x1b
    1250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	69 8d       	ldd	r22, Y+25	; 0x19
    1254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8d 8b       	std	Y+21, r24	; 0x15
    126c:	9e 8b       	std	Y+22, r25	; 0x16
    126e:	af 8b       	std	Y+23, r26	; 0x17
    1270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <setPassword+0x78>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 8b       	std	Y+20, r25	; 0x14
    1290:	8b 8b       	std	Y+19, r24	; 0x13
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <setPassword+0xf6>
	else if (__tmp > 65535)
    1294:	6d 89       	ldd	r22, Y+21	; 0x15
    1296:	7e 89       	ldd	r23, Y+22	; 0x16
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <setPassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	69 8d       	ldd	r22, Y+25	; 0x19
    12ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <setPassword+0xd8>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9a 8b       	std	Y+18, r25	; 0x12
    12dc:	89 8b       	std	Y+17, r24	; 0x11
    12de:	89 89       	ldd	r24, Y+17	; 0x11
    12e0:	9a 89       	ldd	r25, Y+18	; 0x12
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <setPassword+0xc6>
    12e6:	9a 8b       	std	Y+18, r25	; 0x12
    12e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8b 89       	ldd	r24, Y+19	; 0x13
    12f6:	9c 89       	ldd	r25, Y+20	; 0x14
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <setPassword+0xba>
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <setPassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9c 8b       	std	Y+20, r25	; 0x14
    1310:	8b 8b       	std	Y+19, r24	; 0x13
    1312:	8b 89       	ldd	r24, Y+19	; 0x13
    1314:	9c 89       	ldd	r25, Y+20	; 0x14
    1316:	98 8b       	std	Y+16, r25	; 0x10
    1318:	8f 87       	std	Y+15, r24	; 0x0f
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	98 89       	ldd	r25, Y+16	; 0x10
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <setPassword+0x102>
    1322:	98 8b       	std	Y+16, r25	; 0x10
    1324:	8f 87       	std	Y+15, r24	; 0x0f
					{
				_delay_ms(500);
				LCD_clearScreen(); /* display the pressed keypad switch */
    1326:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
				LCD_displayString("passwords sent");
    132a:	8b ed       	ldi	r24, 0xDB	; 219
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	aa ef       	ldi	r26, 0xFA	; 250
    1338:	b3 e4       	ldi	r27, 0x43	; 67
    133a:	8b 87       	std	Y+11, r24	; 0x0b
    133c:	9c 87       	std	Y+12, r25	; 0x0c
    133e:	ad 87       	std	Y+13, r26	; 0x0d
    1340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a ef       	ldi	r20, 0xFA	; 250
    1350:	54 e4       	ldi	r21, 0x44	; 68
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8f 83       	std	Y+7, r24	; 0x07
    135c:	98 87       	std	Y+8, r25	; 0x08
    135e:	a9 87       	std	Y+9, r26	; 0x09
    1360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <setPassword+0x168>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <setPassword+0x1e6>
	else if (__tmp > 65535)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <setPassword+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6b 85       	ldd	r22, Y+11	; 0x0b
    139e:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <setPassword+0x1c8>
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <setPassword+0x1b6>
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <setPassword+0x1aa>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <setPassword+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <setPassword+0x1f2>
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    1416:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
					}


		}
    141a:	6c 96       	adiw	r28, 0x1c	; 28
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <enterpassword>:




void enterpassword(void){
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	ea 97       	sbiw	r28, 0x3a	; 58
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
	PassStatus = IDLE;
    1440:	10 92 34 01 	sts	0x0134, r1
	uint8 counter = 0;
    1444:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 key = 0;
    1446:	19 ae       	std	Y+57, r1	; 0x39
	LCD_displayString("plz enter pass: ");
    1448:	8a ee       	ldi	r24, 0xEA	; 234
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
	LCD_moveCursor(1,0);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <LCD_moveCursor>
    1458:	02 c1       	rjmp	.+516    	; 0x165e <enterpassword+0x232>


	while(counter < 5 ){

	key = KEYPAD_getPressedKey();
    145a:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    145e:	89 af       	std	Y+57, r24	; 0x39
	if((key <= 9) && (key >= 0))
    1460:	89 ad       	ldd	r24, Y+57	; 0x39
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	08 f0       	brcs	.+2      	; 0x1468 <enterpassword+0x3c>
    1466:	81 c0       	rjmp	.+258    	; 0x156a <enterpassword+0x13e>
			{
		Pass1[counter] = key;
    1468:	8a ad       	ldd	r24, Y+58	; 0x3a
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	fc 01       	movw	r30, r24
    1470:	ee 5b       	subi	r30, 0xBE	; 190
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	89 ad       	ldd	r24, Y+57	; 0x39
    1476:	80 83       	st	Z, r24
		LCD_displayString("*");   /* display the pressed keypad switch */
    1478:	8b ef       	ldi	r24, 0xFB	; 251
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
		UART_sendByte(key);
    1480:	89 ad       	ldd	r24, Y+57	; 0x39
    1482:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	aa ef       	ldi	r26, 0xFA	; 250
    148c:	b3 e4       	ldi	r27, 0x43	; 67
    148e:	8d ab       	std	Y+53, r24	; 0x35
    1490:	9e ab       	std	Y+54, r25	; 0x36
    1492:	af ab       	std	Y+55, r26	; 0x37
    1494:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	6d a9       	ldd	r22, Y+53	; 0x35
    1498:	7e a9       	ldd	r23, Y+54	; 0x36
    149a:	8f a9       	ldd	r24, Y+55	; 0x37
    149c:	98 ad       	ldd	r25, Y+56	; 0x38
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a ef       	ldi	r20, 0xFA	; 250
    14a4:	54 e4       	ldi	r21, 0x44	; 68
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	89 ab       	std	Y+49, r24	; 0x31
    14b0:	9a ab       	std	Y+50, r25	; 0x32
    14b2:	ab ab       	std	Y+51, r26	; 0x33
    14b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14b6:	69 a9       	ldd	r22, Y+49	; 0x31
    14b8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ba:	8b a9       	ldd	r24, Y+51	; 0x33
    14bc:	9c a9       	ldd	r25, Y+52	; 0x34
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <enterpassword+0xac>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	98 ab       	std	Y+48, r25	; 0x30
    14d4:	8f a7       	std	Y+47, r24	; 0x2f
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <enterpassword+0x12a>
	else if (__tmp > 65535)
    14d8:	69 a9       	ldd	r22, Y+49	; 0x31
    14da:	7a a9       	ldd	r23, Y+50	; 0x32
    14dc:	8b a9       	ldd	r24, Y+51	; 0x33
    14de:	9c a9       	ldd	r25, Y+52	; 0x34
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	4c f5       	brge	.+82     	; 0x1542 <enterpassword+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	6d a9       	ldd	r22, Y+53	; 0x35
    14f2:	7e a9       	ldd	r23, Y+54	; 0x36
    14f4:	8f a9       	ldd	r24, Y+55	; 0x37
    14f6:	98 ad       	ldd	r25, Y+56	; 0x38
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	98 ab       	std	Y+48, r25	; 0x30
    1516:	8f a7       	std	Y+47, r24	; 0x2f
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <enterpassword+0x10c>
    151a:	88 ec       	ldi	r24, 0xC8	; 200
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9e a7       	std	Y+46, r25	; 0x2e
    1520:	8d a7       	std	Y+45, r24	; 0x2d
    1522:	8d a5       	ldd	r24, Y+45	; 0x2d
    1524:	9e a5       	ldd	r25, Y+46	; 0x2e
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <enterpassword+0xfa>
    152a:	9e a7       	std	Y+46, r25	; 0x2e
    152c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	98 ab       	std	Y+48, r25	; 0x30
    1536:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	8f a5       	ldd	r24, Y+47	; 0x2f
    153a:	98 a9       	ldd	r25, Y+48	; 0x30
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f7       	brne	.-38     	; 0x151a <enterpassword+0xee>
    1540:	14 c0       	rjmp	.+40     	; 0x156a <enterpassword+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	69 a9       	ldd	r22, Y+49	; 0x31
    1544:	7a a9       	ldd	r23, Y+50	; 0x32
    1546:	8b a9       	ldd	r24, Y+51	; 0x33
    1548:	9c a9       	ldd	r25, Y+52	; 0x34
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	98 ab       	std	Y+48, r25	; 0x30
    1554:	8f a7       	std	Y+47, r24	; 0x2f
    1556:	8f a5       	ldd	r24, Y+47	; 0x2f
    1558:	98 a9       	ldd	r25, Y+48	; 0x30
    155a:	9c a7       	std	Y+44, r25	; 0x2c
    155c:	8b a7       	std	Y+43, r24	; 0x2b
    155e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1560:	9c a5       	ldd	r25, Y+44	; 0x2c
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <enterpassword+0x136>
    1566:	9c a7       	std	Y+44, r25	; 0x2c
    1568:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
			}
	if(!((key <= 9) && (key >= 0))){
    156a:	89 ad       	ldd	r24, Y+57	; 0x39
    156c:	8a 30       	cpi	r24, 0x0A	; 10
    156e:	08 f4       	brcc	.+2      	; 0x1572 <enterpassword+0x146>
    1570:	73 c0       	rjmp	.+230    	; 0x1658 <enterpassword+0x22c>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	aa ef       	ldi	r26, 0xFA	; 250
    1578:	b3 e4       	ldi	r27, 0x43	; 67
    157a:	8f a3       	std	Y+39, r24	; 0x27
    157c:	98 a7       	std	Y+40, r25	; 0x28
    157e:	a9 a7       	std	Y+41, r26	; 0x29
    1580:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	6f a1       	ldd	r22, Y+39	; 0x27
    1584:	78 a5       	ldd	r23, Y+40	; 0x28
    1586:	89 a5       	ldd	r24, Y+41	; 0x29
    1588:	9a a5       	ldd	r25, Y+42	; 0x2a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a ef       	ldi	r20, 0xFA	; 250
    1590:	54 e4       	ldi	r21, 0x44	; 68
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8b a3       	std	Y+35, r24	; 0x23
    159c:	9c a3       	std	Y+36, r25	; 0x24
    159e:	ad a3       	std	Y+37, r26	; 0x25
    15a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	7c a1       	ldd	r23, Y+36	; 0x24
    15a6:	8d a1       	ldd	r24, Y+37	; 0x25
    15a8:	9e a1       	ldd	r25, Y+38	; 0x26
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <enterpassword+0x198>
		__ticks = 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9a a3       	std	Y+34, r25	; 0x22
    15c0:	89 a3       	std	Y+33, r24	; 0x21
    15c2:	3f c0       	rjmp	.+126    	; 0x1642 <enterpassword+0x216>
	else if (__tmp > 65535)
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	4c f5       	brge	.+82     	; 0x162e <enterpassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15dc:	6f a1       	ldd	r22, Y+39	; 0x27
    15de:	78 a5       	ldd	r23, Y+40	; 0x28
    15e0:	89 a5       	ldd	r24, Y+41	; 0x29
    15e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9a a3       	std	Y+34, r25	; 0x22
    1602:	89 a3       	std	Y+33, r24	; 0x21
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <enterpassword+0x1f8>
    1606:	88 ec       	ldi	r24, 0xC8	; 200
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	98 a3       	std	Y+32, r25	; 0x20
    160c:	8f 8f       	std	Y+31, r24	; 0x1f
    160e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1610:	98 a1       	ldd	r25, Y+32	; 0x20
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <enterpassword+0x1e6>
    1616:	98 a3       	std	Y+32, r25	; 0x20
    1618:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	9a a1       	ldd	r25, Y+34	; 0x22
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9a a3       	std	Y+34, r25	; 0x22
    1622:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	89 a1       	ldd	r24, Y+33	; 0x21
    1626:	9a a1       	ldd	r25, Y+34	; 0x22
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	69 f7       	brne	.-38     	; 0x1606 <enterpassword+0x1da>
    162c:	18 c0       	rjmp	.+48     	; 0x165e <enterpassword+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162e:	6b a1       	ldd	r22, Y+35	; 0x23
    1630:	7c a1       	ldd	r23, Y+36	; 0x24
    1632:	8d a1       	ldd	r24, Y+37	; 0x25
    1634:	9e a1       	ldd	r25, Y+38	; 0x26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	89 a1       	ldd	r24, Y+33	; 0x21
    1644:	9a a1       	ldd	r25, Y+34	; 0x22
    1646:	9e 8f       	std	Y+30, r25	; 0x1e
    1648:	8d 8f       	std	Y+29, r24	; 0x1d
    164a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <enterpassword+0x222>
    1652:	9e 8f       	std	Y+30, r25	; 0x1e
    1654:	8d 8f       	std	Y+29, r24	; 0x1d
    1656:	03 c0       	rjmp	.+6      	; 0x165e <enterpassword+0x232>
		_delay_ms(500);
		continue;
	}
	counter++;
    1658:	8a ad       	ldd	r24, Y+58	; 0x3a
    165a:	8f 5f       	subi	r24, 0xFF	; 255
    165c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 key = 0;
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);


	while(counter < 5 ){
    165e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1660:	85 30       	cpi	r24, 0x05	; 5
    1662:	08 f4       	brcc	.+2      	; 0x1666 <enterpassword+0x23a>
    1664:	fa ce       	rjmp	.-524    	; 0x145a <enterpassword+0x2e>


	}

	//PassStatus = UART_recieveByte(); it was working then stuck in set passwords then we commented it and put it in open door function
	key = KEYPAD_getPressedKey();
    1666:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    166a:	89 af       	std	Y+57, r24	; 0x39
    166c:	75 c0       	rjmp	.+234    	; 0x1758 <enterpassword+0x32c>
	while(key != '='){
		key = KEYPAD_getPressedKey();
    166e:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    1672:	89 af       	std	Y+57, r24	; 0x39
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	aa ef       	ldi	r26, 0xFA	; 250
    167a:	b3 e4       	ldi	r27, 0x43	; 67
    167c:	89 8f       	std	Y+25, r24	; 0x19
    167e:	9a 8f       	std	Y+26, r25	; 0x1a
    1680:	ab 8f       	std	Y+27, r26	; 0x1b
    1682:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	69 8d       	ldd	r22, Y+25	; 0x19
    1686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8d 8b       	std	Y+21, r24	; 0x15
    169e:	9e 8b       	std	Y+22, r25	; 0x16
    16a0:	af 8b       	std	Y+23, r26	; 0x17
    16a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a4:	6d 89       	ldd	r22, Y+21	; 0x15
    16a6:	7e 89       	ldd	r23, Y+22	; 0x16
    16a8:	8f 89       	ldd	r24, Y+23	; 0x17
    16aa:	98 8d       	ldd	r25, Y+24	; 0x18
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <enterpassword+0x29a>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 8b       	std	Y+20, r25	; 0x14
    16c2:	8b 8b       	std	Y+19, r24	; 0x13
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <enterpassword+0x318>
	else if (__tmp > 65535)
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <enterpassword+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	69 8d       	ldd	r22, Y+25	; 0x19
    16e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9c 8b       	std	Y+20, r25	; 0x14
    1704:	8b 8b       	std	Y+19, r24	; 0x13
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <enterpassword+0x2fa>
    1708:	88 ec       	ldi	r24, 0xC8	; 200
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a 8b       	std	Y+18, r25	; 0x12
    170e:	89 8b       	std	Y+17, r24	; 0x11
    1710:	89 89       	ldd	r24, Y+17	; 0x11
    1712:	9a 89       	ldd	r25, Y+18	; 0x12
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <enterpassword+0x2e8>
    1718:	9a 8b       	std	Y+18, r25	; 0x12
    171a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	9c 89       	ldd	r25, Y+20	; 0x14
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	8b 89       	ldd	r24, Y+19	; 0x13
    1728:	9c 89       	ldd	r25, Y+20	; 0x14
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <enterpassword+0x2dc>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <enterpassword+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6d 89       	ldd	r22, Y+21	; 0x15
    1732:	7e 89       	ldd	r23, Y+22	; 0x16
    1734:	8f 89       	ldd	r24, Y+23	; 0x17
    1736:	98 8d       	ldd	r25, Y+24	; 0x18
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9c 8b       	std	Y+20, r25	; 0x14
    1742:	8b 8b       	std	Y+19, r24	; 0x13
    1744:	8b 89       	ldd	r24, Y+19	; 0x13
    1746:	9c 89       	ldd	r25, Y+20	; 0x14
    1748:	98 8b       	std	Y+16, r25	; 0x10
    174a:	8f 87       	std	Y+15, r24	; 0x0f
    174c:	8f 85       	ldd	r24, Y+15	; 0x0f
    174e:	98 89       	ldd	r25, Y+16	; 0x10
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <enterpassword+0x324>
    1754:	98 8b       	std	Y+16, r25	; 0x10
    1756:	8f 87       	std	Y+15, r24	; 0x0f

	}

	//PassStatus = UART_recieveByte(); it was working then stuck in set passwords then we commented it and put it in open door function
	key = KEYPAD_getPressedKey();
	while(key != '='){
    1758:	89 ad       	ldd	r24, Y+57	; 0x39
    175a:	8d 33       	cpi	r24, 0x3D	; 61
    175c:	09 f0       	breq	.+2      	; 0x1760 <enterpassword+0x334>
    175e:	87 cf       	rjmp	.-242    	; 0x166e <enterpassword+0x242>
		key = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
	if(key == '='){
    1760:	89 ad       	ldd	r24, Y+57	; 0x39
    1762:	8d 33       	cpi	r24, 0x3D	; 61
    1764:	09 f0       	breq	.+2      	; 0x1768 <enterpassword+0x33c>
    1766:	77 c0       	rjmp	.+238    	; 0x1856 <enterpassword+0x42a>
					LCD_clearScreen();
    1768:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	aa ef       	ldi	r26, 0xFA	; 250
    1772:	b3 e4       	ldi	r27, 0x43	; 67
    1774:	8b 87       	std	Y+11, r24	; 0x0b
    1776:	9c 87       	std	Y+12, r25	; 0x0c
    1778:	ad 87       	std	Y+13, r26	; 0x0d
    177a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8f 83       	std	Y+7, r24	; 0x07
    1796:	98 87       	std	Y+8, r25	; 0x08
    1798:	a9 87       	std	Y+9, r26	; 0x09
    179a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <enterpassword+0x392>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <enterpassword+0x410>
	else if (__tmp > 65535)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <enterpassword+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <enterpassword+0x3f2>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <enterpassword+0x3e0>
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <enterpassword+0x3d4>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <enterpassword+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <enterpassword+0x41c>
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					UART_sendByte(HMI_SENT);
    1850:	84 e3       	ldi	r24, 0x34	; 52
    1852:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>

				}
}
    1856:	ea 96       	adiw	r28, 0x3a	; 58
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <re_enterpassword>:

void re_enterpassword(void){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	ea 97       	sbiw	r28, 0x3a	; 58
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
    187c:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 i = 0;
    187e:	19 ae       	std	Y+57, r1	; 0x39
	MatchedPass = 0x01;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	80 93 24 01 	sts	0x0124, r24
	LCD_displayString("plz re-enter the: ");
    1886:	8d ef       	ldi	r24, 0xFD	; 253
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
					LCD_moveCursor(1,0);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <LCD_moveCursor>
					LCD_displayString("same pass: ");
    1896:	80 e1       	ldi	r24, 0x10	; 16
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
					LCD_moveCursor(1,11);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	6b e0       	ldi	r22, 0x0B	; 11
    18a2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <LCD_moveCursor>
					counter = 0;
    18a6:	1a ae       	std	Y+58, r1	; 0x3a
    18a8:	07 c1       	rjmp	.+526    	; 0x1ab8 <re_enterpassword+0x250>
					while(counter < 5 ){

					   key = KEYPAD_getPressedKey();
    18aa:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    18ae:	80 93 33 01 	sts	0x0133, r24
						if((key <= 9) && (key >= 0))
    18b2:	80 91 33 01 	lds	r24, 0x0133
    18b6:	8a 30       	cpi	r24, 0x0A	; 10
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <re_enterpassword+0x54>
    18ba:	fe c0       	rjmp	.+508    	; 0x1ab8 <re_enterpassword+0x250>
							{
							Pass2[counter] = key;
    18bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	20 91 33 01 	lds	r18, 0x0133
    18c6:	fc 01       	movw	r30, r24
    18c8:	e3 5c       	subi	r30, 0xC3	; 195
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	20 83       	st	Z, r18

								LCD_displayString("*");   /* display the pressed keypad switch */
    18ce:	8b ef       	ldi	r24, 0xFB	; 251
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
								UART_sendByte(key);
    18d6:	80 91 33 01 	lds	r24, 0x0133
    18da:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	aa ef       	ldi	r26, 0xFA	; 250
    18e4:	b3 e4       	ldi	r27, 0x43	; 67
    18e6:	8d ab       	std	Y+53, r24	; 0x35
    18e8:	9e ab       	std	Y+54, r25	; 0x36
    18ea:	af ab       	std	Y+55, r26	; 0x37
    18ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6d a9       	ldd	r22, Y+53	; 0x35
    18f0:	7e a9       	ldd	r23, Y+54	; 0x36
    18f2:	8f a9       	ldd	r24, Y+55	; 0x37
    18f4:	98 ad       	ldd	r25, Y+56	; 0x38
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a ef       	ldi	r20, 0xFA	; 250
    18fc:	54 e4       	ldi	r21, 0x44	; 68
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	89 ab       	std	Y+49, r24	; 0x31
    1908:	9a ab       	std	Y+50, r25	; 0x32
    190a:	ab ab       	std	Y+51, r26	; 0x33
    190c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    190e:	69 a9       	ldd	r22, Y+49	; 0x31
    1910:	7a a9       	ldd	r23, Y+50	; 0x32
    1912:	8b a9       	ldd	r24, Y+51	; 0x33
    1914:	9c a9       	ldd	r25, Y+52	; 0x34
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <re_enterpassword+0xc8>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	98 ab       	std	Y+48, r25	; 0x30
    192c:	8f a7       	std	Y+47, r24	; 0x2f
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <re_enterpassword+0x146>
	else if (__tmp > 65535)
    1930:	69 a9       	ldd	r22, Y+49	; 0x31
    1932:	7a a9       	ldd	r23, Y+50	; 0x32
    1934:	8b a9       	ldd	r24, Y+51	; 0x33
    1936:	9c a9       	ldd	r25, Y+52	; 0x34
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <re_enterpassword+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6d a9       	ldd	r22, Y+53	; 0x35
    194a:	7e a9       	ldd	r23, Y+54	; 0x36
    194c:	8f a9       	ldd	r24, Y+55	; 0x37
    194e:	98 ad       	ldd	r25, Y+56	; 0x38
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <re_enterpassword+0x128>
    1972:	88 ec       	ldi	r24, 0xC8	; 200
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9e a7       	std	Y+46, r25	; 0x2e
    1978:	8d a7       	std	Y+45, r24	; 0x2d
    197a:	8d a5       	ldd	r24, Y+45	; 0x2d
    197c:	9e a5       	ldd	r25, Y+46	; 0x2e
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <re_enterpassword+0x116>
    1982:	9e a7       	std	Y+46, r25	; 0x2e
    1984:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8f a5       	ldd	r24, Y+47	; 0x2f
    1988:	98 a9       	ldd	r25, Y+48	; 0x30
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	98 ab       	std	Y+48, r25	; 0x30
    198e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8f a5       	ldd	r24, Y+47	; 0x2f
    1992:	98 a9       	ldd	r25, Y+48	; 0x30
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <re_enterpassword+0x10a>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <re_enterpassword+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	69 a9       	ldd	r22, Y+49	; 0x31
    199c:	7a a9       	ldd	r23, Y+50	; 0x32
    199e:	8b a9       	ldd	r24, Y+51	; 0x33
    19a0:	9c a9       	ldd	r25, Y+52	; 0x34
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	98 ab       	std	Y+48, r25	; 0x30
    19ac:	8f a7       	std	Y+47, r24	; 0x2f
    19ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b0:	98 a9       	ldd	r25, Y+48	; 0x30
    19b2:	9c a7       	std	Y+44, r25	; 0x2c
    19b4:	8b a7       	std	Y+43, r24	; 0x2b
    19b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <re_enterpassword+0x152>
    19be:	9c a7       	std	Y+44, r25	; 0x2c
    19c0:	8b a7       	std	Y+43, r24	; 0x2b
								_delay_ms(500);

								if(!((key <= 9) && (key >= 0))){
    19c2:	80 91 33 01 	lds	r24, 0x0133
    19c6:	8a 30       	cpi	r24, 0x0A	; 10
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <re_enterpassword+0x164>
    19ca:	73 c0       	rjmp	.+230    	; 0x1ab2 <re_enterpassword+0x24a>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	aa ef       	ldi	r26, 0xFA	; 250
    19d2:	b3 e4       	ldi	r27, 0x43	; 67
    19d4:	8f a3       	std	Y+39, r24	; 0x27
    19d6:	98 a7       	std	Y+40, r25	; 0x28
    19d8:	a9 a7       	std	Y+41, r26	; 0x29
    19da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19dc:	6f a1       	ldd	r22, Y+39	; 0x27
    19de:	78 a5       	ldd	r23, Y+40	; 0x28
    19e0:	89 a5       	ldd	r24, Y+41	; 0x29
    19e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a ef       	ldi	r20, 0xFA	; 250
    19ea:	54 e4       	ldi	r21, 0x44	; 68
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8b a3       	std	Y+35, r24	; 0x23
    19f6:	9c a3       	std	Y+36, r25	; 0x24
    19f8:	ad a3       	std	Y+37, r26	; 0x25
    19fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19fc:	6b a1       	ldd	r22, Y+35	; 0x23
    19fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1a00:	8d a1       	ldd	r24, Y+37	; 0x25
    1a02:	9e a1       	ldd	r25, Y+38	; 0x26
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <re_enterpassword+0x1b6>
		__ticks = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	3f c0       	rjmp	.+126    	; 0x1a9c <re_enterpassword+0x234>
	else if (__tmp > 65535)
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	3f ef       	ldi	r19, 0xFF	; 255
    1a2a:	4f e7       	ldi	r20, 0x7F	; 127
    1a2c:	57 e4       	ldi	r21, 0x47	; 71
    1a2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	4c f5       	brge	.+82     	; 0x1a88 <re_enterpassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	6f a1       	ldd	r22, Y+39	; 0x27
    1a38:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9a a3       	std	Y+34, r25	; 0x22
    1a5c:	89 a3       	std	Y+33, r24	; 0x21
    1a5e:	0f c0       	rjmp	.+30     	; 0x1a7e <re_enterpassword+0x216>
    1a60:	88 ec       	ldi	r24, 0xC8	; 200
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	98 a3       	std	Y+32, r25	; 0x20
    1a66:	8f 8f       	std	Y+31, r24	; 0x1f
    1a68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <re_enterpassword+0x204>
    1a70:	98 a3       	std	Y+32, r25	; 0x20
    1a72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	89 a1       	ldd	r24, Y+33	; 0x21
    1a76:	9a a1       	ldd	r25, Y+34	; 0x22
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	9a a3       	std	Y+34, r25	; 0x22
    1a7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a80:	9a a1       	ldd	r25, Y+34	; 0x22
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <re_enterpassword+0x1f8>
    1a86:	18 c0       	rjmp	.+48     	; 0x1ab8 <re_enterpassword+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9a a3       	std	Y+34, r25	; 0x22
    1a9a:	89 a3       	std	Y+33, r24	; 0x21
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa0:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa2:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <re_enterpassword+0x240>
    1aac:	9e 8f       	std	Y+30, r25	; 0x1e
    1aae:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <re_enterpassword+0x250>
										_delay_ms(500);
										continue;
									}
							counter++;
    1ab2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	8a af       	std	Y+58, r24	; 0x3a
	LCD_displayString("plz re-enter the: ");
					LCD_moveCursor(1,0);
					LCD_displayString("same pass: ");
					LCD_moveCursor(1,11);
					counter = 0;
					while(counter < 5 ){
    1ab8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aba:	85 30       	cpi	r24, 0x05	; 5
    1abc:	08 f4       	brcc	.+2      	; 0x1ac0 <re_enterpassword+0x258>
    1abe:	f5 ce       	rjmp	.-534    	; 0x18aa <re_enterpassword+0x42>
							counter++;
							}

						}

					key = KEYPAD_getPressedKey();
    1ac0:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    1ac4:	80 93 33 01 	sts	0x0133, r24
    1ac8:	76 c0       	rjmp	.+236    	; 0x1bb6 <re_enterpassword+0x34e>
						while(key != '='){
							key = KEYPAD_getPressedKey();
    1aca:	0e 94 be 11 	call	0x237c	; 0x237c <KEYPAD_getPressedKey>
    1ace:	80 93 33 01 	sts	0x0133, r24
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	aa ef       	ldi	r26, 0xFA	; 250
    1ad8:	b3 e4       	ldi	r27, 0x43	; 67
    1ada:	89 8f       	std	Y+25, r24	; 0x19
    1adc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ade:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a ef       	ldi	r20, 0xFA	; 250
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
    1afc:	9e 8b       	std	Y+22, r25	; 0x16
    1afe:	af 8b       	std	Y+23, r26	; 0x17
    1b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b02:	6d 89       	ldd	r22, Y+21	; 0x15
    1b04:	7e 89       	ldd	r23, Y+22	; 0x16
    1b06:	8f 89       	ldd	r24, Y+23	; 0x17
    1b08:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <re_enterpassword+0x2bc>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 8b       	std	Y+20, r25	; 0x14
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <re_enterpassword+0x33a>
	else if (__tmp > 65535)
    1b24:	6d 89       	ldd	r22, Y+21	; 0x15
    1b26:	7e 89       	ldd	r23, Y+22	; 0x16
    1b28:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <re_enterpassword+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <re_enterpassword+0x31c>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
    1b6e:	89 89       	ldd	r24, Y+17	; 0x11
    1b70:	9a 89       	ldd	r25, Y+18	; 0x12
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <re_enterpassword+0x30a>
    1b76:	9a 8b       	std	Y+18, r25	; 0x12
    1b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8b 89       	ldd	r24, Y+19	; 0x13
    1b86:	9c 89       	ldd	r25, Y+20	; 0x14
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <re_enterpassword+0x2fe>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <re_enterpassword+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b90:	7e 89       	ldd	r23, Y+22	; 0x16
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	98 89       	ldd	r25, Y+16	; 0x10
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <re_enterpassword+0x346>
    1bb2:	98 8b       	std	Y+16, r25	; 0x10
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
							}

						}

					key = KEYPAD_getPressedKey();
						while(key != '='){
    1bb6:	80 91 33 01 	lds	r24, 0x0133
    1bba:	8d 33       	cpi	r24, 0x3D	; 61
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <re_enterpassword+0x358>
    1bbe:	85 cf       	rjmp	.-246    	; 0x1aca <re_enterpassword+0x262>
							key = KEYPAD_getPressedKey();
							_delay_ms(500);
						}
						if(key == '='){
    1bc0:	80 91 33 01 	lds	r24, 0x0133
    1bc4:	8d 33       	cpi	r24, 0x3D	; 61
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <re_enterpassword+0x362>
    1bc8:	77 c0       	rjmp	.+238    	; 0x1cb8 <re_enterpassword+0x450>
										LCD_clearScreen();
    1bca:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <LCD_clearScreen>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	aa ef       	ldi	r26, 0xFA	; 250
    1bd4:	b3 e4       	ldi	r27, 0x43	; 67
    1bd6:	8b 87       	std	Y+11, r24	; 0x0b
    1bd8:	9c 87       	std	Y+12, r25	; 0x0c
    1bda:	ad 87       	std	Y+13, r26	; 0x0d
    1bdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
    1bf8:	98 87       	std	Y+8, r25	; 0x08
    1bfa:	a9 87       	std	Y+9, r26	; 0x09
    1bfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <re_enterpassword+0x3b8>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <re_enterpassword+0x436>
	else if (__tmp > 65535)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	4c f5       	brge	.+82     	; 0x1c8a <re_enterpassword+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <re_enterpassword+0x418>
    1c62:	88 ec       	ldi	r24, 0xC8	; 200
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <re_enterpassword+0x406>
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <re_enterpassword+0x3fa>
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <re_enterpassword+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <re_enterpassword+0x442>
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
										_delay_ms(500);
										UART_sendByte(HMI_SENT);
    1cb2:	84 e3       	ldi	r24, 0x34	; 52
    1cb4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
									}
						for(i = 0; i<5; i++){
    1cb8:	19 ae       	std	Y+57, r1	; 0x39
    1cba:	16 c0       	rjmp	.+44     	; 0x1ce8 <re_enterpassword+0x480>
										if(Pass1[i] == Pass2[i]){
    1cbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	ee 5b       	subi	r30, 0xBE	; 190
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	20 81       	ld	r18, Z
    1cca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e3 5c       	subi	r30, 0xC3	; 195
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 17       	cp	r18, r24
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <re_enterpassword+0x47a>

											continue;
										}
										else{
											MatchedPass = 0x00;
    1cdc:	10 92 24 01 	sts	0x0124, r1
    1ce0:	06 c0       	rjmp	.+12     	; 0x1cee <re_enterpassword+0x486>
						if(key == '='){
										LCD_clearScreen();
										_delay_ms(500);
										UART_sendByte(HMI_SENT);
									}
						for(i = 0; i<5; i++){
    1ce2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	89 af       	std	Y+57, r24	; 0x39
    1ce8:	89 ad       	ldd	r24, Y+57	; 0x39
    1cea:	85 30       	cpi	r24, 0x05	; 5
    1cec:	38 f3       	brcs	.-50     	; 0x1cbc <re_enterpassword+0x454>
											break;

										}

}
}
    1cee:	ea 96       	adiw	r28, 0x3a	; 58
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <GPIO_setupPinDirection+0x6>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <GPIO_setupPinDirection+0x8>
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	6a 83       	std	Y+2, r22	; 0x02
    1d12:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <GPIO_setupPinDirection+0x1c>
    1d1a:	d5 c0       	rjmp	.+426    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	84 30       	cpi	r24, 0x04	; 4
    1d20:	08 f0       	brcs	.+2      	; 0x1d24 <GPIO_setupPinDirection+0x24>
    1d22:	d1 c0       	rjmp	.+418    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	3d 83       	std	Y+5, r19	; 0x05
    1d2c:	2c 83       	std	Y+4, r18	; 0x04
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	9d 81       	ldd	r25, Y+5	; 0x05
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	91 05       	cpc	r25, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <GPIO_setupPinDirection+0x3a>
    1d38:	43 c0       	rjmp	.+134    	; 0x1dc0 <GPIO_setupPinDirection+0xc0>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <GPIO_setupPinDirection+0x4e>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	71 f0       	breq	.+28     	; 0x1d68 <GPIO_setupPinDirection+0x68>
    1d4c:	bc c0       	rjmp	.+376    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <GPIO_setupPinDirection+0x5a>
    1d58:	5f c0       	rjmp	.+190    	; 0x1e18 <GPIO_setupPinDirection+0x118>
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <GPIO_setupPinDirection+0x66>
    1d64:	85 c0       	rjmp	.+266    	; 0x1e70 <GPIO_setupPinDirection+0x170>
    1d66:	af c0       	rjmp	.+350    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d6e:	aa e3       	ldi	r26, 0x3A	; 58
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ea e3       	ldi	r30, 0x3A	; 58
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_setupPinDirection+0x8c>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_setupPinDirection+0x88>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	98 c0       	rjmp	.+304    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d96:	aa e3       	ldi	r26, 0x3A	; 58
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ea e3       	ldi	r30, 0x3A	; 58
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_setupPinDirection+0xb4>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_setupPinDirection+0xb0>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	83 c0       	rjmp	.+262    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	a1 f4       	brne	.+40     	; 0x1dee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dc6:	a7 e3       	ldi	r26, 0x37	; 55
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e7 e3       	ldi	r30, 0x37	; 55
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_setupPinDirection+0xe4>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_setupPinDirection+0xe0>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	6c c0       	rjmp	.+216    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dee:	a7 e3       	ldi	r26, 0x37	; 55
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e3       	ldi	r30, 0x37	; 55
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_setupPinDirection+0x10c>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_setupPinDirection+0x108>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	57 c0       	rjmp	.+174    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	a1 f4       	brne	.+40     	; 0x1e46 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e1e:	a4 e3       	ldi	r26, 0x34	; 52
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e4 e3       	ldi	r30, 0x34	; 52
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <GPIO_setupPinDirection+0x13c>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <GPIO_setupPinDirection+0x138>
    1e40:	84 2b       	or	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	40 c0       	rjmp	.+128    	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e46:	a4 e3       	ldi	r26, 0x34	; 52
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e4 e3       	ldi	r30, 0x34	; 52
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	48 2f       	mov	r20, r24
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	02 2e       	mov	r0, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <GPIO_setupPinDirection+0x164>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	0a 94       	dec	r0
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <GPIO_setupPinDirection+0x160>
    1e68:	80 95       	com	r24
    1e6a:	84 23       	and	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	2b c0       	rjmp	.+86     	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	a1 f4       	brne	.+40     	; 0x1e9e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e76:	a1 e3       	ldi	r26, 0x31	; 49
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e1 e3       	ldi	r30, 0x31	; 49
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <GPIO_setupPinDirection+0x194>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <GPIO_setupPinDirection+0x190>
    1e98:	84 2b       	or	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e9e:	a1 e3       	ldi	r26, 0x31	; 49
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e1 e3       	ldi	r30, 0x31	; 49
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <GPIO_setupPinDirection+0x1bc>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <GPIO_setupPinDirection+0x1b8>
    1ec0:	80 95       	com	r24
    1ec2:	84 23       	and	r24, r20
    1ec4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <GPIO_writePin+0x6>
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <GPIO_writePin+0x8>
    1ede:	0f 92       	push	r0
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	6a 83       	std	Y+2, r22	; 0x02
    1ee8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	88 30       	cpi	r24, 0x08	; 8
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <GPIO_writePin+0x1c>
    1ef0:	d5 c0       	rjmp	.+426    	; 0x209c <GPIO_writePin+0x1c6>
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	84 30       	cpi	r24, 0x04	; 4
    1ef6:	08 f0       	brcs	.+2      	; 0x1efa <GPIO_writePin+0x24>
    1ef8:	d1 c0       	rjmp	.+418    	; 0x209c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3d 83       	std	Y+5, r19	; 0x05
    1f02:	2c 83       	std	Y+4, r18	; 0x04
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <GPIO_writePin+0x3a>
    1f0e:	43 c0       	rjmp	.+134    	; 0x1f96 <GPIO_writePin+0xc0>
    1f10:	2c 81       	ldd	r18, Y+4	; 0x04
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <GPIO_writePin+0x4e>
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	71 f0       	breq	.+28     	; 0x1f3e <GPIO_writePin+0x68>
    1f22:	bc c0       	rjmp	.+376    	; 0x209c <GPIO_writePin+0x1c6>
    1f24:	2c 81       	ldd	r18, Y+4	; 0x04
    1f26:	3d 81       	ldd	r19, Y+5	; 0x05
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <GPIO_writePin+0x5a>
    1f2e:	5f c0       	rjmp	.+190    	; 0x1fee <GPIO_writePin+0x118>
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <GPIO_writePin+0x66>
    1f3a:	85 c0       	rjmp	.+266    	; 0x2046 <GPIO_writePin+0x170>
    1f3c:	af c0       	rjmp	.+350    	; 0x209c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	a1 f4       	brne	.+40     	; 0x1f6c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f44:	ab e3       	ldi	r26, 0x3B	; 59
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	eb e3       	ldi	r30, 0x3B	; 59
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_writePin+0x8c>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <GPIO_writePin+0x88>
    1f66:	84 2b       	or	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	98 c0       	rjmp	.+304    	; 0x209c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f6c:	ab e3       	ldi	r26, 0x3B	; 59
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	eb e3       	ldi	r30, 0x3B	; 59
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_writePin+0xb4>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_writePin+0xb0>
    1f8e:	80 95       	com	r24
    1f90:	84 23       	and	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	83 c0       	rjmp	.+262    	; 0x209c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	a1 f4       	brne	.+40     	; 0x1fc4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f9c:	a8 e3       	ldi	r26, 0x38	; 56
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e8 e3       	ldi	r30, 0x38	; 56
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <GPIO_writePin+0xe4>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <GPIO_writePin+0xe0>
    1fbe:	84 2b       	or	r24, r20
    1fc0:	8c 93       	st	X, r24
    1fc2:	6c c0       	rjmp	.+216    	; 0x209c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fc4:	a8 e3       	ldi	r26, 0x38	; 56
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e8 e3       	ldi	r30, 0x38	; 56
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	48 2f       	mov	r20, r24
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 2e       	mov	r0, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <GPIO_writePin+0x10c>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	0a 94       	dec	r0
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <GPIO_writePin+0x108>
    1fe6:	80 95       	com	r24
    1fe8:	84 23       	and	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	57 c0       	rjmp	.+174    	; 0x209c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	a1 f4       	brne	.+40     	; 0x201c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ff4:	a5 e3       	ldi	r26, 0x35	; 53
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e5 e3       	ldi	r30, 0x35	; 53
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 2e       	mov	r0, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <GPIO_writePin+0x13c>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	0a 94       	dec	r0
    2014:	e2 f7       	brpl	.-8      	; 0x200e <GPIO_writePin+0x138>
    2016:	84 2b       	or	r24, r20
    2018:	8c 93       	st	X, r24
    201a:	40 c0       	rjmp	.+128    	; 0x209c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    201c:	a5 e3       	ldi	r26, 0x35	; 53
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e3       	ldi	r30, 0x35	; 53
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <GPIO_writePin+0x164>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <GPIO_writePin+0x160>
    203e:	80 95       	com	r24
    2040:	84 23       	and	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	2b c0       	rjmp	.+86     	; 0x209c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	a1 f4       	brne	.+40     	; 0x2074 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    204c:	a2 e3       	ldi	r26, 0x32	; 50
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e2 e3       	ldi	r30, 0x32	; 50
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <GPIO_writePin+0x194>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <GPIO_writePin+0x190>
    206e:	84 2b       	or	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	14 c0       	rjmp	.+40     	; 0x209c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2074:	a2 e3       	ldi	r26, 0x32	; 50
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e2 e3       	ldi	r30, 0x32	; 50
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <GPIO_writePin+0x1bc>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <GPIO_writePin+0x1b8>
    2096:	80 95       	com	r24
    2098:	84 23       	and	r24, r20
    209a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <GPIO_readPin+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <GPIO_readPin+0x8>
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	88 30       	cpi	r24, 0x08	; 8
    20c4:	08 f0       	brcs	.+2      	; 0x20c8 <GPIO_readPin+0x1c>
    20c6:	84 c0       	rjmp	.+264    	; 0x21d0 <GPIO_readPin+0x124>
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <GPIO_readPin+0x24>
    20ce:	80 c0       	rjmp	.+256    	; 0x21d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3d 83       	std	Y+5, r19	; 0x05
    20d8:	2c 83       	std	Y+4, r18	; 0x04
    20da:	4c 81       	ldd	r20, Y+4	; 0x04
    20dc:	5d 81       	ldd	r21, Y+5	; 0x05
    20de:	41 30       	cpi	r20, 0x01	; 1
    20e0:	51 05       	cpc	r21, r1
    20e2:	79 f1       	breq	.+94     	; 0x2142 <GPIO_readPin+0x96>
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	9d 81       	ldd	r25, Y+5	; 0x05
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	91 05       	cpc	r25, r1
    20ec:	34 f4       	brge	.+12     	; 0x20fa <GPIO_readPin+0x4e>
    20ee:	2c 81       	ldd	r18, Y+4	; 0x04
    20f0:	3d 81       	ldd	r19, Y+5	; 0x05
    20f2:	21 15       	cp	r18, r1
    20f4:	31 05       	cpc	r19, r1
    20f6:	69 f0       	breq	.+26     	; 0x2112 <GPIO_readPin+0x66>
    20f8:	6b c0       	rjmp	.+214    	; 0x21d0 <GPIO_readPin+0x124>
    20fa:	4c 81       	ldd	r20, Y+4	; 0x04
    20fc:	5d 81       	ldd	r21, Y+5	; 0x05
    20fe:	42 30       	cpi	r20, 0x02	; 2
    2100:	51 05       	cpc	r21, r1
    2102:	b9 f1       	breq	.+110    	; 0x2172 <GPIO_readPin+0xc6>
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	83 30       	cpi	r24, 0x03	; 3
    210a:	91 05       	cpc	r25, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <GPIO_readPin+0x64>
    210e:	49 c0       	rjmp	.+146    	; 0x21a2 <GPIO_readPin+0xf6>
    2110:	5f c0       	rjmp	.+190    	; 0x21d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2112:	e9 e3       	ldi	r30, 0x39	; 57
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a9 01       	movw	r20, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_readPin+0x7e>
    2126:	55 95       	asr	r21
    2128:	47 95       	ror	r20
    212a:	8a 95       	dec	r24
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_readPin+0x7a>
    212e:	ca 01       	movw	r24, r20
    2130:	81 70       	andi	r24, 0x01	; 1
    2132:	90 70       	andi	r25, 0x00	; 0
    2134:	88 23       	and	r24, r24
    2136:	19 f0       	breq	.+6      	; 0x213e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	49 c0       	rjmp	.+146    	; 0x21d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	47 c0       	rjmp	.+142    	; 0x21d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2142:	e6 e3       	ldi	r30, 0x36	; 54
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a9 01       	movw	r20, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GPIO_readPin+0xae>
    2156:	55 95       	asr	r21
    2158:	47 95       	ror	r20
    215a:	8a 95       	dec	r24
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <GPIO_readPin+0xaa>
    215e:	ca 01       	movw	r24, r20
    2160:	81 70       	andi	r24, 0x01	; 1
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	88 23       	and	r24, r24
    2166:	19 f0       	breq	.+6      	; 0x216e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	31 c0       	rjmp	.+98     	; 0x21d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    216e:	19 82       	std	Y+1, r1	; 0x01
    2170:	2f c0       	rjmp	.+94     	; 0x21d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2172:	e3 e3       	ldi	r30, 0x33	; 51
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a9 01       	movw	r20, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <GPIO_readPin+0xde>
    2186:	55 95       	asr	r21
    2188:	47 95       	ror	r20
    218a:	8a 95       	dec	r24
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <GPIO_readPin+0xda>
    218e:	ca 01       	movw	r24, r20
    2190:	81 70       	andi	r24, 0x01	; 1
    2192:	90 70       	andi	r25, 0x00	; 0
    2194:	88 23       	and	r24, r24
    2196:	19 f0       	breq	.+6      	; 0x219e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	19 c0       	rjmp	.+50     	; 0x21d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    219e:	19 82       	std	Y+1, r1	; 0x01
    21a0:	17 c0       	rjmp	.+46     	; 0x21d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21a2:	e0 e3       	ldi	r30, 0x30	; 48
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a9 01       	movw	r20, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <GPIO_readPin+0x10e>
    21b6:	55 95       	asr	r21
    21b8:	47 95       	ror	r20
    21ba:	8a 95       	dec	r24
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <GPIO_readPin+0x10a>
    21be:	ca 01       	movw	r24, r20
    21c0:	81 70       	andi	r24, 0x01	; 1
    21c2:	90 70       	andi	r25, 0x00	; 0
    21c4:	88 23       	and	r24, r24
    21c6:	19 f0       	breq	.+6      	; 0x21ce <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <GPIO_setupPortDirection+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <GPIO_setupPortDirection+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	90 f5       	brcc	.+100    	; 0x225c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	3c 83       	std	Y+4, r19	; 0x04
    2200:	2b 83       	std	Y+3, r18	; 0x03
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	91 05       	cpc	r25, r1
    220a:	d1 f0       	breq	.+52     	; 0x2240 <GPIO_setupPortDirection+0x5e>
    220c:	2b 81       	ldd	r18, Y+3	; 0x03
    220e:	3c 81       	ldd	r19, Y+4	; 0x04
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	2c f4       	brge	.+10     	; 0x2220 <GPIO_setupPortDirection+0x3e>
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	61 f0       	breq	.+24     	; 0x2236 <GPIO_setupPortDirection+0x54>
    221e:	1e c0       	rjmp	.+60     	; 0x225c <GPIO_setupPortDirection+0x7a>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	81 f0       	breq	.+32     	; 0x224a <GPIO_setupPortDirection+0x68>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	83 30       	cpi	r24, 0x03	; 3
    2230:	91 05       	cpc	r25, r1
    2232:	81 f0       	breq	.+32     	; 0x2254 <GPIO_setupPortDirection+0x72>
    2234:	13 c0       	rjmp	.+38     	; 0x225c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2236:	ea e3       	ldi	r30, 0x3A	; 58
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	80 83       	st	Z, r24
    223e:	0e c0       	rjmp	.+28     	; 0x225c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2240:	e7 e3       	ldi	r30, 0x37	; 55
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	80 83       	st	Z, r24
    2248:	09 c0       	rjmp	.+18     	; 0x225c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    224a:	e4 e3       	ldi	r30, 0x34	; 52
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	80 83       	st	Z, r24
    2252:	04 c0       	rjmp	.+8      	; 0x225c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2254:	e1 e3       	ldi	r30, 0x31	; 49
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	80 83       	st	Z, r24
			break;
		}
	}
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <GPIO_writePort+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <GPIO_writePort+0x8>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	90 f5       	brcc	.+100    	; 0x22e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3c 83       	std	Y+4, r19	; 0x04
    2288:	2b 83       	std	Y+3, r18	; 0x03
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	91 05       	cpc	r25, r1
    2292:	d1 f0       	breq	.+52     	; 0x22c8 <GPIO_writePort+0x5e>
    2294:	2b 81       	ldd	r18, Y+3	; 0x03
    2296:	3c 81       	ldd	r19, Y+4	; 0x04
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	2c f4       	brge	.+10     	; 0x22a8 <GPIO_writePort+0x3e>
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	61 f0       	breq	.+24     	; 0x22be <GPIO_writePort+0x54>
    22a6:	1e c0       	rjmp	.+60     	; 0x22e4 <GPIO_writePort+0x7a>
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	81 f0       	breq	.+32     	; 0x22d2 <GPIO_writePort+0x68>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	83 30       	cpi	r24, 0x03	; 3
    22b8:	91 05       	cpc	r25, r1
    22ba:	81 f0       	breq	.+32     	; 0x22dc <GPIO_writePort+0x72>
    22bc:	13 c0       	rjmp	.+38     	; 0x22e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22be:	eb e3       	ldi	r30, 0x3B	; 59
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	80 83       	st	Z, r24
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22c8:	e8 e3       	ldi	r30, 0x38	; 56
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	80 83       	st	Z, r24
    22d0:	09 c0       	rjmp	.+18     	; 0x22e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22d2:	e5 e3       	ldi	r30, 0x35	; 53
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	80 83       	st	Z, r24
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22dc:	e2 e3       	ldi	r30, 0x32	; 50
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <GPIO_readPort+0x6>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <GPIO_readPort+0x8>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2300:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	90 f5       	brcc	.+100    	; 0x236c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3c 83       	std	Y+4, r19	; 0x04
    2310:	2b 83       	std	Y+3, r18	; 0x03
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	d1 f0       	breq	.+52     	; 0x2350 <GPIO_readPort+0x5e>
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	2c f4       	brge	.+10     	; 0x2330 <GPIO_readPort+0x3e>
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	61 f0       	breq	.+24     	; 0x2346 <GPIO_readPort+0x54>
    232e:	1e c0       	rjmp	.+60     	; 0x236c <GPIO_readPort+0x7a>
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	81 f0       	breq	.+32     	; 0x235a <GPIO_readPort+0x68>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	83 30       	cpi	r24, 0x03	; 3
    2340:	91 05       	cpc	r25, r1
    2342:	81 f0       	breq	.+32     	; 0x2364 <GPIO_readPort+0x72>
    2344:	13 c0       	rjmp	.+38     	; 0x236c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2346:	e9 e3       	ldi	r30, 0x39	; 57
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	0e c0       	rjmp	.+28     	; 0x236c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2350:	e6 e3       	ldi	r30, 0x36	; 54
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	09 c0       	rjmp	.+18     	; 0x236c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    235a:	e3 e3       	ldi	r30, 0x33	; 51
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	04 c0       	rjmp	.+8      	; 0x236c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2364:	e0 e3       	ldi	r30, 0x30	; 48
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	60 97       	sbiw	r28, 0x10	; 16
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	64 e0       	ldi	r22, 0x04	; 4
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	65 e0       	ldi	r22, 0x05	; 5
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	66 e0       	ldi	r22, 0x06	; 6
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	67 e0       	ldi	r22, 0x07	; 7
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	64 e0       	ldi	r22, 0x04	; 4
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    23e0:	1f 86       	std	Y+15, r1	; 0x0f
    23e2:	b4 c0       	rjmp	.+360    	; 0x254c <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    23e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e6:	98 2f       	mov	r25, r24
    23e8:	9c 5f       	subi	r25, 0xFC	; 252
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	69 2f       	mov	r22, r25
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	98 2f       	mov	r25, r24
    23f8:	9c 5f       	subi	r25, 0xFC	; 252
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	69 2f       	mov	r22, r25
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2404:	18 8a       	std	Y+16, r1	; 0x10
    2406:	22 c0       	rjmp	.+68     	; 0x244c <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2408:	88 89       	ldd	r24, Y+16	; 0x10
    240a:	98 2f       	mov	r25, r24
    240c:	9e 5f       	subi	r25, 0xFE	; 254
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	69 2f       	mov	r22, r25
    2412:	0e 94 56 10 	call	0x20ac	; 0x20ac <GPIO_readPin>
    2416:	88 23       	and	r24, r24
    2418:	b1 f4       	brne	.+44     	; 0x2446 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	98 2f       	mov	r25, r24
    242a:	88 89       	ldd	r24, Y+16	; 0x10
    242c:	89 0f       	add	r24, r25
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	0e 94 ab 12 	call	0x2556	; 0x2556 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2434:	60 96       	adiw	r28, 0x10	; 16
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2446:	88 89       	ldd	r24, Y+16	; 0x10
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	88 8b       	std	Y+16, r24	; 0x10
    244c:	88 89       	ldd	r24, Y+16	; 0x10
    244e:	84 30       	cpi	r24, 0x04	; 4
    2450:	d8 f2       	brcs	.-74     	; 0x2408 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 2f       	mov	r25, r24
    2456:	9c 5f       	subi	r25, 0xFC	; 252
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	69 2f       	mov	r22, r25
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 ea       	ldi	r26, 0xA0	; 160
    2468:	b0 e4       	ldi	r27, 0x40	; 64
    246a:	8b 87       	std	Y+11, r24	; 0x0b
    246c:	9c 87       	std	Y+12, r25	; 0x0c
    246e:	ad 87       	std	Y+13, r26	; 0x0d
    2470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8f 83       	std	Y+7, r24	; 0x07
    248c:	98 87       	std	Y+8, r25	; 0x08
    248e:	a9 87       	std	Y+9, r26	; 0x09
    2490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <KEYPAD_getPressedKey+0x198>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <KEYPAD_getPressedKey+0x186>
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <KEYPAD_getPressedKey+0x17a>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <KEYPAD_getPressedKey+0x1c2>
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2546:	8f 85       	ldd	r24, Y+15	; 0x0f
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	8f 87       	std	Y+15, r24	; 0x0f
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	84 30       	cpi	r24, 0x04	; 4
    2550:	08 f4       	brcc	.+2      	; 0x2554 <KEYPAD_getPressedKey+0x1d8>
    2552:	48 cf       	rjmp	.-368    	; 0x23e4 <KEYPAD_getPressedKey+0x68>
    2554:	45 cf       	rjmp	.-374    	; 0x23e0 <KEYPAD_getPressedKey+0x64>

00002556 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <KEYPAD_4x4_adjustKeyNumber+0x6>
    255c:	00 d0       	rcall	.+0      	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x8>
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2564:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3c 83       	std	Y+4, r19	; 0x04
    256e:	2b 83       	std	Y+3, r18	; 0x03
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	88 30       	cpi	r24, 0x08	; 8
    2576:	91 05       	cpc	r25, r1
    2578:	09 f4       	brne	.+2      	; 0x257c <KEYPAD_4x4_adjustKeyNumber+0x26>
    257a:	70 c0       	rjmp	.+224    	; 0x265c <KEYPAD_4x4_adjustKeyNumber+0x106>
    257c:	2b 81       	ldd	r18, Y+3	; 0x03
    257e:	3c 81       	ldd	r19, Y+4	; 0x04
    2580:	29 30       	cpi	r18, 0x09	; 9
    2582:	31 05       	cpc	r19, r1
    2584:	5c f5       	brge	.+86     	; 0x25dc <KEYPAD_4x4_adjustKeyNumber+0x86>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	91 05       	cpc	r25, r1
    258e:	09 f4       	brne	.+2      	; 0x2592 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2590:	59 c0       	rjmp	.+178    	; 0x2644 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2592:	2b 81       	ldd	r18, Y+3	; 0x03
    2594:	3c 81       	ldd	r19, Y+4	; 0x04
    2596:	25 30       	cpi	r18, 0x05	; 5
    2598:	31 05       	cpc	r19, r1
    259a:	9c f4       	brge	.+38     	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	91 05       	cpc	r25, r1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    25a6:	48 c0       	rjmp	.+144    	; 0x2638 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	23 30       	cpi	r18, 0x03	; 3
    25ae:	31 05       	cpc	r19, r1
    25b0:	0c f0       	brlt	.+2      	; 0x25b4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25b2:	45 c0       	rjmp	.+138    	; 0x263e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25be:	39 c0       	rjmp	.+114    	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25c0:	67 c0       	rjmp	.+206    	; 0x2690 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25c2:	2b 81       	ldd	r18, Y+3	; 0x03
    25c4:	3c 81       	ldd	r19, Y+4	; 0x04
    25c6:	26 30       	cpi	r18, 0x06	; 6
    25c8:	31 05       	cpc	r19, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <KEYPAD_4x4_adjustKeyNumber+0x78>
    25cc:	41 c0       	rjmp	.+130    	; 0x2650 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	87 30       	cpi	r24, 0x07	; 7
    25d4:	91 05       	cpc	r25, r1
    25d6:	0c f0       	brlt	.+2      	; 0x25da <KEYPAD_4x4_adjustKeyNumber+0x84>
    25d8:	3e c0       	rjmp	.+124    	; 0x2656 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25da:	37 c0       	rjmp	.+110    	; 0x264a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25dc:	2b 81       	ldd	r18, Y+3	; 0x03
    25de:	3c 81       	ldd	r19, Y+4	; 0x04
    25e0:	2c 30       	cpi	r18, 0x0C	; 12
    25e2:	31 05       	cpc	r19, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    25e6:	46 c0       	rjmp	.+140    	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	8d 30       	cpi	r24, 0x0D	; 13
    25ee:	91 05       	cpc	r25, r1
    25f0:	5c f4       	brge	.+22     	; 0x2608 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    25f2:	2b 81       	ldd	r18, Y+3	; 0x03
    25f4:	3c 81       	ldd	r19, Y+4	; 0x04
    25f6:	2a 30       	cpi	r18, 0x0A	; 10
    25f8:	31 05       	cpc	r19, r1
    25fa:	b1 f1       	breq	.+108    	; 0x2668 <KEYPAD_4x4_adjustKeyNumber+0x112>
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	8b 30       	cpi	r24, 0x0B	; 11
    2602:	91 05       	cpc	r25, r1
    2604:	a4 f5       	brge	.+104    	; 0x266e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2606:	2d c0       	rjmp	.+90     	; 0x2662 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2608:	2b 81       	ldd	r18, Y+3	; 0x03
    260a:	3c 81       	ldd	r19, Y+4	; 0x04
    260c:	2e 30       	cpi	r18, 0x0E	; 14
    260e:	31 05       	cpc	r19, r1
    2610:	b9 f1       	breq	.+110    	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	8e 30       	cpi	r24, 0x0E	; 14
    2618:	91 05       	cpc	r25, r1
    261a:	7c f1       	brlt	.+94     	; 0x267a <KEYPAD_4x4_adjustKeyNumber+0x124>
    261c:	2b 81       	ldd	r18, Y+3	; 0x03
    261e:	3c 81       	ldd	r19, Y+4	; 0x04
    2620:	2f 30       	cpi	r18, 0x0F	; 15
    2622:	31 05       	cpc	r19, r1
    2624:	79 f1       	breq	.+94     	; 0x2684 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	80 31       	cpi	r24, 0x10	; 16
    262c:	91 05       	cpc	r25, r1
    262e:	69 f1       	breq	.+90     	; 0x268a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2630:	2f c0       	rjmp	.+94     	; 0x2690 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2632:	87 e0       	ldi	r24, 0x07	; 7
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	2e c0       	rjmp	.+92     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2638:	88 e0       	ldi	r24, 0x08	; 8
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	2b c0       	rjmp	.+86     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    263e:	89 e0       	ldi	r24, 0x09	; 9
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	28 c0       	rjmp	.+80     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2644:	85 e2       	ldi	r24, 0x25	; 37
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	25 c0       	rjmp	.+74     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    264a:	84 e0       	ldi	r24, 0x04	; 4
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	22 c0       	rjmp	.+68     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2650:	85 e0       	ldi	r24, 0x05	; 5
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	1f c0       	rjmp	.+62     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2656:	86 e0       	ldi	r24, 0x06	; 6
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	1c c0       	rjmp	.+56     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    265c:	8a e2       	ldi	r24, 0x2A	; 42
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	19 c0       	rjmp	.+50     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	16 c0       	rjmp	.+44     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    266e:	83 e0       	ldi	r24, 0x03	; 3
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	10 c0       	rjmp	.+32     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2674:	8d e2       	ldi	r24, 0x2D	; 45
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    267a:	8d e0       	ldi	r24, 0x0D	; 13
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	08 c0       	rjmp	.+16     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2684:	8d e3       	ldi	r24, 0x3D	; 61
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	05 c0       	rjmp	.+10     	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    268a:	8b e2       	ldi	r24, 0x2B	; 43
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	2e 97       	sbiw	r28, 0x0e	; 14
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	62 e0       	ldi	r22, 0x02	; 2
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 ea       	ldi	r26, 0xA0	; 160
    26d2:	b1 e4       	ldi	r27, 0x41	; 65
    26d4:	8b 87       	std	Y+11, r24	; 0x0b
    26d6:	9c 87       	std	Y+12, r25	; 0x0c
    26d8:	ad 87       	std	Y+13, r26	; 0x0d
    26da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26de:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	4a ef       	ldi	r20, 0xFA	; 250
    26ea:	54 e4       	ldi	r21, 0x44	; 68
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8f 83       	std	Y+7, r24	; 0x07
    26f6:	98 87       	std	Y+8, r25	; 0x08
    26f8:	a9 87       	std	Y+9, r26	; 0x09
    26fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	2c f4       	brge	.+10     	; 0x271e <LCD_init+0x7a>
		__ticks = 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	3f c0       	rjmp	.+126    	; 0x279c <LCD_init+0xf8>
	else if (__tmp > 65535)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	3f ef       	ldi	r19, 0xFF	; 255
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	57 e4       	ldi	r21, 0x47	; 71
    272e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	4c f5       	brge	.+82     	; 0x2788 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e2       	ldi	r20, 0x20	; 32
    2744:	51 e4       	ldi	r21, 0x41	; 65
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
    275e:	0f c0       	rjmp	.+30     	; 0x277e <LCD_init+0xda>
    2760:	88 ec       	ldi	r24, 0xC8	; 200
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_init+0xc8>
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	69 f7       	brne	.-38     	; 0x2760 <LCD_init+0xbc>
    2786:	14 c0       	rjmp	.+40     	; 0x27b0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_init+0x104>
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	63 e0       	ldi	r22, 0x03	; 3
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	64 e0       	ldi	r22, 0x04	; 4
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	65 e0       	ldi	r22, 0x05	; 5
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	66 e0       	ldi	r22, 0x06	; 6
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    27d8:	83 e3       	ldi	r24, 0x33	; 51
    27da:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    27de:	82 e3       	ldi	r24, 0x32	; 50
    27e0:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    27e4:	88 e2       	ldi	r24, 0x28	; 40
    27e6:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    27ea:	8c e0       	ldi	r24, 0x0C	; 12
    27ec:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
}
    27f6:	2e 96       	adiw	r28, 0x0e	; 14
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	c3 56       	subi	r28, 0x63	; 99
    2816:	d0 40       	sbci	r29, 0x00	; 0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	fe 01       	movw	r30, r28
    2824:	ed 59       	subi	r30, 0x9D	; 157
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    2834:	fe 01       	movw	r30, r28
    2836:	e1 5a       	subi	r30, 0xA1	; 161
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	8e 01       	movw	r16, r28
    284c:	05 5a       	subi	r16, 0xA5	; 165
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	fe 01       	movw	r30, r28
    2852:	e1 5a       	subi	r30, 0xA1	; 161
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a ef       	ldi	r20, 0xFA	; 250
    2864:	54 e4       	ldi	r21, 0x44	; 68
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	f8 01       	movw	r30, r16
    2870:	80 83       	st	Z, r24
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2878:	fe 01       	movw	r30, r28
    287a:	e5 5a       	subi	r30, 0xA5	; 165
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	44 f4       	brge	.+16     	; 0x28a6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2896:	fe 01       	movw	r30, r28
    2898:	e7 5a       	subi	r30, 0xA7	; 167
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
    28a4:	64 c0       	rjmp	.+200    	; 0x296e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    28a6:	fe 01       	movw	r30, r28
    28a8:	e5 5a       	subi	r30, 0xA5	; 165
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	0c f0       	brlt	.+2      	; 0x28c6 <LCD_sendCommand+0xbe>
    28c4:	43 c0       	rjmp	.+134    	; 0x294c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	fe 01       	movw	r30, r28
    28c8:	e1 5a       	subi	r30, 0xA1	; 161
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e2       	ldi	r20, 0x20	; 32
    28da:	51 e4       	ldi	r21, 0x41	; 65
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8e 01       	movw	r16, r28
    28e6:	07 5a       	subi	r16, 0xA7	; 167
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	80 83       	st	Z, r24
    28fc:	1f c0       	rjmp	.+62     	; 0x293c <LCD_sendCommand+0x134>
    28fe:	fe 01       	movw	r30, r28
    2900:	e9 5a       	subi	r30, 0xA9	; 169
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	88 ec       	ldi	r24, 0xC8	; 200
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	fe 01       	movw	r30, r28
    290e:	e9 5a       	subi	r30, 0xA9	; 169
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_sendCommand+0x10e>
    291a:	fe 01       	movw	r30, r28
    291c:	e9 5a       	subi	r30, 0xA9	; 169
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	de 01       	movw	r26, r28
    2926:	a7 5a       	subi	r26, 0xA7	; 167
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	e7 5a       	subi	r30, 0xA7	; 167
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	11 96       	adiw	r26, 0x01	; 1
    2938:	9c 93       	st	X, r25
    293a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293c:	fe 01       	movw	r30, r28
    293e:	e7 5a       	subi	r30, 0xA7	; 167
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	d1 f6       	brne	.-76     	; 0x28fe <LCD_sendCommand+0xf6>
    294a:	27 c0       	rjmp	.+78     	; 0x299a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	8e 01       	movw	r16, r28
    294e:	07 5a       	subi	r16, 0xA7	; 167
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	fe 01       	movw	r30, r28
    2954:	e5 5a       	subi	r30, 0xA5	; 165
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	91 83       	std	Z+1, r25	; 0x01
    296c:	80 83       	st	Z, r24
    296e:	de 01       	movw	r26, r28
    2970:	ab 5a       	subi	r26, 0xAB	; 171
    2972:	bf 4f       	sbci	r27, 0xFF	; 255
    2974:	fe 01       	movw	r30, r28
    2976:	e7 5a       	subi	r30, 0xA7	; 167
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	8d 93       	st	X+, r24
    2980:	9c 93       	st	X, r25
    2982:	fe 01       	movw	r30, r28
    2984:	eb 5a       	subi	r30, 0xAB	; 171
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_sendCommand+0x184>
    2990:	fe 01       	movw	r30, r28
    2992:	eb 5a       	subi	r30, 0xAB	; 171
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	62 e0       	ldi	r22, 0x02	; 2
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    29a4:	fe 01       	movw	r30, r28
    29a6:	ef 5a       	subi	r30, 0xAF	; 175
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	80 83       	st	Z, r24
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	a2 83       	std	Z+2, r26	; 0x02
    29b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	8e 01       	movw	r16, r28
    29bc:	03 5b       	subi	r16, 0xB3	; 179
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	ef 5a       	subi	r30, 0xAF	; 175
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a ef       	ldi	r20, 0xFA	; 250
    29d4:	54 e4       	ldi	r21, 0x44	; 68
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	f8 01       	movw	r30, r16
    29e0:	80 83       	st	Z, r24
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	a2 83       	std	Z+2, r26	; 0x02
    29e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29e8:	fe 01       	movw	r30, r28
    29ea:	e3 5b       	subi	r30, 0xB3	; 179
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	44 f4       	brge	.+16     	; 0x2a16 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2a06:	fe 01       	movw	r30, r28
    2a08:	e5 5b       	subi	r30, 0xB5	; 181
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
    2a14:	64 c0       	rjmp	.+200    	; 0x2ade <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2a16:	fe 01       	movw	r30, r28
    2a18:	e3 5b       	subi	r30, 0xB3	; 179
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	0c f0       	brlt	.+2      	; 0x2a36 <LCD_sendCommand+0x22e>
    2a34:	43 c0       	rjmp	.+134    	; 0x2abc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	fe 01       	movw	r30, r28
    2a38:	ef 5a       	subi	r30, 0xAF	; 175
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8e 01       	movw	r16, r28
    2a56:	05 5b       	subi	r16, 0xB5	; 181
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	f8 01       	movw	r30, r16
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	80 83       	st	Z, r24
    2a6c:	1f c0       	rjmp	.+62     	; 0x2aac <LCD_sendCommand+0x2a4>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e7 5b       	subi	r30, 0xB7	; 183
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 5b       	subi	r30, 0xB7	; 183
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_sendCommand+0x27e>
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e7 5b       	subi	r30, 0xB7	; 183
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	de 01       	movw	r26, r28
    2a96:	a5 5b       	subi	r26, 0xB5	; 181
    2a98:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e5 5b       	subi	r30, 0xB5	; 181
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	11 96       	adiw	r26, 0x01	; 1
    2aa8:	9c 93       	st	X, r25
    2aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	fe 01       	movw	r30, r28
    2aae:	e5 5b       	subi	r30, 0xB5	; 181
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	d1 f6       	brne	.-76     	; 0x2a6e <LCD_sendCommand+0x266>
    2aba:	27 c0       	rjmp	.+78     	; 0x2b0a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	8e 01       	movw	r16, r28
    2abe:	05 5b       	subi	r16, 0xB5	; 181
    2ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e3 5b       	subi	r30, 0xB3	; 179
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	f8 01       	movw	r30, r16
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	80 83       	st	Z, r24
    2ade:	de 01       	movw	r26, r28
    2ae0:	a9 5b       	subi	r26, 0xB9	; 185
    2ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 5b       	subi	r30, 0xB5	; 181
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	8d 93       	st	X+, r24
    2af0:	9c 93       	st	X, r25
    2af2:	fe 01       	movw	r30, r28
    2af4:	e9 5b       	subi	r30, 0xB9	; 185
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_sendCommand+0x2f4>
    2b00:	fe 01       	movw	r30, r28
    2b02:	e9 5b       	subi	r30, 0xB9	; 185
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ed 59       	subi	r30, 0x9D	; 157
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	80 71       	andi	r24, 0x10	; 16
    2b18:	90 70       	andi	r25, 0x00	; 0
    2b1a:	95 95       	asr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	95 95       	asr	r25
    2b20:	87 95       	ror	r24
    2b22:	95 95       	asr	r25
    2b24:	87 95       	ror	r24
    2b26:	95 95       	asr	r25
    2b28:	87 95       	ror	r24
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	63 e0       	ldi	r22, 0x03	; 3
    2b30:	49 2f       	mov	r20, r25
    2b32:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2b36:	fe 01       	movw	r30, r28
    2b38:	ed 59       	subi	r30, 0x9D	; 157
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	88 2f       	mov	r24, r24
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	80 72       	andi	r24, 0x20	; 32
    2b44:	90 70       	andi	r25, 0x00	; 0
    2b46:	95 95       	asr	r25
    2b48:	87 95       	ror	r24
    2b4a:	95 95       	asr	r25
    2b4c:	87 95       	ror	r24
    2b4e:	95 95       	asr	r25
    2b50:	87 95       	ror	r24
    2b52:	95 95       	asr	r25
    2b54:	87 95       	ror	r24
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	98 2f       	mov	r25, r24
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	49 2f       	mov	r20, r25
    2b62:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 59       	subi	r30, 0x9D	; 157
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	80 74       	andi	r24, 0x40	; 64
    2b74:	90 70       	andi	r25, 0x00	; 0
    2b76:	08 2e       	mov	r0, r24
    2b78:	89 2f       	mov	r24, r25
    2b7a:	00 0c       	add	r0, r0
    2b7c:	88 1f       	adc	r24, r24
    2b7e:	99 0b       	sbc	r25, r25
    2b80:	00 0c       	add	r0, r0
    2b82:	88 1f       	adc	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	98 2f       	mov	r25, r24
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	65 e0       	ldi	r22, 0x05	; 5
    2b8c:	49 2f       	mov	r20, r25
    2b8e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2b92:	fe 01       	movw	r30, r28
    2b94:	ed 59       	subi	r30, 0x9D	; 157
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	99 27       	eor	r25, r25
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	66 e0       	ldi	r22, 0x06	; 6
    2ba6:	49 2f       	mov	r20, r25
    2ba8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    2bac:	fe 01       	movw	r30, r28
    2bae:	ed 5b       	subi	r30, 0xBD	; 189
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e8       	ldi	r26, 0x80	; 128
    2bb8:	bf e3       	ldi	r27, 0x3F	; 63
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	01 5c       	subi	r16, 0xC1	; 193
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ed 5b       	subi	r30, 0xBD	; 189
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a ef       	ldi	r20, 0xFA	; 250
    2bdc:	54 e4       	ldi	r21, 0x44	; 68
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 83       	st	Z, r24
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	a2 83       	std	Z+2, r26	; 0x02
    2bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ff 96       	adiw	r30, 0x3f	; 63
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e8       	ldi	r20, 0x80	; 128
    2c02:	5f e3       	ldi	r21, 0x3F	; 63
    2c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c08:	88 23       	and	r24, r24
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9e af       	std	Y+62, r25	; 0x3e
    2c12:	8d af       	std	Y+61, r24	; 0x3d
    2c14:	46 c0       	rjmp	.+140    	; 0x2ca2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2c16:	fe 01       	movw	r30, r28
    2c18:	ff 96       	adiw	r30, 0x3f	; 63
    2c1a:	60 81       	ld	r22, Z
    2c1c:	71 81       	ldd	r23, Z+1	; 0x01
    2c1e:	82 81       	ldd	r24, Z+2	; 0x02
    2c20:	93 81       	ldd	r25, Z+3	; 0x03
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	64 f5       	brge	.+88     	; 0x2c8a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	fe 01       	movw	r30, r28
    2c34:	ed 5b       	subi	r30, 0xBD	; 189
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e af       	std	Y+62, r25	; 0x3e
    2c5e:	8d af       	std	Y+61, r24	; 0x3d
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <LCD_sendCommand+0x478>
    2c62:	88 ec       	ldi	r24, 0xC8	; 200
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c af       	std	Y+60, r25	; 0x3c
    2c68:	8b af       	std	Y+59, r24	; 0x3b
    2c6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_sendCommand+0x466>
    2c72:	9c af       	std	Y+60, r25	; 0x3c
    2c74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	9e af       	std	Y+62, r25	; 0x3e
    2c7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <LCD_sendCommand+0x45a>
    2c88:	16 c0       	rjmp	.+44     	; 0x2cb6 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ff 96       	adiw	r30, 0x3f	; 63
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e af       	std	Y+62, r25	; 0x3e
    2ca0:	8d af       	std	Y+61, r24	; 0x3d
    2ca2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ca4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ca6:	9a af       	std	Y+58, r25	; 0x3a
    2ca8:	89 af       	std	Y+57, r24	; 0x39
    2caa:	89 ad       	ldd	r24, Y+57	; 0x39
    2cac:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_sendCommand+0x4a6>
    2cb2:	9a af       	std	Y+58, r25	; 0x3a
    2cb4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e8       	ldi	r26, 0x80	; 128
    2cc6:	bf e3       	ldi	r27, 0x3F	; 63
    2cc8:	8d ab       	std	Y+53, r24	; 0x35
    2cca:	9e ab       	std	Y+54, r25	; 0x36
    2ccc:	af ab       	std	Y+55, r26	; 0x37
    2cce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a ef       	ldi	r20, 0xFA	; 250
    2cde:	54 e4       	ldi	r21, 0x44	; 68
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	89 ab       	std	Y+49, r24	; 0x31
    2cea:	9a ab       	std	Y+50, r25	; 0x32
    2cec:	ab ab       	std	Y+51, r26	; 0x33
    2cee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	98 ab       	std	Y+48, r25	; 0x30
    2d0e:	8f a7       	std	Y+47, r24	; 0x2f
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2d12:	69 a9       	ldd	r22, Y+49	; 0x31
    2d14:	7a a9       	ldd	r23, Y+50	; 0x32
    2d16:	8b a9       	ldd	r24, Y+51	; 0x33
    2d18:	9c a9       	ldd	r25, Y+52	; 0x34
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d30:	98 ad       	ldd	r25, Y+56	; 0x38
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	98 ab       	std	Y+48, r25	; 0x30
    2d50:	8f a7       	std	Y+47, r24	; 0x2f
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_sendCommand+0x56a>
    2d54:	88 ec       	ldi	r24, 0xC8	; 200
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e a7       	std	Y+46, r25	; 0x2e
    2d5a:	8d a7       	std	Y+45, r24	; 0x2d
    2d5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_sendCommand+0x558>
    2d64:	9e a7       	std	Y+46, r25	; 0x2e
    2d66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	98 ab       	std	Y+48, r25	; 0x30
    2d70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d74:	98 a9       	ldd	r25, Y+48	; 0x30
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <LCD_sendCommand+0x54c>
    2d7a:	14 c0       	rjmp	.+40     	; 0x2da4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d80:	8b a9       	ldd	r24, Y+51	; 0x33
    2d82:	9c a9       	ldd	r25, Y+52	; 0x34
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	98 ab       	std	Y+48, r25	; 0x30
    2d8e:	8f a7       	std	Y+47, r24	; 0x2f
    2d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d92:	98 a9       	ldd	r25, Y+48	; 0x30
    2d94:	9c a7       	std	Y+44, r25	; 0x2c
    2d96:	8b a7       	std	Y+43, r24	; 0x2b
    2d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_sendCommand+0x594>
    2da0:	9c a7       	std	Y+44, r25	; 0x2c
    2da2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	62 e0       	ldi	r22, 0x02	; 2
    2da8:	41 e0       	ldi	r20, 0x01	; 1
    2daa:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a0 e8       	ldi	r26, 0x80	; 128
    2db4:	bf e3       	ldi	r27, 0x3F	; 63
    2db6:	8f a3       	std	Y+39, r24	; 0x27
    2db8:	98 a7       	std	Y+40, r25	; 0x28
    2dba:	a9 a7       	std	Y+41, r26	; 0x29
    2dbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a ef       	ldi	r20, 0xFA	; 250
    2dcc:	54 e4       	ldi	r21, 0x44	; 68
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	8b a3       	std	Y+35, r24	; 0x23
    2dd8:	9c a3       	std	Y+36, r25	; 0x24
    2dda:	ad a3       	std	Y+37, r26	; 0x25
    2ddc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dde:	6b a1       	ldd	r22, Y+35	; 0x23
    2de0:	7c a1       	ldd	r23, Y+36	; 0x24
    2de2:	8d a1       	ldd	r24, Y+37	; 0x25
    2de4:	9e a1       	ldd	r25, Y+38	; 0x26
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	2c f4       	brge	.+10     	; 0x2e00 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9a a3       	std	Y+34, r25	; 0x22
    2dfc:	89 a3       	std	Y+33, r24	; 0x21
    2dfe:	3f c0       	rjmp	.+126    	; 0x2e7e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2e00:	6b a1       	ldd	r22, Y+35	; 0x23
    2e02:	7c a1       	ldd	r23, Y+36	; 0x24
    2e04:	8d a1       	ldd	r24, Y+37	; 0x25
    2e06:	9e a1       	ldd	r25, Y+38	; 0x26
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	4c f5       	brge	.+82     	; 0x2e6a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e18:	6f a1       	ldd	r22, Y+39	; 0x27
    2e1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	9a a3       	std	Y+34, r25	; 0x22
    2e3e:	89 a3       	std	Y+33, r24	; 0x21
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <LCD_sendCommand+0x658>
    2e42:	88 ec       	ldi	r24, 0xC8	; 200
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	98 a3       	std	Y+32, r25	; 0x20
    2e48:	8f 8f       	std	Y+31, r24	; 0x1f
    2e4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <LCD_sendCommand+0x646>
    2e52:	98 a3       	std	Y+32, r25	; 0x20
    2e54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e56:	89 a1       	ldd	r24, Y+33	; 0x21
    2e58:	9a a1       	ldd	r25, Y+34	; 0x22
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	9a a3       	std	Y+34, r25	; 0x22
    2e5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e60:	89 a1       	ldd	r24, Y+33	; 0x21
    2e62:	9a a1       	ldd	r25, Y+34	; 0x22
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	69 f7       	brne	.-38     	; 0x2e42 <LCD_sendCommand+0x63a>
    2e68:	14 c0       	rjmp	.+40     	; 0x2e92 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e70:	9e a1       	ldd	r25, Y+38	; 0x26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9a a3       	std	Y+34, r25	; 0x22
    2e7c:	89 a3       	std	Y+33, r24	; 0x21
    2e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e80:	9a a1       	ldd	r25, Y+34	; 0x22
    2e82:	9e 8f       	std	Y+30, r25	; 0x1e
    2e84:	8d 8f       	std	Y+29, r24	; 0x1d
    2e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_sendCommand+0x682>
    2e8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2e92:	fe 01       	movw	r30, r28
    2e94:	ed 59       	subi	r30, 0x9D	; 157
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	91 70       	andi	r25, 0x01	; 1
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	63 e0       	ldi	r22, 0x03	; 3
    2ea2:	49 2f       	mov	r20, r25
    2ea4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ed 59       	subi	r30, 0x9D	; 157
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	82 70       	andi	r24, 0x02	; 2
    2eb6:	90 70       	andi	r25, 0x00	; 0
    2eb8:	95 95       	asr	r25
    2eba:	87 95       	ror	r24
    2ebc:	98 2f       	mov	r25, r24
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	64 e0       	ldi	r22, 0x04	; 4
    2ec2:	49 2f       	mov	r20, r25
    2ec4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ed 59       	subi	r30, 0x9D	; 157
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	84 70       	andi	r24, 0x04	; 4
    2ed6:	90 70       	andi	r25, 0x00	; 0
    2ed8:	95 95       	asr	r25
    2eda:	87 95       	ror	r24
    2edc:	95 95       	asr	r25
    2ede:	87 95       	ror	r24
    2ee0:	98 2f       	mov	r25, r24
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	65 e0       	ldi	r22, 0x05	; 5
    2ee6:	49 2f       	mov	r20, r25
    2ee8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 59       	subi	r30, 0x9D	; 157
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	88 70       	andi	r24, 0x08	; 8
    2efa:	90 70       	andi	r25, 0x00	; 0
    2efc:	95 95       	asr	r25
    2efe:	87 95       	ror	r24
    2f00:	95 95       	asr	r25
    2f02:	87 95       	ror	r24
    2f04:	95 95       	asr	r25
    2f06:	87 95       	ror	r24
    2f08:	98 2f       	mov	r25, r24
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	66 e0       	ldi	r22, 0x06	; 6
    2f0e:	49 2f       	mov	r20, r25
    2f10:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a0 e8       	ldi	r26, 0x80	; 128
    2f1a:	bf e3       	ldi	r27, 0x3F	; 63
    2f1c:	89 8f       	std	Y+25, r24	; 0x19
    2f1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f20:	ab 8f       	std	Y+27, r26	; 0x1b
    2f22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f24:	69 8d       	ldd	r22, Y+25	; 0x19
    2f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a ef       	ldi	r20, 0xFA	; 250
    2f32:	54 e4       	ldi	r21, 0x44	; 68
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	8d 8b       	std	Y+21, r24	; 0x15
    2f3e:	9e 8b       	std	Y+22, r25	; 0x16
    2f40:	af 8b       	std	Y+23, r26	; 0x17
    2f42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f44:	6d 89       	ldd	r22, Y+21	; 0x15
    2f46:	7e 89       	ldd	r23, Y+22	; 0x16
    2f48:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e8       	ldi	r20, 0x80	; 128
    2f52:	5f e3       	ldi	r21, 0x3F	; 63
    2f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f58:	88 23       	and	r24, r24
    2f5a:	2c f4       	brge	.+10     	; 0x2f66 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	9c 8b       	std	Y+20, r25	; 0x14
    2f62:	8b 8b       	std	Y+19, r24	; 0x13
    2f64:	3f c0       	rjmp	.+126    	; 0x2fe4 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2f66:	6d 89       	ldd	r22, Y+21	; 0x15
    2f68:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	3f ef       	ldi	r19, 0xFF	; 255
    2f72:	4f e7       	ldi	r20, 0x7F	; 127
    2f74:	57 e4       	ldi	r21, 0x47	; 71
    2f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7a:	18 16       	cp	r1, r24
    2f7c:	4c f5       	brge	.+82     	; 0x2fd0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e2       	ldi	r20, 0x20	; 32
    2f8c:	51 e4       	ldi	r21, 0x41	; 65
    2f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	9c 8b       	std	Y+20, r25	; 0x14
    2fa4:	8b 8b       	std	Y+19, r24	; 0x13
    2fa6:	0f c0       	rjmp	.+30     	; 0x2fc6 <LCD_sendCommand+0x7be>
    2fa8:	88 ec       	ldi	r24, 0xC8	; 200
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9a 8b       	std	Y+18, r25	; 0x12
    2fae:	89 8b       	std	Y+17, r24	; 0x11
    2fb0:	89 89       	ldd	r24, Y+17	; 0x11
    2fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_sendCommand+0x7ac>
    2fb8:	9a 8b       	std	Y+18, r25	; 0x12
    2fba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	9c 8b       	std	Y+20, r25	; 0x14
    2fc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	69 f7       	brne	.-38     	; 0x2fa8 <LCD_sendCommand+0x7a0>
    2fce:	14 c0       	rjmp	.+40     	; 0x2ff8 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
    2fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe8:	98 8b       	std	Y+16, r25	; 0x10
    2fea:	8f 87       	std	Y+15, r24	; 0x0f
    2fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fee:	98 89       	ldd	r25, Y+16	; 0x10
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <LCD_sendCommand+0x7e8>
    2ff4:	98 8b       	std	Y+16, r25	; 0x10
    2ff6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	62 e0       	ldi	r22, 0x02	; 2
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e8       	ldi	r26, 0x80	; 128
    3008:	bf e3       	ldi	r27, 0x3F	; 63
    300a:	8b 87       	std	Y+11, r24	; 0x0b
    300c:	9c 87       	std	Y+12, r25	; 0x0c
    300e:	ad 87       	std	Y+13, r26	; 0x0d
    3010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a ef       	ldi	r20, 0xFA	; 250
    3020:	54 e4       	ldi	r21, 0x44	; 68
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8f 83       	std	Y+7, r24	; 0x07
    302c:	98 87       	std	Y+8, r25	; 0x08
    302e:	a9 87       	std	Y+9, r26	; 0x09
    3030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <LCD_sendCommand+0x84c>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6b 85       	ldd	r22, Y+11	; 0x0b
    306e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3070:	8d 85       	ldd	r24, Y+13	; 0x0d
    3072:	9e 85       	ldd	r25, Y+14	; 0x0e
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <LCD_sendCommand+0x8ac>
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <LCD_sendCommand+0x89a>
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <LCD_sendCommand+0x88e>
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_sendCommand+0x8d6>
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30e6:	cd 59       	subi	r28, 0x9D	; 157
    30e8:	df 4f       	sbci	r29, 0xFF	; 255
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	08 95       	ret

000030fe <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	c3 56       	subi	r28, 0x63	; 99
    310c:	d0 40       	sbci	r29, 0x00	; 0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	fe 01       	movw	r30, r28
    311a:	ed 59       	subi	r30, 0x9D	; 157
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	41 e0       	ldi	r20, 0x01	; 1
    3126:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    312a:	fe 01       	movw	r30, r28
    312c:	e1 5a       	subi	r30, 0xA1	; 161
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a0 e8       	ldi	r26, 0x80	; 128
    3136:	bf e3       	ldi	r27, 0x3F	; 63
    3138:	80 83       	st	Z, r24
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	a2 83       	std	Z+2, r26	; 0x02
    313e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3140:	8e 01       	movw	r16, r28
    3142:	05 5a       	subi	r16, 0xA5	; 165
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	fe 01       	movw	r30, r28
    3148:	e1 5a       	subi	r30, 0xA1	; 161
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a ef       	ldi	r20, 0xFA	; 250
    315a:	54 e4       	ldi	r21, 0x44	; 68
    315c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	f8 01       	movw	r30, r16
    3166:	80 83       	st	Z, r24
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	a2 83       	std	Z+2, r26	; 0x02
    316c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316e:	fe 01       	movw	r30, r28
    3170:	e5 5a       	subi	r30, 0xA5	; 165
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	60 81       	ld	r22, Z
    3176:	71 81       	ldd	r23, Z+1	; 0x01
    3178:	82 81       	ldd	r24, Z+2	; 0x02
    317a:	93 81       	ldd	r25, Z+3	; 0x03
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	5f e3       	ldi	r21, 0x3F	; 63
    3184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3188:	88 23       	and	r24, r24
    318a:	44 f4       	brge	.+16     	; 0x319c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    318c:	fe 01       	movw	r30, r28
    318e:	e7 5a       	subi	r30, 0xA7	; 167
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	91 83       	std	Z+1, r25	; 0x01
    3198:	80 83       	st	Z, r24
    319a:	64 c0       	rjmp	.+200    	; 0x3264 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    319c:	fe 01       	movw	r30, r28
    319e:	e5 5a       	subi	r30, 0xA5	; 165
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	93 81       	ldd	r25, Z+3	; 0x03
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	0c f0       	brlt	.+2      	; 0x31bc <LCD_displayCharacter+0xbe>
    31ba:	43 c0       	rjmp	.+134    	; 0x3242 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31bc:	fe 01       	movw	r30, r28
    31be:	e1 5a       	subi	r30, 0xA1	; 161
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	8e 01       	movw	r16, r28
    31dc:	07 5a       	subi	r16, 0xA7	; 167
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	f8 01       	movw	r30, r16
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	80 83       	st	Z, r24
    31f2:	1f c0       	rjmp	.+62     	; 0x3232 <LCD_displayCharacter+0x134>
    31f4:	fe 01       	movw	r30, r28
    31f6:	e9 5a       	subi	r30, 0xA9	; 169
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
    3202:	fe 01       	movw	r30, r28
    3204:	e9 5a       	subi	r30, 0xA9	; 169
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_displayCharacter+0x10e>
    3210:	fe 01       	movw	r30, r28
    3212:	e9 5a       	subi	r30, 0xA9	; 169
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321a:	de 01       	movw	r26, r28
    321c:	a7 5a       	subi	r26, 0xA7	; 167
    321e:	bf 4f       	sbci	r27, 0xFF	; 255
    3220:	fe 01       	movw	r30, r28
    3222:	e7 5a       	subi	r30, 0xA7	; 167
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	11 96       	adiw	r26, 0x01	; 1
    322e:	9c 93       	st	X, r25
    3230:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3232:	fe 01       	movw	r30, r28
    3234:	e7 5a       	subi	r30, 0xA7	; 167
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	d1 f6       	brne	.-76     	; 0x31f4 <LCD_displayCharacter+0xf6>
    3240:	27 c0       	rjmp	.+78     	; 0x3290 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3242:	8e 01       	movw	r16, r28
    3244:	07 5a       	subi	r16, 0xA7	; 167
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	fe 01       	movw	r30, r28
    324a:	e5 5a       	subi	r30, 0xA5	; 165
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	f8 01       	movw	r30, r16
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
    3264:	de 01       	movw	r26, r28
    3266:	ab 5a       	subi	r26, 0xAB	; 171
    3268:	bf 4f       	sbci	r27, 0xFF	; 255
    326a:	fe 01       	movw	r30, r28
    326c:	e7 5a       	subi	r30, 0xA7	; 167
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	8d 93       	st	X+, r24
    3276:	9c 93       	st	X, r25
    3278:	fe 01       	movw	r30, r28
    327a:	eb 5a       	subi	r30, 0xAB	; 171
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_displayCharacter+0x184>
    3286:	fe 01       	movw	r30, r28
    3288:	eb 5a       	subi	r30, 0xAB	; 171
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	62 e0       	ldi	r22, 0x02	; 2
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    329a:	fe 01       	movw	r30, r28
    329c:	ef 5a       	subi	r30, 0xAF	; 175
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	a0 e8       	ldi	r26, 0x80	; 128
    32a6:	bf e3       	ldi	r27, 0x3F	; 63
    32a8:	80 83       	st	Z, r24
    32aa:	91 83       	std	Z+1, r25	; 0x01
    32ac:	a2 83       	std	Z+2, r26	; 0x02
    32ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	8e 01       	movw	r16, r28
    32b2:	03 5b       	subi	r16, 0xB3	; 179
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	fe 01       	movw	r30, r28
    32b8:	ef 5a       	subi	r30, 0xAF	; 175
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a ef       	ldi	r20, 0xFA	; 250
    32ca:	54 e4       	ldi	r21, 0x44	; 68
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	f8 01       	movw	r30, r16
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	a2 83       	std	Z+2, r26	; 0x02
    32dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32de:	fe 01       	movw	r30, r28
    32e0:	e3 5b       	subi	r30, 0xB3	; 179
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	44 f4       	brge	.+16     	; 0x330c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    32fc:	fe 01       	movw	r30, r28
    32fe:	e5 5b       	subi	r30, 0xB5	; 181
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    330a:	64 c0       	rjmp	.+200    	; 0x33d4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    330c:	fe 01       	movw	r30, r28
    330e:	e3 5b       	subi	r30, 0xB3	; 179
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	3f ef       	ldi	r19, 0xFF	; 255
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	57 e4       	ldi	r21, 0x47	; 71
    3322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	0c f0       	brlt	.+2      	; 0x332c <LCD_displayCharacter+0x22e>
    332a:	43 c0       	rjmp	.+134    	; 0x33b2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332c:	fe 01       	movw	r30, r28
    332e:	ef 5a       	subi	r30, 0xAF	; 175
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8e 01       	movw	r16, r28
    334c:	05 5b       	subi	r16, 0xB5	; 181
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	f8 01       	movw	r30, r16
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	1f c0       	rjmp	.+62     	; 0x33a2 <LCD_displayCharacter+0x2a4>
    3364:	fe 01       	movw	r30, r28
    3366:	e7 5b       	subi	r30, 0xB7	; 183
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
    3372:	fe 01       	movw	r30, r28
    3374:	e7 5b       	subi	r30, 0xB7	; 183
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_displayCharacter+0x27e>
    3380:	fe 01       	movw	r30, r28
    3382:	e7 5b       	subi	r30, 0xB7	; 183
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338a:	de 01       	movw	r26, r28
    338c:	a5 5b       	subi	r26, 0xB5	; 181
    338e:	bf 4f       	sbci	r27, 0xFF	; 255
    3390:	fe 01       	movw	r30, r28
    3392:	e5 5b       	subi	r30, 0xB5	; 181
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	91 81       	ldd	r25, Z+1	; 0x01
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	9c 93       	st	X, r25
    33a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e5 5b       	subi	r30, 0xB5	; 181
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	d1 f6       	brne	.-76     	; 0x3364 <LCD_displayCharacter+0x266>
    33b0:	27 c0       	rjmp	.+78     	; 0x3400 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	8e 01       	movw	r16, r28
    33b4:	05 5b       	subi	r16, 0xB5	; 181
    33b6:	1f 4f       	sbci	r17, 0xFF	; 255
    33b8:	fe 01       	movw	r30, r28
    33ba:	e3 5b       	subi	r30, 0xB3	; 179
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	f8 01       	movw	r30, r16
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	de 01       	movw	r26, r28
    33d6:	a9 5b       	subi	r26, 0xB9	; 185
    33d8:	bf 4f       	sbci	r27, 0xFF	; 255
    33da:	fe 01       	movw	r30, r28
    33dc:	e5 5b       	subi	r30, 0xB5	; 181
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	8d 93       	st	X+, r24
    33e6:	9c 93       	st	X, r25
    33e8:	fe 01       	movw	r30, r28
    33ea:	e9 5b       	subi	r30, 0xB9	; 185
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	91 81       	ldd	r25, Z+1	; 0x01
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <LCD_displayCharacter+0x2f4>
    33f6:	fe 01       	movw	r30, r28
    33f8:	e9 5b       	subi	r30, 0xB9	; 185
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3400:	fe 01       	movw	r30, r28
    3402:	ed 59       	subi	r30, 0x9D	; 157
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 81       	ld	r24, Z
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	80 71       	andi	r24, 0x10	; 16
    340e:	90 70       	andi	r25, 0x00	; 0
    3410:	95 95       	asr	r25
    3412:	87 95       	ror	r24
    3414:	95 95       	asr	r25
    3416:	87 95       	ror	r24
    3418:	95 95       	asr	r25
    341a:	87 95       	ror	r24
    341c:	95 95       	asr	r25
    341e:	87 95       	ror	r24
    3420:	98 2f       	mov	r25, r24
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	63 e0       	ldi	r22, 0x03	; 3
    3426:	49 2f       	mov	r20, r25
    3428:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    342c:	fe 01       	movw	r30, r28
    342e:	ed 59       	subi	r30, 0x9D	; 157
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 81       	ld	r24, Z
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	80 72       	andi	r24, 0x20	; 32
    343a:	90 70       	andi	r25, 0x00	; 0
    343c:	95 95       	asr	r25
    343e:	87 95       	ror	r24
    3440:	95 95       	asr	r25
    3442:	87 95       	ror	r24
    3444:	95 95       	asr	r25
    3446:	87 95       	ror	r24
    3448:	95 95       	asr	r25
    344a:	87 95       	ror	r24
    344c:	95 95       	asr	r25
    344e:	87 95       	ror	r24
    3450:	98 2f       	mov	r25, r24
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	64 e0       	ldi	r22, 0x04	; 4
    3456:	49 2f       	mov	r20, r25
    3458:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    345c:	fe 01       	movw	r30, r28
    345e:	ed 59       	subi	r30, 0x9D	; 157
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	88 2f       	mov	r24, r24
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	80 74       	andi	r24, 0x40	; 64
    346a:	90 70       	andi	r25, 0x00	; 0
    346c:	08 2e       	mov	r0, r24
    346e:	89 2f       	mov	r24, r25
    3470:	00 0c       	add	r0, r0
    3472:	88 1f       	adc	r24, r24
    3474:	99 0b       	sbc	r25, r25
    3476:	00 0c       	add	r0, r0
    3478:	88 1f       	adc	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	98 2f       	mov	r25, r24
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	65 e0       	ldi	r22, 0x05	; 5
    3482:	49 2f       	mov	r20, r25
    3484:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3488:	fe 01       	movw	r30, r28
    348a:	ed 59       	subi	r30, 0x9D	; 157
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	98 2f       	mov	r25, r24
    3492:	99 1f       	adc	r25, r25
    3494:	99 27       	eor	r25, r25
    3496:	99 1f       	adc	r25, r25
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	66 e0       	ldi	r22, 0x06	; 6
    349c:	49 2f       	mov	r20, r25
    349e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 5b       	subi	r30, 0xBD	; 189
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e8       	ldi	r26, 0x80	; 128
    34ae:	bf e3       	ldi	r27, 0x3F	; 63
    34b0:	80 83       	st	Z, r24
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	a2 83       	std	Z+2, r26	; 0x02
    34b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	8e 01       	movw	r16, r28
    34ba:	01 5c       	subi	r16, 0xC1	; 193
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	ed 5b       	subi	r30, 0xBD	; 189
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a ef       	ldi	r20, 0xFA	; 250
    34d2:	54 e4       	ldi	r21, 0x44	; 68
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e6:	fe 01       	movw	r30, r28
    34e8:	ff 96       	adiw	r30, 0x3f	; 63
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34fe:	88 23       	and	r24, r24
    3500:	2c f4       	brge	.+10     	; 0x350c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9e af       	std	Y+62, r25	; 0x3e
    3508:	8d af       	std	Y+61, r24	; 0x3d
    350a:	46 c0       	rjmp	.+140    	; 0x3598 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    350c:	fe 01       	movw	r30, r28
    350e:	ff 96       	adiw	r30, 0x3f	; 63
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	64 f5       	brge	.+88     	; 0x3580 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	fe 01       	movw	r30, r28
    352a:	ed 5b       	subi	r30, 0xBD	; 189
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	60 81       	ld	r22, Z
    3530:	71 81       	ldd	r23, Z+1	; 0x01
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9e af       	std	Y+62, r25	; 0x3e
    3554:	8d af       	std	Y+61, r24	; 0x3d
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <LCD_displayCharacter+0x478>
    3558:	88 ec       	ldi	r24, 0xC8	; 200
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9c af       	std	Y+60, r25	; 0x3c
    355e:	8b af       	std	Y+59, r24	; 0x3b
    3560:	8b ad       	ldd	r24, Y+59	; 0x3b
    3562:	9c ad       	ldd	r25, Y+60	; 0x3c
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <LCD_displayCharacter+0x466>
    3568:	9c af       	std	Y+60, r25	; 0x3c
    356a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	8d ad       	ldd	r24, Y+61	; 0x3d
    356e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	9e af       	std	Y+62, r25	; 0x3e
    3574:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	8d ad       	ldd	r24, Y+61	; 0x3d
    3578:	9e ad       	ldd	r25, Y+62	; 0x3e
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <LCD_displayCharacter+0x45a>
    357e:	16 c0       	rjmp	.+44     	; 0x35ac <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	fe 01       	movw	r30, r28
    3582:	ff 96       	adiw	r30, 0x3f	; 63
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9e af       	std	Y+62, r25	; 0x3e
    3596:	8d af       	std	Y+61, r24	; 0x3d
    3598:	8d ad       	ldd	r24, Y+61	; 0x3d
    359a:	9e ad       	ldd	r25, Y+62	; 0x3e
    359c:	9a af       	std	Y+58, r25	; 0x3a
    359e:	89 af       	std	Y+57, r24	; 0x39
    35a0:	89 ad       	ldd	r24, Y+57	; 0x39
    35a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_displayCharacter+0x4a6>
    35a8:	9a af       	std	Y+58, r25	; 0x3a
    35aa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	62 e0       	ldi	r22, 0x02	; 2
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a0 e8       	ldi	r26, 0x80	; 128
    35bc:	bf e3       	ldi	r27, 0x3F	; 63
    35be:	8d ab       	std	Y+53, r24	; 0x35
    35c0:	9e ab       	std	Y+54, r25	; 0x36
    35c2:	af ab       	std	Y+55, r26	; 0x37
    35c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	6d a9       	ldd	r22, Y+53	; 0x35
    35c8:	7e a9       	ldd	r23, Y+54	; 0x36
    35ca:	8f a9       	ldd	r24, Y+55	; 0x37
    35cc:	98 ad       	ldd	r25, Y+56	; 0x38
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	4a ef       	ldi	r20, 0xFA	; 250
    35d4:	54 e4       	ldi	r21, 0x44	; 68
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	89 ab       	std	Y+49, r24	; 0x31
    35e0:	9a ab       	std	Y+50, r25	; 0x32
    35e2:	ab ab       	std	Y+51, r26	; 0x33
    35e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35e6:	69 a9       	ldd	r22, Y+49	; 0x31
    35e8:	7a a9       	ldd	r23, Y+50	; 0x32
    35ea:	8b a9       	ldd	r24, Y+51	; 0x33
    35ec:	9c a9       	ldd	r25, Y+52	; 0x34
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	98 ab       	std	Y+48, r25	; 0x30
    3604:	8f a7       	std	Y+47, r24	; 0x2f
    3606:	3f c0       	rjmp	.+126    	; 0x3686 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3608:	69 a9       	ldd	r22, Y+49	; 0x31
    360a:	7a a9       	ldd	r23, Y+50	; 0x32
    360c:	8b a9       	ldd	r24, Y+51	; 0x33
    360e:	9c a9       	ldd	r25, Y+52	; 0x34
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f e7       	ldi	r20, 0x7F	; 127
    3616:	57 e4       	ldi	r21, 0x47	; 71
    3618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    361c:	18 16       	cp	r1, r24
    361e:	4c f5       	brge	.+82     	; 0x3672 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3620:	6d a9       	ldd	r22, Y+53	; 0x35
    3622:	7e a9       	ldd	r23, Y+54	; 0x36
    3624:	8f a9       	ldd	r24, Y+55	; 0x37
    3626:	98 ad       	ldd	r25, Y+56	; 0x38
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	98 ab       	std	Y+48, r25	; 0x30
    3646:	8f a7       	std	Y+47, r24	; 0x2f
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <LCD_displayCharacter+0x56a>
    364a:	88 ec       	ldi	r24, 0xC8	; 200
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9e a7       	std	Y+46, r25	; 0x2e
    3650:	8d a7       	std	Y+45, r24	; 0x2d
    3652:	8d a5       	ldd	r24, Y+45	; 0x2d
    3654:	9e a5       	ldd	r25, Y+46	; 0x2e
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <LCD_displayCharacter+0x558>
    365a:	9e a7       	std	Y+46, r25	; 0x2e
    365c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3660:	98 a9       	ldd	r25, Y+48	; 0x30
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	98 ab       	std	Y+48, r25	; 0x30
    3666:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8f a5       	ldd	r24, Y+47	; 0x2f
    366a:	98 a9       	ldd	r25, Y+48	; 0x30
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <LCD_displayCharacter+0x54c>
    3670:	14 c0       	rjmp	.+40     	; 0x369a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	69 a9       	ldd	r22, Y+49	; 0x31
    3674:	7a a9       	ldd	r23, Y+50	; 0x32
    3676:	8b a9       	ldd	r24, Y+51	; 0x33
    3678:	9c a9       	ldd	r25, Y+52	; 0x34
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	98 ab       	std	Y+48, r25	; 0x30
    3684:	8f a7       	std	Y+47, r24	; 0x2f
    3686:	8f a5       	ldd	r24, Y+47	; 0x2f
    3688:	98 a9       	ldd	r25, Y+48	; 0x30
    368a:	9c a7       	std	Y+44, r25	; 0x2c
    368c:	8b a7       	std	Y+43, r24	; 0x2b
    368e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3690:	9c a5       	ldd	r25, Y+44	; 0x2c
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <LCD_displayCharacter+0x594>
    3696:	9c a7       	std	Y+44, r25	; 0x2c
    3698:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	62 e0       	ldi	r22, 0x02	; 2
    369e:	41 e0       	ldi	r20, 0x01	; 1
    36a0:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e8       	ldi	r26, 0x80	; 128
    36aa:	bf e3       	ldi	r27, 0x3F	; 63
    36ac:	8f a3       	std	Y+39, r24	; 0x27
    36ae:	98 a7       	std	Y+40, r25	; 0x28
    36b0:	a9 a7       	std	Y+41, r26	; 0x29
    36b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	6f a1       	ldd	r22, Y+39	; 0x27
    36b6:	78 a5       	ldd	r23, Y+40	; 0x28
    36b8:	89 a5       	ldd	r24, Y+41	; 0x29
    36ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	4a ef       	ldi	r20, 0xFA	; 250
    36c2:	54 e4       	ldi	r21, 0x44	; 68
    36c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	8b a3       	std	Y+35, r24	; 0x23
    36ce:	9c a3       	std	Y+36, r25	; 0x24
    36d0:	ad a3       	std	Y+37, r26	; 0x25
    36d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36d4:	6b a1       	ldd	r22, Y+35	; 0x23
    36d6:	7c a1       	ldd	r23, Y+36	; 0x24
    36d8:	8d a1       	ldd	r24, Y+37	; 0x25
    36da:	9e a1       	ldd	r25, Y+38	; 0x26
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e8       	ldi	r20, 0x80	; 128
    36e2:	5f e3       	ldi	r21, 0x3F	; 63
    36e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	2c f4       	brge	.+10     	; 0x36f6 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9a a3       	std	Y+34, r25	; 0x22
    36f2:	89 a3       	std	Y+33, r24	; 0x21
    36f4:	3f c0       	rjmp	.+126    	; 0x3774 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    36f6:	6b a1       	ldd	r22, Y+35	; 0x23
    36f8:	7c a1       	ldd	r23, Y+36	; 0x24
    36fa:	8d a1       	ldd	r24, Y+37	; 0x25
    36fc:	9e a1       	ldd	r25, Y+38	; 0x26
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	3f ef       	ldi	r19, 0xFF	; 255
    3702:	4f e7       	ldi	r20, 0x7F	; 127
    3704:	57 e4       	ldi	r21, 0x47	; 71
    3706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    370a:	18 16       	cp	r1, r24
    370c:	4c f5       	brge	.+82     	; 0x3760 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370e:	6f a1       	ldd	r22, Y+39	; 0x27
    3710:	78 a5       	ldd	r23, Y+40	; 0x28
    3712:	89 a5       	ldd	r24, Y+41	; 0x29
    3714:	9a a5       	ldd	r25, Y+42	; 0x2a
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e2       	ldi	r20, 0x20	; 32
    371c:	51 e4       	ldi	r21, 0x41	; 65
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	bc 01       	movw	r22, r24
    3728:	cd 01       	movw	r24, r26
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9a a3       	std	Y+34, r25	; 0x22
    3734:	89 a3       	std	Y+33, r24	; 0x21
    3736:	0f c0       	rjmp	.+30     	; 0x3756 <LCD_displayCharacter+0x658>
    3738:	88 ec       	ldi	r24, 0xC8	; 200
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	98 a3       	std	Y+32, r25	; 0x20
    373e:	8f 8f       	std	Y+31, r24	; 0x1f
    3740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3742:	98 a1       	ldd	r25, Y+32	; 0x20
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <LCD_displayCharacter+0x646>
    3748:	98 a3       	std	Y+32, r25	; 0x20
    374a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374c:	89 a1       	ldd	r24, Y+33	; 0x21
    374e:	9a a1       	ldd	r25, Y+34	; 0x22
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	9a a3       	std	Y+34, r25	; 0x22
    3754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3756:	89 a1       	ldd	r24, Y+33	; 0x21
    3758:	9a a1       	ldd	r25, Y+34	; 0x22
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	69 f7       	brne	.-38     	; 0x3738 <LCD_displayCharacter+0x63a>
    375e:	14 c0       	rjmp	.+40     	; 0x3788 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3760:	6b a1       	ldd	r22, Y+35	; 0x23
    3762:	7c a1       	ldd	r23, Y+36	; 0x24
    3764:	8d a1       	ldd	r24, Y+37	; 0x25
    3766:	9e a1       	ldd	r25, Y+38	; 0x26
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9a a3       	std	Y+34, r25	; 0x22
    3772:	89 a3       	std	Y+33, r24	; 0x21
    3774:	89 a1       	ldd	r24, Y+33	; 0x21
    3776:	9a a1       	ldd	r25, Y+34	; 0x22
    3778:	9e 8f       	std	Y+30, r25	; 0x1e
    377a:	8d 8f       	std	Y+29, r24	; 0x1d
    377c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    377e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <LCD_displayCharacter+0x682>
    3784:	9e 8f       	std	Y+30, r25	; 0x1e
    3786:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3788:	fe 01       	movw	r30, r28
    378a:	ed 59       	subi	r30, 0x9D	; 157
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	80 81       	ld	r24, Z
    3790:	98 2f       	mov	r25, r24
    3792:	91 70       	andi	r25, 0x01	; 1
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	63 e0       	ldi	r22, 0x03	; 3
    3798:	49 2f       	mov	r20, r25
    379a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    379e:	fe 01       	movw	r30, r28
    37a0:	ed 59       	subi	r30, 0x9D	; 157
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 81       	ld	r24, Z
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	82 70       	andi	r24, 0x02	; 2
    37ac:	90 70       	andi	r25, 0x00	; 0
    37ae:	95 95       	asr	r25
    37b0:	87 95       	ror	r24
    37b2:	98 2f       	mov	r25, r24
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	64 e0       	ldi	r22, 0x04	; 4
    37b8:	49 2f       	mov	r20, r25
    37ba:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    37be:	fe 01       	movw	r30, r28
    37c0:	ed 59       	subi	r30, 0x9D	; 157
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 81       	ld	r24, Z
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	84 70       	andi	r24, 0x04	; 4
    37cc:	90 70       	andi	r25, 0x00	; 0
    37ce:	95 95       	asr	r25
    37d0:	87 95       	ror	r24
    37d2:	95 95       	asr	r25
    37d4:	87 95       	ror	r24
    37d6:	98 2f       	mov	r25, r24
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	65 e0       	ldi	r22, 0x05	; 5
    37dc:	49 2f       	mov	r20, r25
    37de:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    37e2:	fe 01       	movw	r30, r28
    37e4:	ed 59       	subi	r30, 0x9D	; 157
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	88 70       	andi	r24, 0x08	; 8
    37f0:	90 70       	andi	r25, 0x00	; 0
    37f2:	95 95       	asr	r25
    37f4:	87 95       	ror	r24
    37f6:	95 95       	asr	r25
    37f8:	87 95       	ror	r24
    37fa:	95 95       	asr	r25
    37fc:	87 95       	ror	r24
    37fe:	98 2f       	mov	r25, r24
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	66 e0       	ldi	r22, 0x06	; 6
    3804:	49 2f       	mov	r20, r25
    3806:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 e8       	ldi	r26, 0x80	; 128
    3810:	bf e3       	ldi	r27, 0x3F	; 63
    3812:	89 8f       	std	Y+25, r24	; 0x19
    3814:	9a 8f       	std	Y+26, r25	; 0x1a
    3816:	ab 8f       	std	Y+27, r26	; 0x1b
    3818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381a:	69 8d       	ldd	r22, Y+25	; 0x19
    381c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    381e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	4a ef       	ldi	r20, 0xFA	; 250
    3828:	54 e4       	ldi	r21, 0x44	; 68
    382a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	8d 8b       	std	Y+21, r24	; 0x15
    3834:	9e 8b       	std	Y+22, r25	; 0x16
    3836:	af 8b       	std	Y+23, r26	; 0x17
    3838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    383a:	6d 89       	ldd	r22, Y+21	; 0x15
    383c:	7e 89       	ldd	r23, Y+22	; 0x16
    383e:	8f 89       	ldd	r24, Y+23	; 0x17
    3840:	98 8d       	ldd	r25, Y+24	; 0x18
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e8       	ldi	r20, 0x80	; 128
    3848:	5f e3       	ldi	r21, 0x3F	; 63
    384a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    384e:	88 23       	and	r24, r24
    3850:	2c f4       	brge	.+10     	; 0x385c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	9c 8b       	std	Y+20, r25	; 0x14
    3858:	8b 8b       	std	Y+19, r24	; 0x13
    385a:	3f c0       	rjmp	.+126    	; 0x38da <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    385c:	6d 89       	ldd	r22, Y+21	; 0x15
    385e:	7e 89       	ldd	r23, Y+22	; 0x16
    3860:	8f 89       	ldd	r24, Y+23	; 0x17
    3862:	98 8d       	ldd	r25, Y+24	; 0x18
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	3f ef       	ldi	r19, 0xFF	; 255
    3868:	4f e7       	ldi	r20, 0x7F	; 127
    386a:	57 e4       	ldi	r21, 0x47	; 71
    386c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3870:	18 16       	cp	r1, r24
    3872:	4c f5       	brge	.+82     	; 0x38c6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3874:	69 8d       	ldd	r22, Y+25	; 0x19
    3876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    387a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e2       	ldi	r20, 0x20	; 32
    3882:	51 e4       	ldi	r21, 0x41	; 65
    3884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9c 8b       	std	Y+20, r25	; 0x14
    389a:	8b 8b       	std	Y+19, r24	; 0x13
    389c:	0f c0       	rjmp	.+30     	; 0x38bc <LCD_displayCharacter+0x7be>
    389e:	88 ec       	ldi	r24, 0xC8	; 200
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	9a 8b       	std	Y+18, r25	; 0x12
    38a4:	89 8b       	std	Y+17, r24	; 0x11
    38a6:	89 89       	ldd	r24, Y+17	; 0x11
    38a8:	9a 89       	ldd	r25, Y+18	; 0x12
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <LCD_displayCharacter+0x7ac>
    38ae:	9a 8b       	std	Y+18, r25	; 0x12
    38b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b2:	8b 89       	ldd	r24, Y+19	; 0x13
    38b4:	9c 89       	ldd	r25, Y+20	; 0x14
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	9c 8b       	std	Y+20, r25	; 0x14
    38ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38bc:	8b 89       	ldd	r24, Y+19	; 0x13
    38be:	9c 89       	ldd	r25, Y+20	; 0x14
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	69 f7       	brne	.-38     	; 0x389e <LCD_displayCharacter+0x7a0>
    38c4:	14 c0       	rjmp	.+40     	; 0x38ee <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c6:	6d 89       	ldd	r22, Y+21	; 0x15
    38c8:	7e 89       	ldd	r23, Y+22	; 0x16
    38ca:	8f 89       	ldd	r24, Y+23	; 0x17
    38cc:	98 8d       	ldd	r25, Y+24	; 0x18
    38ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	9c 8b       	std	Y+20, r25	; 0x14
    38d8:	8b 8b       	std	Y+19, r24	; 0x13
    38da:	8b 89       	ldd	r24, Y+19	; 0x13
    38dc:	9c 89       	ldd	r25, Y+20	; 0x14
    38de:	98 8b       	std	Y+16, r25	; 0x10
    38e0:	8f 87       	std	Y+15, r24	; 0x0f
    38e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e4:	98 89       	ldd	r25, Y+16	; 0x10
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <LCD_displayCharacter+0x7e8>
    38ea:	98 8b       	std	Y+16, r25	; 0x10
    38ec:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	62 e0       	ldi	r22, 0x02	; 2
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <GPIO_writePin>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e8       	ldi	r26, 0x80	; 128
    38fe:	bf e3       	ldi	r27, 0x3F	; 63
    3900:	8b 87       	std	Y+11, r24	; 0x0b
    3902:	9c 87       	std	Y+12, r25	; 0x0c
    3904:	ad 87       	std	Y+13, r26	; 0x0d
    3906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6b 85       	ldd	r22, Y+11	; 0x0b
    390a:	7c 85       	ldd	r23, Y+12	; 0x0c
    390c:	8d 85       	ldd	r24, Y+13	; 0x0d
    390e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a ef       	ldi	r20, 0xFA	; 250
    3916:	54 e4       	ldi	r21, 0x44	; 68
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8f 83       	std	Y+7, r24	; 0x07
    3922:	98 87       	std	Y+8, r25	; 0x08
    3924:	a9 87       	std	Y+9, r26	; 0x09
    3926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3928:	6f 81       	ldd	r22, Y+7	; 0x07
    392a:	78 85       	ldd	r23, Y+8	; 0x08
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    394a:	6f 81       	ldd	r22, Y+7	; 0x07
    394c:	78 85       	ldd	r23, Y+8	; 0x08
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6b 85       	ldd	r22, Y+11	; 0x0b
    3964:	7c 85       	ldd	r23, Y+12	; 0x0c
    3966:	8d 85       	ldd	r24, Y+13	; 0x0d
    3968:	9e 85       	ldd	r25, Y+14	; 0x0e
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9e 83       	std	Y+6, r25	; 0x06
    3988:	8d 83       	std	Y+5, r24	; 0x05
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <LCD_displayCharacter+0x8ac>
    398c:	88 ec       	ldi	r24, 0xC8	; 200
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	9c 81       	ldd	r25, Y+4	; 0x04
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_displayCharacter+0x89a>
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
    39ac:	9e 81       	ldd	r25, Y+6	; 0x06
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <LCD_displayCharacter+0x88e>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_displayCharacter+0x8d6>
    39d8:	9a 83       	std	Y+2, r25	; 0x02
    39da:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    39dc:	cd 59       	subi	r28, 0x9D	; 157
    39de:	df 4f       	sbci	r29, 0xFF	; 255
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	08 95       	ret

000039f4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <LCD_displayString+0x6>
    39fa:	0f 92       	push	r0
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	9b 83       	std	Y+3, r25	; 0x03
    3a02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a04:	19 82       	std	Y+1, r1	; 0x01
    3a06:	0e c0       	rjmp	.+28     	; 0x3a24 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	fc 01       	movw	r30, r24
    3a14:	e2 0f       	add	r30, r18
    3a16:	f3 1f       	adc	r31, r19
    3a18:	80 81       	ld	r24, Z
    3a1a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_displayCharacter>
		i++;
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2e:	fc 01       	movw	r30, r24
    3a30:	e2 0f       	add	r30, r18
    3a32:	f3 1f       	adc	r31, r19
    3a34:	80 81       	ld	r24, Z
    3a36:	88 23       	and	r24, r24
    3a38:	39 f7       	brne	.-50     	; 0x3a08 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <LCD_moveCursor+0x6>
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <LCD_moveCursor+0x8>
    3a4e:	0f 92       	push	r0
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	8a 83       	std	Y+2, r24	; 0x02
    3a56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	3d 83       	std	Y+5, r19	; 0x05
    3a60:	2c 83       	std	Y+4, r18	; 0x04
    3a62:	8c 81       	ldd	r24, Y+4	; 0x04
    3a64:	9d 81       	ldd	r25, Y+5	; 0x05
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	91 05       	cpc	r25, r1
    3a6a:	c1 f0       	breq	.+48     	; 0x3a9c <LCD_moveCursor+0x56>
    3a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a70:	22 30       	cpi	r18, 0x02	; 2
    3a72:	31 05       	cpc	r19, r1
    3a74:	2c f4       	brge	.+10     	; 0x3a80 <LCD_moveCursor+0x3a>
    3a76:	8c 81       	ldd	r24, Y+4	; 0x04
    3a78:	9d 81       	ldd	r25, Y+5	; 0x05
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	61 f0       	breq	.+24     	; 0x3a96 <LCD_moveCursor+0x50>
    3a7e:	19 c0       	rjmp	.+50     	; 0x3ab2 <LCD_moveCursor+0x6c>
    3a80:	2c 81       	ldd	r18, Y+4	; 0x04
    3a82:	3d 81       	ldd	r19, Y+5	; 0x05
    3a84:	22 30       	cpi	r18, 0x02	; 2
    3a86:	31 05       	cpc	r19, r1
    3a88:	69 f0       	breq	.+26     	; 0x3aa4 <LCD_moveCursor+0x5e>
    3a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a8e:	83 30       	cpi	r24, 0x03	; 3
    3a90:	91 05       	cpc	r25, r1
    3a92:	61 f0       	breq	.+24     	; 0x3aac <LCD_moveCursor+0x66>
    3a94:	0e c0       	rjmp	.+28     	; 0x3ab2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	0b c0       	rjmp	.+22     	; 0x3ab2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9e:	80 5c       	subi	r24, 0xC0	; 192
    3aa0:	89 83       	std	Y+1, r24	; 0x01
    3aa2:	07 c0       	rjmp	.+14     	; 0x3ab2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	80 5f       	subi	r24, 0xF0	; 240
    3aa8:	89 83       	std	Y+1, r24	; 0x01
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3aac:	8b 81       	ldd	r24, Y+3	; 0x03
    3aae:	80 5b       	subi	r24, 0xB0	; 176
    3ab0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	80 68       	ori	r24, 0x80	; 128
    3ab6:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <LCD_displayStringRowColumn+0x6>
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <LCD_displayStringRowColumn+0x8>
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	6a 83       	std	Y+2, r22	; 0x02
    3ada:	5c 83       	std	Y+4, r21	; 0x04
    3adc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	6a 81       	ldd	r22, Y+2	; 0x02
    3ae2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aea:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
}
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	62 97       	sbiw	r28, 0x12	; 18
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	9a 8b       	std	Y+18, r25	; 0x12
    3b12:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3b14:	89 89       	ldd	r24, Y+17	; 0x11
    3b16:	9a 89       	ldd	r25, Y+18	; 0x12
    3b18:	9e 01       	movw	r18, r28
    3b1a:	2f 5f       	subi	r18, 0xFF	; 255
    3b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1e:	b9 01       	movw	r22, r18
    3b20:	4a e0       	ldi	r20, 0x0A	; 10
    3b22:	50 e0       	ldi	r21, 0x00	; 0
    3b24:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <itoa>
   LCD_displayString(buff); /* Display the string */
    3b28:	ce 01       	movw	r24, r28
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <LCD_displayString>
}
    3b30:	62 96       	adiw	r28, 0x12	; 18
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_sendCommand>
}
    3b50:	cf 91       	pop	r28
    3b52:	df 91       	pop	r29
    3b54:	08 95       	ret

00003b56 <__vector_9>:
#include <avr/io.h>
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_OVF_vect)
{
    3b56:	1f 92       	push	r1
    3b58:	0f 92       	push	r0
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	0f 92       	push	r0
    3b5e:	11 24       	eor	r1, r1
    3b60:	2f 93       	push	r18
    3b62:	3f 93       	push	r19
    3b64:	4f 93       	push	r20
    3b66:	5f 93       	push	r21
    3b68:	6f 93       	push	r22
    3b6a:	7f 93       	push	r23
    3b6c:	8f 93       	push	r24
    3b6e:	9f 93       	push	r25
    3b70:	af 93       	push	r26
    3b72:	bf 93       	push	r27
    3b74:	ef 93       	push	r30
    3b76:	ff 93       	push	r31
    3b78:	df 93       	push	r29
    3b7a:	cf 93       	push	r28
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3b80:	80 91 3b 01 	lds	r24, 0x013B
    3b84:	90 91 3c 01 	lds	r25, 0x013C
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	29 f0       	breq	.+10     	; 0x3b96 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3b8c:	e0 91 3b 01 	lds	r30, 0x013B
    3b90:	f0 91 3c 01 	lds	r31, 0x013C
    3b94:	09 95       	icall
	}
}
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	ff 91       	pop	r31
    3b9c:	ef 91       	pop	r30
    3b9e:	bf 91       	pop	r27
    3ba0:	af 91       	pop	r26
    3ba2:	9f 91       	pop	r25
    3ba4:	8f 91       	pop	r24
    3ba6:	7f 91       	pop	r23
    3ba8:	6f 91       	pop	r22
    3baa:	5f 91       	pop	r21
    3bac:	4f 91       	pop	r20
    3bae:	3f 91       	pop	r19
    3bb0:	2f 91       	pop	r18
    3bb2:	0f 90       	pop	r0
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	0f 90       	pop	r0
    3bb8:	1f 90       	pop	r1
    3bba:	18 95       	reti

00003bbc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3bbc:	1f 92       	push	r1
    3bbe:	0f 92       	push	r0
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	0f 92       	push	r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	2f 93       	push	r18
    3bc8:	3f 93       	push	r19
    3bca:	4f 93       	push	r20
    3bcc:	5f 93       	push	r21
    3bce:	6f 93       	push	r22
    3bd0:	7f 93       	push	r23
    3bd2:	8f 93       	push	r24
    3bd4:	9f 93       	push	r25
    3bd6:	af 93       	push	r26
    3bd8:	bf 93       	push	r27
    3bda:	ef 93       	push	r30
    3bdc:	ff 93       	push	r31
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3be6:	80 91 3b 01 	lds	r24, 0x013B
    3bea:	90 91 3c 01 	lds	r25, 0x013C
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	29 f0       	breq	.+10     	; 0x3bfc <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3bf2:	e0 91 3b 01 	lds	r30, 0x013B
    3bf6:	f0 91 3c 01 	lds	r31, 0x013C
    3bfa:	09 95       	icall
	}
}
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	ff 91       	pop	r31
    3c02:	ef 91       	pop	r30
    3c04:	bf 91       	pop	r27
    3c06:	af 91       	pop	r26
    3c08:	9f 91       	pop	r25
    3c0a:	8f 91       	pop	r24
    3c0c:	7f 91       	pop	r23
    3c0e:	6f 91       	pop	r22
    3c10:	5f 91       	pop	r21
    3c12:	4f 91       	pop	r20
    3c14:	3f 91       	pop	r19
    3c16:	2f 91       	pop	r18
    3c18:	0f 90       	pop	r0
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	0f 90       	pop	r0
    3c1e:	1f 90       	pop	r1
    3c20:	18 95       	reti

00003c22 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <Timer1_init+0x6>
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	9a 83       	std	Y+2, r25	; 0x02
    3c2e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    3c30:	ac e4       	ldi	r26, 0x4C	; 76
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	e9 81       	ldd	r30, Y+1	; 0x01
    3c36:	fa 81       	ldd	r31, Y+2	; 0x02
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	9c 93       	st	X, r25
    3c40:	8e 93       	st	-X, r24
	if(Config_Ptr ->mode == CTC){
    3c42:	e9 81       	ldd	r30, Y+1	; 0x01
    3c44:	fa 81       	ldd	r31, Y+2	; 0x02
    3c46:	85 81       	ldd	r24, Z+5	; 0x05
    3c48:	81 30       	cpi	r24, 0x01	; 1
    3c4a:	29 f5       	brne	.+74     	; 0x3c96 <Timer1_init+0x74>
		TCCR1B |= (1<<WGM01);
    3c4c:	ae e4       	ldi	r26, 0x4E	; 78
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	ee e4       	ldi	r30, 0x4E	; 78
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	80 81       	ld	r24, Z
    3c56:	88 60       	ori	r24, 0x08	; 8
    3c58:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    3c5a:	aa e4       	ldi	r26, 0x4A	; 74
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c60:	fa 81       	ldd	r31, Y+2	; 0x02
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	11 96       	adiw	r26, 0x01	; 1
    3c68:	9c 93       	st	X, r25
    3c6a:	8e 93       	st	-X, r24
		TIMSK  |= (1<<OCIE1A);
    3c6c:	a9 e5       	ldi	r26, 0x59	; 89
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	e9 e5       	ldi	r30, 0x59	; 89
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	80 61       	ori	r24, 0x10	; 16
    3c78:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    3c7a:	ef e4       	ldi	r30, 0x4F	; 79
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	88 e0       	ldi	r24, 0x08	; 8
    3c80:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    3c82:	ae e4       	ldi	r26, 0x4E	; 78
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	ee e4       	ldi	r30, 0x4E	; 78
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	90 81       	ld	r25, Z
    3c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c90:	84 81       	ldd	r24, Z+4	; 0x04
    3c92:	89 2b       	or	r24, r25
    3c94:	8c 93       	st	X, r24

	}
	if ((Config_Ptr -> mode) == NORMAL)
    3c96:	e9 81       	ldd	r30, Y+1	; 0x01
    3c98:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9a:	85 81       	ldd	r24, Z+5	; 0x05
    3c9c:	88 23       	and	r24, r24
    3c9e:	71 f4       	brne	.+28     	; 0x3cbc <Timer1_init+0x9a>
		{
			// Set prescaler
			TCCR1B = (TCCR1B) | (Config_Ptr -> prescaler);
    3ca0:	ae e4       	ldi	r26, 0x4E	; 78
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	ee e4       	ldi	r30, 0x4E	; 78
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	90 81       	ld	r25, Z
    3caa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cac:	fa 81       	ldd	r31, Y+2	; 0x02
    3cae:	84 81       	ldd	r24, Z+4	; 0x04
    3cb0:	89 2b       	or	r24, r25
    3cb2:	8c 93       	st	X, r24
			// Enable overflow interrupt
			TIMSK = (1<<TOIE1);
    3cb4:	e9 e5       	ldi	r30, 0x59	; 89
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	80 83       	st	Z, r24

		}
}
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	08 95       	ret

00003cc6 <Timer1_deInit>:
	void Timer1_deInit(void)
	{
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
		TCCR1A =0 ;
    3cce:	ef e4       	ldi	r30, 0x4F	; 79
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	10 82       	st	Z, r1
		TCCR1B =0 ;
    3cd4:	ee e4       	ldi	r30, 0x4E	; 78
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    3cda:	ec e4       	ldi	r30, 0x4C	; 76
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	11 82       	std	Z+1, r1	; 0x01
    3ce0:	10 82       	st	Z, r1
		OCR1A = 0 ;
    3ce2:	ea e4       	ldi	r30, 0x4A	; 74
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	11 82       	std	Z+1, r1	; 0x01
    3ce8:	10 82       	st	Z, r1
		TIMSK = 0 ;
    3cea:	e9 e5       	ldi	r30, 0x59	; 89
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	10 82       	st	Z, r1
		//g_callBackPtr = NULL_PTR ;
	}
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <Timer1_setCallBack>:
	void Timer1_setCallBack(void(*a_ptr)(void))
	{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <Timer1_setCallBack+0x6>
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	9a 81       	ldd	r25, Y+2	; 0x02
    3d08:	90 93 3c 01 	sts	0x013C, r25
    3d0c:	80 93 3b 01 	sts	0x013B, r24


	}
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	cf 91       	pop	r28
    3d16:	df 91       	pop	r29
    3d18:	08 95       	ret

00003d1a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <UART_init+0x6>
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <UART_init+0x8>
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	9c 83       	std	Y+4, r25	; 0x04
    3d28:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3d2a:	1a 82       	std	Y+2, r1	; 0x02
    3d2c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3d2e:	eb e2       	ldi	r30, 0x2B	; 43
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	82 e0       	ldi	r24, 0x02	; 2
    3d34:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3d36:	ea e2       	ldi	r30, 0x2A	; 42
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	88 e1       	ldi	r24, 0x18	; 24
    3d3c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRB = UCSRB | ((Config_Ptr -> bit_data) & (0x04));
    3d3e:	aa e2       	ldi	r26, 0x2A	; 42
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	ea e2       	ldi	r30, 0x2A	; 42
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	80 81       	ld	r24, Z
    3d48:	98 2f       	mov	r25, r24
    3d4a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d4c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d4e:	80 81       	ld	r24, Z
    3d50:	84 70       	andi	r24, 0x04	; 4
    3d52:	89 2b       	or	r24, r25
    3d54:	8c 93       	st	X, r24
		 * Bit 5:4 – UPM1:0 --> (parity) configured
		 * Bit 3 – USBS --> (stop bit select) configured
		 * Bit 2:1 – UCSZ1:0 --> configured
		 * Bit 0 – UCPOL = 0 Used with the Synchronous operation only
		 */
		UCSRC =  ((Config_Ptr -> parity)<<4) | (1<<URSEL) | ((Config_Ptr -> stop_bit)<<3) ;
    3d56:	a0 e4       	ldi	r26, 0x40	; 64
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d5e:	81 81       	ldd	r24, Z+1	; 0x01
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	82 95       	swap	r24
    3d66:	92 95       	swap	r25
    3d68:	90 7f       	andi	r25, 0xF0	; 240
    3d6a:	98 27       	eor	r25, r24
    3d6c:	80 7f       	andi	r24, 0xF0	; 240
    3d6e:	98 27       	eor	r25, r24
    3d70:	28 2f       	mov	r18, r24
    3d72:	20 68       	ori	r18, 0x80	; 128
    3d74:	eb 81       	ldd	r30, Y+3	; 0x03
    3d76:	fc 81       	ldd	r31, Y+4	; 0x04
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	82 2b       	or	r24, r18
    3d8c:	8c 93       	st	X, r24
		UCSRC =  UCSRC | ( (((Config_Ptr -> bit_data) & 0x03) <<1) );
    3d8e:	a0 e4       	ldi	r26, 0x40	; 64
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	e0 e4       	ldi	r30, 0x40	; 64
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	28 2f       	mov	r18, r24
    3d9a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d9c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d9e:	80 81       	ld	r24, Z
    3da0:	88 2f       	mov	r24, r24
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	83 70       	andi	r24, 0x03	; 3
    3da6:	90 70       	andi	r25, 0x00	; 0
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	82 2b       	or	r24, r18
    3dae:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
		ubrr_value =(uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    3db0:	eb 81       	ldd	r30, Y+3	; 0x03
    3db2:	fc 81       	ldd	r31, Y+4	; 0x04
    3db4:	83 81       	ldd	r24, Z+3	; 0x03
    3db6:	94 81       	ldd	r25, Z+4	; 0x04
    3db8:	a5 81       	ldd	r26, Z+5	; 0x05
    3dba:	b6 81       	ldd	r27, Z+6	; 0x06
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	aa 1f       	adc	r26, r26
    3dc2:	bb 1f       	adc	r27, r27
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	aa 1f       	adc	r26, r26
    3dca:	bb 1f       	adc	r27, r27
    3dcc:	88 0f       	add	r24, r24
    3dce:	99 1f       	adc	r25, r25
    3dd0:	aa 1f       	adc	r26, r26
    3dd2:	bb 1f       	adc	r27, r27
    3dd4:	9c 01       	movw	r18, r24
    3dd6:	ad 01       	movw	r20, r26
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	92 e1       	ldi	r25, 0x12	; 18
    3ddc:	aa e7       	ldi	r26, 0x7A	; 122
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <__udivmodsi4>
    3de8:	da 01       	movw	r26, r20
    3dea:	c9 01       	movw	r24, r18
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	9a 83       	std	Y+2, r25	; 0x02
    3df0:	89 83       	std	Y+1, r24	; 0x01

			/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
			UBRRH = ubrr_value>>8;
    3df2:	e0 e4       	ldi	r30, 0x40	; 64
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfa:	89 2f       	mov	r24, r25
    3dfc:	99 27       	eor	r25, r25
    3dfe:	80 83       	st	Z, r24
			UBRRL = ubrr_value;
    3e00:	e9 e2       	ldi	r30, 0x29	; 41
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	80 83       	st	Z, r24
}
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	0f 92       	push	r0
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3e22:	eb e2       	ldi	r30, 0x2B	; 43
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	80 81       	ld	r24, Z
    3e28:	88 2f       	mov	r24, r24
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	80 72       	andi	r24, 0x20	; 32
    3e2e:	90 70       	andi	r25, 0x00	; 0
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	b9 f3       	breq	.-18     	; 0x3e22 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3e34:	ec e2       	ldi	r30, 0x2C	; 44
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3e3c:	0f 90       	pop	r0
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3e4c:	eb e2       	ldi	r30, 0x2B	; 43
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	88 23       	and	r24, r24
    3e54:	dc f7       	brge	.-10     	; 0x3e4c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3e56:	ec e2       	ldi	r30, 0x2C	; 44
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
}
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	00 d0       	rcall	.+0      	; 0x3e68 <UART_sendString+0x6>
    3e68:	0f 92       	push	r0
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	9b 83       	std	Y+3, r25	; 0x03
    3e70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e72:	19 82       	std	Y+1, r1	; 0x01
    3e74:	0e c0       	rjmp	.+28     	; 0x3e92 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e80:	fc 01       	movw	r30, r24
    3e82:	e2 0f       	add	r30, r18
    3e84:	f3 1f       	adc	r31, r19
    3e86:	80 81       	ld	r24, Z
    3e88:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <UART_sendByte>
		i++;
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	8f 5f       	subi	r24, 0xFF	; 255
    3e90:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	e2 0f       	add	r30, r18
    3ea0:	f3 1f       	adc	r31, r19
    3ea2:	80 81       	ld	r24, Z
    3ea4:	88 23       	and	r24, r24
    3ea6:	39 f7       	brne	.-50     	; 0x3e76 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	0f 90       	pop	r0
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	00 d0       	rcall	.+0      	; 0x3ebe <UART_receiveString+0xa>
    3ebe:	0f 92       	push	r0
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	9b 83       	std	Y+3, r25	; 0x03
    3ec6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ec8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed4:	8c 01       	movw	r16, r24
    3ed6:	02 0f       	add	r16, r18
    3ed8:	13 1f       	adc	r17, r19
    3eda:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    3ede:	f8 01       	movw	r30, r16
    3ee0:	80 83       	st	Z, r24
    3ee2:	0f c0       	rjmp	.+30     	; 0x3f02 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	8f 5f       	subi	r24, 0xFF	; 255
    3ee8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	28 2f       	mov	r18, r24
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef4:	8c 01       	movw	r16, r24
    3ef6:	02 0f       	add	r16, r18
    3ef8:	13 1f       	adc	r17, r19
    3efa:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <UART_recieveByte>
    3efe:	f8 01       	movw	r30, r16
    3f00:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e2 0f       	add	r30, r18
    3f10:	f3 1f       	adc	r31, r19
    3f12:	80 81       	ld	r24, Z
    3f14:	83 32       	cpi	r24, 0x23	; 35
    3f16:	31 f7       	brne	.-52     	; 0x3ee4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	28 2f       	mov	r18, r24
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f20:	9b 81       	ldd	r25, Y+3	; 0x03
    3f22:	fc 01       	movw	r30, r24
    3f24:	e2 0f       	add	r30, r18
    3f26:	f3 1f       	adc	r31, r19
    3f28:	10 82       	st	Z, r1
}
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	08 95       	ret

00003f3a <__udivmodsi4>:
    3f3a:	a1 e2       	ldi	r26, 0x21	; 33
    3f3c:	1a 2e       	mov	r1, r26
    3f3e:	aa 1b       	sub	r26, r26
    3f40:	bb 1b       	sub	r27, r27
    3f42:	fd 01       	movw	r30, r26
    3f44:	0d c0       	rjmp	.+26     	; 0x3f60 <__udivmodsi4_ep>

00003f46 <__udivmodsi4_loop>:
    3f46:	aa 1f       	adc	r26, r26
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	ee 1f       	adc	r30, r30
    3f4c:	ff 1f       	adc	r31, r31
    3f4e:	a2 17       	cp	r26, r18
    3f50:	b3 07       	cpc	r27, r19
    3f52:	e4 07       	cpc	r30, r20
    3f54:	f5 07       	cpc	r31, r21
    3f56:	20 f0       	brcs	.+8      	; 0x3f60 <__udivmodsi4_ep>
    3f58:	a2 1b       	sub	r26, r18
    3f5a:	b3 0b       	sbc	r27, r19
    3f5c:	e4 0b       	sbc	r30, r20
    3f5e:	f5 0b       	sbc	r31, r21

00003f60 <__udivmodsi4_ep>:
    3f60:	66 1f       	adc	r22, r22
    3f62:	77 1f       	adc	r23, r23
    3f64:	88 1f       	adc	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	1a 94       	dec	r1
    3f6a:	69 f7       	brne	.-38     	; 0x3f46 <__udivmodsi4_loop>
    3f6c:	60 95       	com	r22
    3f6e:	70 95       	com	r23
    3f70:	80 95       	com	r24
    3f72:	90 95       	com	r25
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	bd 01       	movw	r22, r26
    3f7a:	cf 01       	movw	r24, r30
    3f7c:	08 95       	ret

00003f7e <__prologue_saves__>:
    3f7e:	2f 92       	push	r2
    3f80:	3f 92       	push	r3
    3f82:	4f 92       	push	r4
    3f84:	5f 92       	push	r5
    3f86:	6f 92       	push	r6
    3f88:	7f 92       	push	r7
    3f8a:	8f 92       	push	r8
    3f8c:	9f 92       	push	r9
    3f8e:	af 92       	push	r10
    3f90:	bf 92       	push	r11
    3f92:	cf 92       	push	r12
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	ca 1b       	sub	r28, r26
    3fa8:	db 0b       	sbc	r29, r27
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	09 94       	ijmp

00003fb6 <__epilogue_restores__>:
    3fb6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb8:	39 88       	ldd	r3, Y+17	; 0x11
    3fba:	48 88       	ldd	r4, Y+16	; 0x10
    3fbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc8:	b9 84       	ldd	r11, Y+9	; 0x09
    3fca:	c8 84       	ldd	r12, Y+8	; 0x08
    3fcc:	df 80       	ldd	r13, Y+7	; 0x07
    3fce:	ee 80       	ldd	r14, Y+6	; 0x06
    3fd0:	fd 80       	ldd	r15, Y+5	; 0x05
    3fd2:	0c 81       	ldd	r16, Y+4	; 0x04
    3fd4:	1b 81       	ldd	r17, Y+3	; 0x03
    3fd6:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd8:	b9 81       	ldd	r27, Y+1	; 0x01
    3fda:	ce 0f       	add	r28, r30
    3fdc:	d1 1d       	adc	r29, r1
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	ed 01       	movw	r28, r26
    3fea:	08 95       	ret

00003fec <itoa>:
    3fec:	fb 01       	movw	r30, r22
    3fee:	9f 01       	movw	r18, r30
    3ff0:	e8 94       	clt
    3ff2:	42 30       	cpi	r20, 0x02	; 2
    3ff4:	c4 f0       	brlt	.+48     	; 0x4026 <itoa+0x3a>
    3ff6:	45 32       	cpi	r20, 0x25	; 37
    3ff8:	b4 f4       	brge	.+44     	; 0x4026 <itoa+0x3a>
    3ffa:	4a 30       	cpi	r20, 0x0A	; 10
    3ffc:	29 f4       	brne	.+10     	; 0x4008 <itoa+0x1c>
    3ffe:	97 fb       	bst	r25, 7
    4000:	1e f4       	brtc	.+6      	; 0x4008 <itoa+0x1c>
    4002:	90 95       	com	r25
    4004:	81 95       	neg	r24
    4006:	9f 4f       	sbci	r25, 0xFF	; 255
    4008:	64 2f       	mov	r22, r20
    400a:	77 27       	eor	r23, r23
    400c:	0e 94 27 20 	call	0x404e	; 0x404e <__udivmodhi4>
    4010:	80 5d       	subi	r24, 0xD0	; 208
    4012:	8a 33       	cpi	r24, 0x3A	; 58
    4014:	0c f0       	brlt	.+2      	; 0x4018 <itoa+0x2c>
    4016:	89 5d       	subi	r24, 0xD9	; 217
    4018:	81 93       	st	Z+, r24
    401a:	cb 01       	movw	r24, r22
    401c:	00 97       	sbiw	r24, 0x00	; 0
    401e:	a1 f7       	brne	.-24     	; 0x4008 <itoa+0x1c>
    4020:	16 f4       	brtc	.+4      	; 0x4026 <itoa+0x3a>
    4022:	5d e2       	ldi	r21, 0x2D	; 45
    4024:	51 93       	st	Z+, r21
    4026:	10 82       	st	Z, r1
    4028:	c9 01       	movw	r24, r18
    402a:	0c 94 17 20 	jmp	0x402e	; 0x402e <strrev>

0000402e <strrev>:
    402e:	dc 01       	movw	r26, r24
    4030:	fc 01       	movw	r30, r24
    4032:	67 2f       	mov	r22, r23
    4034:	71 91       	ld	r23, Z+
    4036:	77 23       	and	r23, r23
    4038:	e1 f7       	brne	.-8      	; 0x4032 <strrev+0x4>
    403a:	32 97       	sbiw	r30, 0x02	; 2
    403c:	04 c0       	rjmp	.+8      	; 0x4046 <strrev+0x18>
    403e:	7c 91       	ld	r23, X
    4040:	6d 93       	st	X+, r22
    4042:	70 83       	st	Z, r23
    4044:	62 91       	ld	r22, -Z
    4046:	ae 17       	cp	r26, r30
    4048:	bf 07       	cpc	r27, r31
    404a:	c8 f3       	brcs	.-14     	; 0x403e <strrev+0x10>
    404c:	08 95       	ret

0000404e <__udivmodhi4>:
    404e:	aa 1b       	sub	r26, r26
    4050:	bb 1b       	sub	r27, r27
    4052:	51 e1       	ldi	r21, 0x11	; 17
    4054:	07 c0       	rjmp	.+14     	; 0x4064 <__udivmodhi4_ep>

00004056 <__udivmodhi4_loop>:
    4056:	aa 1f       	adc	r26, r26
    4058:	bb 1f       	adc	r27, r27
    405a:	a6 17       	cp	r26, r22
    405c:	b7 07       	cpc	r27, r23
    405e:	10 f0       	brcs	.+4      	; 0x4064 <__udivmodhi4_ep>
    4060:	a6 1b       	sub	r26, r22
    4062:	b7 0b       	sbc	r27, r23

00004064 <__udivmodhi4_ep>:
    4064:	88 1f       	adc	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	5a 95       	dec	r21
    406a:	a9 f7       	brne	.-22     	; 0x4056 <__udivmodhi4_loop>
    406c:	80 95       	com	r24
    406e:	90 95       	com	r25
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	08 95       	ret

00004076 <_exit>:
    4076:	f8 94       	cli

00004078 <__stop_program>:
    4078:	ff cf       	rjmp	.-2      	; 0x4078 <__stop_program>
